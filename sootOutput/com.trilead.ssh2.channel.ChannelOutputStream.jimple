public final class com.trilead.ssh2.channel.ChannelOutputStream extends java.io.OutputStream
{
    com.trilead.ssh2.channel.Channel c;
    boolean isClosed;
    private byte[] writeBuffer;

    void <init>(com.trilead.ssh2.channel.Channel)
    {
        com.trilead.ssh2.channel.ChannelOutputStream $r0;
        com.trilead.ssh2.channel.Channel $r1;
        byte[] $r2;

        $r0 := @this: com.trilead.ssh2.channel.ChannelOutputStream;

        $r1 := @parameter0: com.trilead.ssh2.channel.Channel;

        specialinvoke $r0.<java.io.OutputStream: void <init>()>();

        $r0.<com.trilead.ssh2.channel.ChannelOutputStream: boolean isClosed> = 0;

        $r0.<com.trilead.ssh2.channel.ChannelOutputStream: com.trilead.ssh2.channel.Channel c> = $r1;

        $r2 = newarray (byte)[1];

        $r0.<com.trilead.ssh2.channel.ChannelOutputStream: byte[] writeBuffer> = $r2;

        return;
    }

    public void close() throws java.io.IOException
    {
        com.trilead.ssh2.channel.ChannelOutputStream $r0;
        boolean $z0;
        com.trilead.ssh2.channel.Channel $r1;
        com.trilead.ssh2.channel.ChannelManager $r2;

        $r0 := @this: com.trilead.ssh2.channel.ChannelOutputStream;

        $z0 = $r0.<com.trilead.ssh2.channel.ChannelOutputStream: boolean isClosed>;

        if $z0 != 0 goto label1;

        $r0.<com.trilead.ssh2.channel.ChannelOutputStream: boolean isClosed> = 1;

        $r1 = $r0.<com.trilead.ssh2.channel.ChannelOutputStream: com.trilead.ssh2.channel.Channel c>;

        $r2 = $r1.<com.trilead.ssh2.channel.Channel: com.trilead.ssh2.channel.ChannelManager cm>;

        $r1 = $r0.<com.trilead.ssh2.channel.ChannelOutputStream: com.trilead.ssh2.channel.Channel c>;

        virtualinvoke $r2.<com.trilead.ssh2.channel.ChannelManager: void sendEOF(com.trilead.ssh2.channel.Channel)>($r1);

        return;

     label1:
        return;
    }

    public void flush() throws java.io.IOException
    {
        com.trilead.ssh2.channel.ChannelOutputStream $r0;
        boolean $z0;
        java.io.IOException $r1;

        $r0 := @this: com.trilead.ssh2.channel.ChannelOutputStream;

        $z0 = $r0.<com.trilead.ssh2.channel.ChannelOutputStream: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("This OutputStream is closed.");

        throw $r1;

     label1:
        return;
    }

    public void write(int) throws java.io.IOException
    {
        com.trilead.ssh2.channel.ChannelOutputStream $r0;
        int $i0;
        byte[] $r1;
        byte $b1;

        $r0 := @this: com.trilead.ssh2.channel.ChannelOutputStream;

        $i0 := @parameter0: int;

        $r1 = $r0.<com.trilead.ssh2.channel.ChannelOutputStream: byte[] writeBuffer>;

        $b1 = (byte) $i0;

        $r1[0] = $b1;

        $r1 = $r0.<com.trilead.ssh2.channel.ChannelOutputStream: byte[] writeBuffer>;

        virtualinvoke $r0.<com.trilead.ssh2.channel.ChannelOutputStream: void write(byte[],int,int)>($r1, 0, 1);

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        com.trilead.ssh2.channel.ChannelOutputStream $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: com.trilead.ssh2.channel.ChannelOutputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        virtualinvoke $r0.<com.trilead.ssh2.channel.ChannelOutputStream: void write(byte[],int,int)>($r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        com.trilead.ssh2.channel.ChannelOutputStream $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.NullPointerException $r3;
        java.lang.IndexOutOfBoundsException $r4;
        com.trilead.ssh2.channel.Channel $r5;
        com.trilead.ssh2.channel.ChannelManager $r6;

        $r0 := @this: com.trilead.ssh2.channel.ChannelOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = $r0.<com.trilead.ssh2.channel.ChannelOutputStream: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("This OutputStream is closed.");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label2:
        if $i0 < 0 goto label3;

        if $i1 < 0 goto label3;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 > $i3 goto label3;

        $i3 = $i0 + $i1;

        if $i3 < 0 goto label3;

        $i3 = lengthof $r1;

        if $i0 <= $i3 goto label4;

     label3:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label4:
        if $i1 != 0 goto label5;

        return;

     label5:
        $r5 = $r0.<com.trilead.ssh2.channel.ChannelOutputStream: com.trilead.ssh2.channel.Channel c>;

        $r6 = $r5.<com.trilead.ssh2.channel.Channel: com.trilead.ssh2.channel.ChannelManager cm>;

        $r5 = $r0.<com.trilead.ssh2.channel.ChannelOutputStream: com.trilead.ssh2.channel.Channel c>;

        virtualinvoke $r6.<com.trilead.ssh2.channel.ChannelManager: void sendData(com.trilead.ssh2.channel.Channel,byte[],int,int)>($r5, $r1, $i0, $i1);

        return;
    }
}
