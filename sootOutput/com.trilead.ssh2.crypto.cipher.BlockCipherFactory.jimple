public class com.trilead.ssh2.crypto.cipher.BlockCipherFactory extends java.lang.Object
{
    static java.util.Vector ciphers;

    static void <clinit>()
    {
        java.util.Vector $r0;
        com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry $r1;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers> = $r0;

        $r0 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $r1 = new com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry;

        specialinvoke $r1.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: void <init>(java.lang.String,int,int,java.lang.String)>("aes256-ctr", 16, 32, "com.trilead.ssh2.crypto.cipher.AES");

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r0 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $r1 = new com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry;

        specialinvoke $r1.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: void <init>(java.lang.String,int,int,java.lang.String)>("aes192-ctr", 16, 24, "com.trilead.ssh2.crypto.cipher.AES");

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r0 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $r1 = new com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry;

        specialinvoke $r1.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: void <init>(java.lang.String,int,int,java.lang.String)>("aes128-ctr", 16, 16, "com.trilead.ssh2.crypto.cipher.AES");

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r0 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $r1 = new com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry;

        specialinvoke $r1.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: void <init>(java.lang.String,int,int,java.lang.String)>("blowfish-ctr", 8, 16, "com.trilead.ssh2.crypto.cipher.BlowFish");

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r0 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $r1 = new com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry;

        specialinvoke $r1.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: void <init>(java.lang.String,int,int,java.lang.String)>("aes256-cbc", 16, 32, "com.trilead.ssh2.crypto.cipher.AES");

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r0 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $r1 = new com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry;

        specialinvoke $r1.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: void <init>(java.lang.String,int,int,java.lang.String)>("aes192-cbc", 16, 24, "com.trilead.ssh2.crypto.cipher.AES");

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r0 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $r1 = new com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry;

        specialinvoke $r1.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: void <init>(java.lang.String,int,int,java.lang.String)>("aes128-cbc", 16, 16, "com.trilead.ssh2.crypto.cipher.AES");

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r0 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $r1 = new com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry;

        specialinvoke $r1.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: void <init>(java.lang.String,int,int,java.lang.String)>("blowfish-cbc", 8, 16, "com.trilead.ssh2.crypto.cipher.BlowFish");

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r0 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $r1 = new com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry;

        specialinvoke $r1.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: void <init>(java.lang.String,int,int,java.lang.String)>("3des-ctr", 8, 24, "com.trilead.ssh2.crypto.cipher.DESede");

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r0 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $r1 = new com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry;

        specialinvoke $r1.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: void <init>(java.lang.String,int,int,java.lang.String)>("3des-cbc", 8, 24, "com.trilead.ssh2.crypto.cipher.DESede");

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        return;
    }

    public static com.trilead.ssh2.crypto.cipher.BlockCipher createCipher(java.lang.String, boolean, byte[], byte[])
    {
        java.lang.String $r0, $r4;
        boolean $z0, $z1;
        byte[] $r1, $r2;
        java.lang.Exception $r3;
        java.lang.StringBuilder $r5, r14;
        com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry $r6;
        java.lang.Class $r7;
        java.lang.Object $r8;
        com.trilead.ssh2.crypto.cipher.BlockCipher $r9, $r10;
        java.lang.IllegalArgumentException $r11, r15;
        com.trilead.ssh2.crypto.cipher.CBCMode r12;
        com.trilead.ssh2.crypto.cipher.CTRMode r13;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: byte[];

        $r2 := @parameter3: byte[];

     label01:
        $r6 = staticinvoke <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry getEntry(java.lang.String)>($r0);

        $r4 = $r6.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: java.lang.String cipherClass>;

        $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Object newInstance()>();

        $r9 = (com.trilead.ssh2.crypto.cipher.BlockCipher) $r8;

        $z1 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("-cbc");

        if $z1 == 0 goto label05;

        interfaceinvoke $r9.<com.trilead.ssh2.crypto.cipher.BlockCipher: void init(boolean,byte[])>($z0, $r1);

     label02:
        r12 = new com.trilead.ssh2.crypto.cipher.CBCMode;

     label03:
        $r10 = r12;

        specialinvoke r12.<com.trilead.ssh2.crypto.cipher.CBCMode: void <init>(com.trilead.ssh2.crypto.cipher.BlockCipher,byte[],boolean)>($r9, $r2, $z0);

     label04:
        return $r10;

     label05:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>("-ctr");

        if $z1 == 0 goto label10;

        interfaceinvoke $r9.<com.trilead.ssh2.crypto.cipher.BlockCipher: void init(boolean,byte[])>(1, $r1);

     label06:
        r13 = new com.trilead.ssh2.crypto.cipher.CTRMode;

     label07:
        $r10 = r13;

        specialinvoke r13.<com.trilead.ssh2.crypto.cipher.CTRMode: void <init>(com.trilead.ssh2.crypto.cipher.BlockCipher,byte[],boolean)>($r9, $r2, $z0);

     label08:
        return $r10;

     label09:
        $r3 := @caughtexception;

        r15 = new java.lang.IllegalArgumentException;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot instantiate ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw r15;

     label10:
        r15 = new java.lang.IllegalArgumentException;

        $r11 = r15;

        r14 = new java.lang.StringBuilder;

        $r5 = r14;

     label11:
        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot instantiate ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r11;

     label12:
        nop;

        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label09;
        catch java.lang.Exception from label05 to label06 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label11 to label12 with label09;
    }

    public static int getBlockSize(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;
        com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry getEntry(java.lang.String)>($r0);

        $i0 = $r1.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: int blocksize>;

        return $i0;
    }

    public static java.lang.String[] getDefaultCipherList()
    {
        int $i0, $i1;
        java.lang.String[] $r0;
        java.util.Vector $r1;
        java.lang.String $r2, $r5;
        java.lang.Object $r3;
        com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry $r4;

        $r1 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        $r0 = newarray (java.lang.String)[$i0];

        $i0 = 0;

     label1:
        $r1 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 >= $i1 goto label2;

        $r1 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $r3 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r4 = (com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry) $r3;

        $r5 = new java.lang.String;

        $r2 = $r4.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: java.lang.String type>;

        specialinvoke $r5.<java.lang.String: void <init>(java.lang.String)>($r2);

        $r0[$i0] = $r5;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private static com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry getEntry(java.lang.String)
    {
        java.lang.String $r0, $r5;
        int $i0, $i1;
        java.util.Vector $r1;
        java.lang.StringBuilder $r2;
        java.lang.Object $r3;
        com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;

        $r0 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $r1 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 >= $i1 goto label3;

        $r1 = <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: java.util.Vector ciphers>;

        $r3 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r4 = (com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry) $r3;

        $r5 = $r4.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: java.lang.String type>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label2;

        return $r4;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unkown algorithm ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r6;
    }

    public static int getKeySize(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;
        com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.trilead.ssh2.crypto.cipher.BlockCipherFactory: com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry getEntry(java.lang.String)>($r0);

        $i0 = $r1.<com.trilead.ssh2.crypto.cipher.BlockCipherFactory$CipherEntry: int keysize>;

        return $i0;
    }
}
