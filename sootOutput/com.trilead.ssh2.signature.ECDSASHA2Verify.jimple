public class com.trilead.ssh2.signature.ECDSASHA2Verify extends java.lang.Object
{
    private static final java.util.Map CURVES;
    private static final java.util.Map CURVE_OIDS;
    private static final java.util.Map CURVE_SIZES;
    private static final com.trilead.ssh2.log.Logger log;

    static void <clinit>()
    {
        java.security.spec.ECParameterSpec $r0;
        com.trilead.ssh2.log.Logger $r1;
        java.util.TreeMap $r2;
        java.util.Map $r3;
        java.lang.Integer $r4;

        $r1 = staticinvoke <com.trilead.ssh2.log.Logger: com.trilead.ssh2.log.Logger getLogger(java.lang.Class)>(class "com/trilead/ssh2/signature/ECDSASHA2Verify");

        <com.trilead.ssh2.signature.ECDSASHA2Verify: com.trilead.ssh2.log.Logger log> = $r1;

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVES> = $r2;

        $r3 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVES>;

        $r0 = <com.trilead.ssh2.signature.ECDSASHA2Verify$EllipticCurves: java.security.spec.ECParameterSpec nistp256>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("nistp256", $r0);

        $r3 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVES>;

        $r0 = <com.trilead.ssh2.signature.ECDSASHA2Verify$EllipticCurves: java.security.spec.ECParameterSpec nistp384>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("nistp384", $r0);

        $r3 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVES>;

        $r0 = <com.trilead.ssh2.signature.ECDSASHA2Verify$EllipticCurves: java.security.spec.ECParameterSpec nistp521>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("nistp521", $r0);

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVE_SIZES> = $r2;

        $r3 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVE_SIZES>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(256);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "nistp256");

        $r3 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVE_SIZES>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(384);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "nistp384");

        $r3 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVE_SIZES>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(521);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "nistp521");

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVE_OIDS> = $r2;

        $r3 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVE_OIDS>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("1.2.840.10045.3.1.7", "nistp256");

        $r3 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVE_OIDS>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("1.3.132.0.34", "nistp256");

        $r3 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVE_OIDS>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("1.3.132.0.35", "nistp256");

        return;
    }

    public void <init>()
    {
        com.trilead.ssh2.signature.ECDSASHA2Verify $r0;

        $r0 := @this: com.trilead.ssh2.signature.ECDSASHA2Verify;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.security.spec.ECPoint decodeECPoint(byte[], java.security.spec.EllipticCurve)
    {
        byte[] $r0, $r3, $r4;
        java.security.spec.EllipticCurve $r1;
        java.security.spec.ECPoint $r2;
        int $i0, $i1, $i2;
        java.security.spec.ECField $r5;
        byte $b3;
        java.math.BigInteger $r6, $r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.security.spec.EllipticCurve;

        $i0 = lengthof $r0;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r5 = virtualinvoke $r1.<java.security.spec.EllipticCurve: java.security.spec.ECField getField()>();

        $i1 = interfaceinvoke $r5.<java.security.spec.ECField: int getFieldSize()>();

        $i1 = $i1 + 7;

        $i0 = $i1 / 8;

        $i2 = lengthof $r0;

        $i1 = $i0 * 2;

        $i1 = $i1 + 1;

        if $i2 != $i1 goto label2;

        $b3 = $r0[0];

        if $b3 != 4 goto label3;

        $r3 = newarray (byte)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 1, $r3, 0, $i0);

        $r4 = newarray (byte)[$i0];

        $i2 = $i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i2, $r4, 0, $i0);

        $r2 = new java.security.spec.ECPoint;

        $r6 = new java.math.BigInteger;

        specialinvoke $r6.<java.math.BigInteger: void <init>(int,byte[])>(1, $r3);

        $r7 = new java.math.BigInteger;

        specialinvoke $r7.<java.math.BigInteger: void <init>(int,byte[])>(1, $r4);

        specialinvoke $r2.<java.security.spec.ECPoint: void <init>(java.math.BigInteger,java.math.BigInteger)>($r6, $r7);

        return $r2;

     label2:
        return null;

     label3:
        return null;
    }

    public static java.security.interfaces.ECPublicKey decodeSSHECDSAPublicKey(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        java.security.spec.InvalidKeySpecException $r1;
        java.io.IOException $r2;
        java.security.spec.ECPublicKeySpec $r3;
        java.security.NoSuchAlgorithmException $r4;
        com.trilead.ssh2.packets.TypesReader $r5;
        java.lang.String $r6, $r8, $r10;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;
        int $i0;
        java.lang.StringBuilder $r9;
        java.util.Map $r11;
        java.lang.Object $r12;
        java.security.spec.ECParameterSpec $r13;
        java.security.spec.EllipticCurve $r14;
        java.security.spec.ECPoint $r15;
        java.security.KeyFactory $r16;
        java.security.PublicKey $r17;
        java.security.interfaces.ECPublicKey $r18;

        $r0 := @parameter0: byte[];

        $r5 = new com.trilead.ssh2.packets.TypesReader;

        specialinvoke $r5.<com.trilead.ssh2.packets.TypesReader: void <init>(byte[])>($r0);

        $r6 = virtualinvoke $r5.<com.trilead.ssh2.packets.TypesReader: java.lang.String readString()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("ecdsa-sha2-");

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This is not an ECDSA public key");

        throw $r7;

     label1:
        $r8 = virtualinvoke $r5.<com.trilead.ssh2.packets.TypesReader: java.lang.String readString()>();

        $r0 = virtualinvoke $r5.<com.trilead.ssh2.packets.TypesReader: byte[] readByteString()>();

        $i0 = virtualinvoke $r5.<com.trilead.ssh2.packets.TypesReader: int remain()>();

        if $i0 == 0 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Padding in ECDSA public key!");

        throw $r2;

     label2:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ecdsa-sha2-");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label3;

        $r2 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key format is inconsistent with curve name: ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label3:
        $r11 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVES>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r13 = (java.security.spec.ECParameterSpec) $r12;

        if $r13 != null goto label4;

        $r2 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Curve is not supported: ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label4:
        $r14 = virtualinvoke $r13.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r15 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: java.security.spec.ECPoint decodeECPoint(byte[],java.security.spec.EllipticCurve)>($r0, $r14);

        if $r15 != null goto label5;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Invalid ECDSA group");

        throw $r2;

     label5:
        $r3 = new java.security.spec.ECPublicKeySpec;

        specialinvoke $r3.<java.security.spec.ECPublicKeySpec: void <init>(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)>($r15, $r13);

     label6:
        $r16 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("EC");

        $r17 = virtualinvoke $r16.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r3);

     label7:
        $r18 = (java.security.interfaces.ECPublicKey) $r17;

        return $r18;

     label8:
        $r4 := @caughtexception;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("No EC KeyFactory available");

        virtualinvoke $r2.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r4);

        throw $r2;

     label9:
        $r1 := @caughtexception;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("No EC KeyFactory available");

        virtualinvoke $r2.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r1);

        throw $r2;

        catch java.security.NoSuchAlgorithmException from label6 to label7 with label8;
        catch java.security.spec.InvalidKeySpecException from label6 to label7 with label9;
    }

    public static byte[] decodeSSHECDSASignature(byte[]) throws java.io.IOException
    {
        byte[] $r0, $r9;
        int $i0, $i1, $i4;
        java.io.ByteArrayOutputStream $r1;
        com.trilead.ssh2.packets.TypesReader $r2;
        java.lang.String $r3, $r5;
        boolean $z0;
        java.io.IOException $r4;
        java.util.Map $r6;
        java.lang.StringBuilder $r7;
        java.math.BigInteger $r8;
        byte $b2;
        short $s3;

        $r0 := @parameter0: byte[];

        $r2 = new com.trilead.ssh2.packets.TypesReader;

        specialinvoke $r2.<com.trilead.ssh2.packets.TypesReader: void <init>(byte[])>($r0);

        $r3 = virtualinvoke $r2.<com.trilead.ssh2.packets.TypesReader: java.lang.String readString()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("ecdsa-sha2-");

        if $z0 != 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Peer sent wrong signature format");

        throw $r4;

     label1:
        $r5 = "ecdsa-sha2-";

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $r5 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i1);

        $r6 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVES>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $r4 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported curve: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        $r0 = virtualinvoke $r2.<com.trilead.ssh2.packets.TypesReader: byte[] readByteString()>();

        $i1 = virtualinvoke $r2.<com.trilead.ssh2.packets.TypesReader: int remain()>();

        if $i1 == 0 goto label3;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Padding in ECDSA signature!");

        throw $r4;

     label3:
        $r2 = new com.trilead.ssh2.packets.TypesReader;

        specialinvoke $r2.<com.trilead.ssh2.packets.TypesReader: void <init>(byte[])>($r0);

        $r8 = virtualinvoke $r2.<com.trilead.ssh2.packets.TypesReader: java.math.BigInteger readMPINT()>();

        $r0 = virtualinvoke $r8.<java.math.BigInteger: byte[] toByteArray()>();

        $r8 = virtualinvoke $r2.<com.trilead.ssh2.packets.TypesReader: java.math.BigInteger readMPINT()>();

        $r9 = virtualinvoke $r8.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = lengthof $r0;

        $i1 = lengthof $r9;

        $b2 = $r0[0];

        $s3 = $b2 & 128;

        if $s3 == 0 goto label4;

        $i0 = $i0 + 1;

     label4:
        $b2 = $r9[0];

        $s3 = $b2 & 128;

        if $s3 == 0 goto label5;

        $i1 = $i1 + 1;

     label5:
        $r1 = new java.io.ByteArrayOutputStream;

        $i4 = $i0 + 6;

        $i4 = $i4 + $i1;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>(int)>($i4);

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>(48);

        $i4 = $i0 + 4;

        $i4 = $i4 + $i1;

        staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: void writeLength(int,java.io.OutputStream)>($i4, $r1);

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>(2);

        staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: void writeLength(int,java.io.OutputStream)>($i0, $r1);

        $i4 = lengthof $r0;

        if $i0 == $i4 goto label6;

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>(0);

     label6:
        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(byte[])>($r0);

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>(2);

        staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: void writeLength(int,java.io.OutputStream)>($i1, $r1);

        $i4 = lengthof $r9;

        if $i1 == $i4 goto label7;

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>(0);

     label7:
        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(byte[])>($r9);

        $r9 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r9;
    }

    public static byte[] encodeECPoint(java.security.spec.ECPoint, java.security.spec.EllipticCurve)
    {
        java.security.spec.ECPoint $r0;
        java.security.spec.EllipticCurve $r1;
        byte[] $r2, $r5;
        int $i0, $i1, $i2;
        java.security.spec.ECField $r3;
        java.math.BigInteger $r4;

        $r0 := @parameter0: java.security.spec.ECPoint;

        $r1 := @parameter1: java.security.spec.EllipticCurve;

        $r3 = virtualinvoke $r1.<java.security.spec.EllipticCurve: java.security.spec.ECField getField()>();

        $i1 = interfaceinvoke $r3.<java.security.spec.ECField: int getFieldSize()>();

        $i1 = $i1 + 7;

        $i0 = $i1 / 8;

        $i1 = $i0 * 2;

        $i1 = $i1 + 1;

        $r2 = newarray (byte)[$i1];

        $r2[0] = 4;

        $r4 = virtualinvoke $r0.<java.security.spec.ECPoint: java.math.BigInteger getAffineX()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $r5 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: byte[] removeLeadingZeroes(byte[])>($r5);

        $i2 = $i0 + 1;

        $i1 = lengthof $r5;

        $i2 = $i2 - $i1;

        $i1 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r2, $i2, $i1);

        $r4 = virtualinvoke $r0.<java.security.spec.ECPoint: java.math.BigInteger getAffineY()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $r5 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: byte[] removeLeadingZeroes(byte[])>($r5);

        $i2 = $i0 + 1;

        $i2 = $i2 + $i0;

        $i1 = lengthof $r5;

        $i2 = $i2 - $i1;

        $i1 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r2, $i2, $i1);

        return $r2;
    }

    public static byte[] encodeSSHECDSAPublicKey(java.security.interfaces.ECPublicKey) throws java.io.IOException
    {
        java.security.interfaces.ECPublicKey $r0;
        com.trilead.ssh2.packets.TypesWriter $r1;
        java.security.spec.ECParameterSpec $r2;
        java.lang.String $r3, $r5;
        java.lang.StringBuilder $r4;
        java.security.spec.ECPoint $r6;
        java.security.spec.EllipticCurve $r7;
        byte[] $r8;
        int $i0;

        $r0 := @parameter0: java.security.interfaces.ECPublicKey;

        $r1 = new com.trilead.ssh2.packets.TypesWriter;

        specialinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void <init>()>();

        $r2 = interfaceinvoke $r0.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        $r3 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: java.lang.String getCurveName(java.security.spec.ECParameterSpec)>($r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ecdsa-sha2-");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>($r5);

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>($r3);

        $r6 = interfaceinvoke $r0.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        $r2 = interfaceinvoke $r0.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        $r7 = virtualinvoke $r2.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r8 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: byte[] encodeECPoint(java.security.spec.ECPoint,java.security.spec.EllipticCurve)>($r6, $r7);

        $i0 = lengthof $r8;

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeString(byte[],int,int)>($r8, 0, $i0);

        $r8 = virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: byte[] getBytes()>();

        return $r8;
    }

    public static byte[] encodeSSHECDSASignature(byte[], java.security.spec.ECParameterSpec) throws java.io.IOException
    {
        byte[] $r0, $r3, $r6;
        java.security.spec.ECParameterSpec $r1;
        java.math.BigInteger $r2, $r5;
        byte $b0, $b1;
        com.trilead.ssh2.packets.TypesWriter $r4, $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        int $i2, $i3;
        java.io.IOException $r10;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.security.spec.ECParameterSpec;

        $r7 = new com.trilead.ssh2.packets.TypesWriter;

        specialinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void <init>()>();

        $r9 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: java.lang.String getCurveName(java.security.spec.ECParameterSpec)>($r1);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ecdsa-sha2-");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>($r9);

        $b1 = $r0[0];

        if $b1 != 48 goto label1;

        $b1 = $r0[1];

        $i2 = lengthof $r0;

        $i2 = $i2 + -2;

        if $b1 != $i2 goto label1;

        $b1 = $r0[2];

        if $b1 == 2 goto label2;

     label1:
        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Invalid signature format");

        throw $r10;

     label2:
        $b0 = $r0[3];

        $i2 = $b0 + 6;

        $i3 = lengthof $r0;

        if $i2 > $i3 goto label3;

        $i3 = $b0 + 4;

        $b1 = $r0[$i3];

        if $b1 == 2 goto label4;

     label3:
        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Invalid signature format");

        throw $r10;

     label4:
        $i3 = $b0 + 5;

        $b1 = $r0[$i3];

        $i3 = $b0 + 6;

        $i3 = $i3 + $b1;

        $i2 = lengthof $r0;

        if $i3 <= $i2 goto label5;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Invalid signature format");

        throw $r10;

     label5:
        $r3 = newarray (byte)[$b0];

        $r6 = newarray (byte)[$b1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 4, $r3, 0, $b0);

        $i3 = $b0 + 6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i3, $r6, 0, $b1);

        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,byte[])>(1, $r3);

        $r5 = new java.math.BigInteger;

        specialinvoke $r5.<java.math.BigInteger: void <init>(int,byte[])>(1, $r6);

        $r4 = new com.trilead.ssh2.packets.TypesWriter;

        specialinvoke $r4.<com.trilead.ssh2.packets.TypesWriter: void <init>()>();

        virtualinvoke $r4.<com.trilead.ssh2.packets.TypesWriter: void writeMPInt(java.math.BigInteger)>($r2);

        virtualinvoke $r4.<com.trilead.ssh2.packets.TypesWriter: void writeMPInt(java.math.BigInteger)>($r5);

        $r6 = virtualinvoke $r4.<com.trilead.ssh2.packets.TypesWriter: byte[] getBytes()>();

        $i3 = lengthof $r6;

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(byte[],int,int)>($r6, 0, $i3);

        $r6 = virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: byte[] getBytes()>();

        return $r6;
    }

    public static byte[] generateSignature(byte[], java.security.interfaces.ECPrivateKey) throws java.io.IOException
    {
        byte[] $r0;
        java.security.interfaces.ECPrivateKey $r1;
        java.security.NoSuchAlgorithmException $r2;
        java.io.IOException $r3;
        java.security.spec.ECParameterSpec $r4;
        java.lang.String $r5;
        java.security.Signature $r6;
        java.security.InvalidKeyException $r7;
        java.security.SignatureException $r8;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.security.interfaces.ECPrivateKey;

        $r4 = interfaceinvoke $r1.<java.security.interfaces.ECPrivateKey: java.security.spec.ECParameterSpec getParams()>();

        $r5 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: java.lang.String getSignatureAlgorithmForParams(java.security.spec.ECParameterSpec)>($r4);

     label1:
        $r6 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r5);

        virtualinvoke $r6.<java.security.Signature: void initSign(java.security.PrivateKey)>($r1);

        virtualinvoke $r6.<java.security.Signature: void update(byte[])>($r0);

        $r0 = virtualinvoke $r6.<java.security.Signature: byte[] sign()>();

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>()>();

        virtualinvoke $r3.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r3;

     label4:
        $r7 := @caughtexception;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>()>();

        virtualinvoke $r3.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r7);

        throw $r3;

     label5:
        $r8 := @caughtexception;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>()>();

        virtualinvoke $r3.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r8);

        throw $r3;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label4;
        catch java.security.SignatureException from label1 to label2 with label5;
    }

    public static java.security.spec.ECParameterSpec getCurveForOID(java.lang.String)
    {
        java.lang.String $r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.security.spec.ECParameterSpec $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVE_OIDS>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r0 = (java.lang.String) $r2;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVES>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r3 = (java.security.spec.ECParameterSpec) $r2;

        return $r3;
    }

    public static java.lang.String getCurveName(int)
    {
        int $i0;
        java.util.Map $r0;
        java.lang.Integer $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        $i0 := @parameter0: int;

        $r0 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVE_SIZES>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (java.lang.String) $r2;

        if $r3 != null goto label1;

        return null;

     label1:
        return $r3;
    }

    public static java.lang.String getCurveName(java.security.spec.ECParameterSpec) throws java.io.IOException
    {
        java.security.spec.ECParameterSpec $r0;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;
        int $i0;
        java.lang.String $r4;

        $r0 := @parameter0: java.security.spec.ECParameterSpec;

        $i0 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: int getCurveSize(java.security.spec.ECParameterSpec)>($r0);

        $r4 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: java.lang.String getCurveName(int)>($i0);

        if $r4 != null goto label1;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid curve size ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        return $r4;
    }

    public static int getCurveSize(java.security.spec.ECParameterSpec)
    {
        java.security.spec.ECParameterSpec $r0;
        java.security.spec.EllipticCurve $r1;
        java.security.spec.ECField $r2;
        int $i0;

        $r0 := @parameter0: java.security.spec.ECParameterSpec;

        $r1 = virtualinvoke $r0.<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()>();

        $r2 = virtualinvoke $r1.<java.security.spec.EllipticCurve: java.security.spec.ECField getField()>();

        $i0 = interfaceinvoke $r2.<java.security.spec.ECField: int getFieldSize()>();

        return $i0;
    }

    public static int[] getCurveSizes()
    {
        int $i0, $i1, $i2, $i4;
        int[] $r0;
        java.lang.Integer $r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.lang.Integer[] $r4;
        java.lang.Object[] $r5;

        $r2 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVE_SIZES>;

        $i2 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $r0 = newarray (int)[$i2];

        $r2 = <com.trilead.ssh2.signature.ECDSASHA2Verify: java.util.Map CURVE_SIZES>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $i2 = lengthof $r0;

        $r4 = newarray (java.lang.Integer)[$i2];

        $r5 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r4 = (java.lang.Integer[]) $r5;

        $i2 = lengthof $r4;

        $i1 = 0;

        $i0 = 0;

     label1:
        if $i1 >= $i2 goto label2;

        $r1 = $r4[$i1];

        $i4 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        $r0[$i0] = $i4;

        $i1 = $i1 + 1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public static java.lang.String getDigestAlgorithmForParams(java.security.spec.ECParameterSpec)
    {
        java.security.spec.ECParameterSpec $r0;
        int $i0;

        $r0 := @parameter0: java.security.spec.ECParameterSpec;

        $i0 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: int getCurveSize(java.security.spec.ECParameterSpec)>($r0);

        if $i0 > 256 goto label1;

        return "SHA-256";

     label1:
        if $i0 > 384 goto label2;

        return "SHA-384";

     label2:
        return "SHA-512";
    }

    private static java.lang.String getSignatureAlgorithmForParams(java.security.spec.ECParameterSpec)
    {
        java.security.spec.ECParameterSpec $r0;
        int $i0;

        $r0 := @parameter0: java.security.spec.ECParameterSpec;

        $i0 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: int getCurveSize(java.security.spec.ECParameterSpec)>($r0);

        if $i0 > 256 goto label1;

        return "SHA256withECDSA";

     label1:
        if $i0 > 384 goto label2;

        return "SHA384withECDSA";

     label2:
        return "SHA512withECDSA";
    }

    private static byte[] removeLeadingZeroes(byte[])
    {
        byte[] $r0, $r1;
        int $i0, $i2;
        byte $b1;

        $r0 := @parameter0: byte[];

        $b1 = $r0[0];

        if $b1 == 0 goto label1;

        return $r0;

     label1:
        $i0 = 1;

     label2:
        $i2 = lengthof $r0;

        $i2 = $i2 + -1;

        if $i0 >= $i2 goto label3;

        $b1 = $r0[$i0];

        if $b1 != 0 goto label3;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $i2 = lengthof $r0;

        $i2 = $i2 - $i0;

        $r1 = newarray (byte)[$i2];

        $i2 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, $r1, 0, $i2);

        return $r1;
    }

    public static boolean verifySignature(byte[], byte[], java.security.interfaces.ECPublicKey) throws java.io.IOException
    {
        byte[] $r0, $r1;
        java.security.interfaces.ECPublicKey $r2;
        java.security.NoSuchAlgorithmException $r3;
        java.io.IOException $r4;
        java.security.spec.ECParameterSpec $r5;
        java.lang.String $r6;
        java.security.Signature $r7;
        boolean $z0;
        java.security.InvalidKeyException $r8;
        java.security.SignatureException $r9;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: java.security.interfaces.ECPublicKey;

        $r5 = interfaceinvoke $r2.<java.security.interfaces.ECPublicKey: java.security.spec.ECParameterSpec getParams()>();

        $r6 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: java.lang.String getSignatureAlgorithmForParams(java.security.spec.ECParameterSpec)>($r5);

     label1:
        $r7 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r6);

        virtualinvoke $r7.<java.security.Signature: void initVerify(java.security.PublicKey)>($r2);

        virtualinvoke $r7.<java.security.Signature: void update(byte[])>($r0);

        $z0 = virtualinvoke $r7.<java.security.Signature: boolean verify(byte[])>($r1);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("No such algorithm");

        virtualinvoke $r4.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        $r8 := @caughtexception;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("No such algorithm");

        virtualinvoke $r4.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r8);

        throw $r4;

     label5:
        $r9 := @caughtexception;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>()>();

        virtualinvoke $r4.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r9);

        throw $r4;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label4;
        catch java.security.SignatureException from label1 to label2 with label5;
    }

    private static final void writeLength(int, java.io.OutputStream) throws java.io.IOException
    {
        int $i0, $i1, $i2;
        java.io.OutputStream $r0;
        byte $b3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.io.OutputStream;

        if $i0 > 127 goto label1;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i0);

        return;

     label1:
        $i2 = 0;

        $i1 = $i0;

     label2:
        if $i1 == 0 goto label3;

        $i1 = $i1 >>> 8;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $i1 = $i2 | 128;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1);

        $i2 = $i2 + -1;

        $i1 = $i2 * 8;

     label4:
        if $i1 < 0 goto label5;

        $i2 = $i0 >> $i1;

        $b3 = (byte) $i2;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($b3);

        $i1 = $i1 + -8;

        goto label4;

     label5:
        return;
    }
}
