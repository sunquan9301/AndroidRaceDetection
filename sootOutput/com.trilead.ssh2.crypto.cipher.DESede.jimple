public class com.trilead.ssh2.crypto.cipher.DESede extends com.trilead.ssh2.crypto.cipher.DES
{
    private boolean encrypt;
    private int[] key1;
    private int[] key2;
    private int[] key3;

    public void <init>()
    {
        com.trilead.ssh2.crypto.cipher.DESede $r0;

        $r0 := @this: com.trilead.ssh2.crypto.cipher.DESede;

        specialinvoke $r0.<com.trilead.ssh2.crypto.cipher.DES: void <init>()>();

        $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] key1> = null;

        $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] key2> = null;

        $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] key3> = null;

        return;
    }

    public int getBlockSize()
    {
        com.trilead.ssh2.crypto.cipher.DESede $r0;

        $r0 := @this: com.trilead.ssh2.crypto.cipher.DESede;

        return 8;
    }

    public void init(boolean, byte[])
    {
        com.trilead.ssh2.crypto.cipher.DESede $r0;
        boolean $z0, $z1;
        byte[] $r1;
        int[] $r2;

        $r0 := @this: com.trilead.ssh2.crypto.cipher.DESede;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: byte[];

        $z1 = 0;

        $r2 = virtualinvoke $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] generateWorkingKey(boolean,byte[],int)>($z0, $r1, 0);

        $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] key1> = $r2;

        if $z0 != 0 goto label1;

        $z1 = 1;

     label1:
        $r2 = virtualinvoke $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] generateWorkingKey(boolean,byte[],int)>($z1, $r1, 8);

        $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] key2> = $r2;

        $r2 = virtualinvoke $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] generateWorkingKey(boolean,byte[],int)>($z0, $r1, 16);

        $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] key3> = $r2;

        $r0.<com.trilead.ssh2.crypto.cipher.DESede: boolean encrypt> = $z0;

        return;
    }

    public void transformBlock(byte[], int, byte[], int)
    {
        com.trilead.ssh2.crypto.cipher.DESede $r0;
        byte[] $r1, $r2;
        int $i0, $i1;
        int[] $r3;
        java.lang.IllegalStateException $r4;
        boolean $z0;

        $r0 := @this: com.trilead.ssh2.crypto.cipher.DESede;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $r3 = $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] key1>;

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("DESede engine not initialised!");

        throw $r4;

     label1:
        $z0 = $r0.<com.trilead.ssh2.crypto.cipher.DESede: boolean encrypt>;

        if $z0 == 0 goto label2;

        $r3 = $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] key1>;

        virtualinvoke $r0.<com.trilead.ssh2.crypto.cipher.DESede: void desFunc(int[],byte[],int,byte[],int)>($r3, $r1, $i0, $r2, $i1);

        $r3 = $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] key2>;

        virtualinvoke $r0.<com.trilead.ssh2.crypto.cipher.DESede: void desFunc(int[],byte[],int,byte[],int)>($r3, $r2, $i1, $r2, $i1);

        $r3 = $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] key3>;

        virtualinvoke $r0.<com.trilead.ssh2.crypto.cipher.DESede: void desFunc(int[],byte[],int,byte[],int)>($r3, $r2, $i1, $r2, $i1);

        return;

     label2:
        $r3 = $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] key3>;

        virtualinvoke $r0.<com.trilead.ssh2.crypto.cipher.DESede: void desFunc(int[],byte[],int,byte[],int)>($r3, $r1, $i0, $r2, $i1);

        $r3 = $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] key2>;

        virtualinvoke $r0.<com.trilead.ssh2.crypto.cipher.DESede: void desFunc(int[],byte[],int,byte[],int)>($r3, $r2, $i1, $r2, $i1);

        $r3 = $r0.<com.trilead.ssh2.crypto.cipher.DESede: int[] key1>;

        virtualinvoke $r0.<com.trilead.ssh2.crypto.cipher.DESede: void desFunc(int[],byte[],int,byte[],int)>($r3, $r2, $i1, $r2, $i1);

        return;
    }
}
