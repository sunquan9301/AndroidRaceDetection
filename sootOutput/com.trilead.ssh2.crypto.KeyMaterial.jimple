public class com.trilead.ssh2.crypto.KeyMaterial extends java.lang.Object
{
    public byte[] enc_key_client_to_server;
    public byte[] enc_key_server_to_client;
    public byte[] initial_iv_client_to_server;
    public byte[] initial_iv_server_to_client;
    public byte[] integrity_key_client_to_server;
    public byte[] integrity_key_server_to_client;

    public void <init>()
    {
        com.trilead.ssh2.crypto.KeyMaterial $r0;

        $r0 := @this: com.trilead.ssh2.crypto.KeyMaterial;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static byte[] calculateKey(com.trilead.ssh2.crypto.digest.HashForSSH2Types, java.math.BigInteger, byte[], byte, byte[], int)
    {
        com.trilead.ssh2.crypto.digest.HashForSSH2Types $r0;
        java.math.BigInteger $r1;
        byte[] $r2, $r3, $r4;
        byte $b0;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        byte[][] $r5;

        $r0 := @parameter0: com.trilead.ssh2.crypto.digest.HashForSSH2Types;

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: byte[];

        $b0 := @parameter3: byte;

        $r3 := @parameter4: byte[];

        $i1 := @parameter5: int;

        $r4 = newarray (byte)[$i1];

        $i4 = virtualinvoke $r0.<com.trilead.ssh2.crypto.digest.HashForSSH2Types: int getDigestLength()>();

        $i3 = $i1 + $i4;

        $i3 = $i3 + -1;

        $i3 = $i3 / $i4;

        $r5 = newarray (byte[])[$i3];

        virtualinvoke $r0.<com.trilead.ssh2.crypto.digest.HashForSSH2Types: void reset()>();

        virtualinvoke $r0.<com.trilead.ssh2.crypto.digest.HashForSSH2Types: void updateBigInt(java.math.BigInteger)>($r1);

        virtualinvoke $r0.<com.trilead.ssh2.crypto.digest.HashForSSH2Types: void updateBytes(byte[])>($r2);

        virtualinvoke $r0.<com.trilead.ssh2.crypto.digest.HashForSSH2Types: void updateByte(byte)>($b0);

        virtualinvoke $r0.<com.trilead.ssh2.crypto.digest.HashForSSH2Types: void updateBytes(byte[])>($r3);

        $r3 = virtualinvoke $r0.<com.trilead.ssh2.crypto.digest.HashForSSH2Types: byte[] getDigest()>();

        $r5[0] = $r3;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i1);

        $r3 = $r5[0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, 0, $i2);

        $i5 = $i1 - $i2;

        $i6 = 0 + $i2;

        $i1 = 1;

     label1:
        if $i1 >= $i3 goto label4;

        virtualinvoke $r0.<com.trilead.ssh2.crypto.digest.HashForSSH2Types: void updateBigInt(java.math.BigInteger)>($r1);

        virtualinvoke $r0.<com.trilead.ssh2.crypto.digest.HashForSSH2Types: void updateBytes(byte[])>($r2);

        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label3;

        $r3 = $r5[$i2];

        virtualinvoke $r0.<com.trilead.ssh2.crypto.digest.HashForSSH2Types: void updateBytes(byte[])>($r3);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r3 = virtualinvoke $r0.<com.trilead.ssh2.crypto.digest.HashForSSH2Types: byte[] getDigest()>();

        $r5[$i1] = $r3;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i5);

        $r3 = $r5[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r4, $i6, $i2);

        $i5 = $i5 - $i2;

        $i6 = $i6 + $i2;

        $i1 = $i1 + 1;

        goto label1;

     label4:
        return $r4;
    }

    public static com.trilead.ssh2.crypto.KeyMaterial create(java.lang.String, byte[], java.math.BigInteger, byte[], int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        java.lang.String $r0;
        byte[] $r1, $r3, $r6;
        java.math.BigInteger $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.trilead.ssh2.crypto.digest.HashForSSH2Types $r4;
        com.trilead.ssh2.crypto.KeyMaterial $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: java.math.BigInteger;

        $r3 := @parameter3: byte[];

        $i0 := @parameter4: int;

        $i1 := @parameter5: int;

        $i2 := @parameter6: int;

        $i3 := @parameter7: int;

        $i4 := @parameter8: int;

        $i5 := @parameter9: int;

        $r5 = new com.trilead.ssh2.crypto.KeyMaterial;

        specialinvoke $r5.<com.trilead.ssh2.crypto.KeyMaterial: void <init>()>();

        $r4 = new com.trilead.ssh2.crypto.digest.HashForSSH2Types;

        specialinvoke $r4.<com.trilead.ssh2.crypto.digest.HashForSSH2Types: void <init>(java.lang.String)>($r0);

        $r6 = staticinvoke <com.trilead.ssh2.crypto.KeyMaterial: byte[] calculateKey(com.trilead.ssh2.crypto.digest.HashForSSH2Types,java.math.BigInteger,byte[],byte,byte[],int)>($r4, $r2, $r1, 65, $r3, $i1);

        $r5.<com.trilead.ssh2.crypto.KeyMaterial: byte[] initial_iv_client_to_server> = $r6;

        $r6 = staticinvoke <com.trilead.ssh2.crypto.KeyMaterial: byte[] calculateKey(com.trilead.ssh2.crypto.digest.HashForSSH2Types,java.math.BigInteger,byte[],byte,byte[],int)>($r4, $r2, $r1, 66, $r3, $i4);

        $r5.<com.trilead.ssh2.crypto.KeyMaterial: byte[] initial_iv_server_to_client> = $r6;

        $r6 = staticinvoke <com.trilead.ssh2.crypto.KeyMaterial: byte[] calculateKey(com.trilead.ssh2.crypto.digest.HashForSSH2Types,java.math.BigInteger,byte[],byte,byte[],int)>($r4, $r2, $r1, 67, $r3, $i0);

        $r5.<com.trilead.ssh2.crypto.KeyMaterial: byte[] enc_key_client_to_server> = $r6;

        $r6 = staticinvoke <com.trilead.ssh2.crypto.KeyMaterial: byte[] calculateKey(com.trilead.ssh2.crypto.digest.HashForSSH2Types,java.math.BigInteger,byte[],byte,byte[],int)>($r4, $r2, $r1, 68, $r3, $i3);

        $r5.<com.trilead.ssh2.crypto.KeyMaterial: byte[] enc_key_server_to_client> = $r6;

        $r6 = staticinvoke <com.trilead.ssh2.crypto.KeyMaterial: byte[] calculateKey(com.trilead.ssh2.crypto.digest.HashForSSH2Types,java.math.BigInteger,byte[],byte,byte[],int)>($r4, $r2, $r1, 69, $r3, $i2);

        $r5.<com.trilead.ssh2.crypto.KeyMaterial: byte[] integrity_key_client_to_server> = $r6;

        $r6 = staticinvoke <com.trilead.ssh2.crypto.KeyMaterial: byte[] calculateKey(com.trilead.ssh2.crypto.digest.HashForSSH2Types,java.math.BigInteger,byte[],byte,byte[],int)>($r4, $r2, $r1, 70, $r3, $i5);

        $r5.<com.trilead.ssh2.crypto.KeyMaterial: byte[] integrity_key_server_to_client> = $r6;

        return $r5;
    }
}
