public class com.trilead.ssh2.signature.DSASHA1Verify extends java.lang.Object
{
    private static final com.trilead.ssh2.log.Logger log;

    static void <clinit>()
    {
        com.trilead.ssh2.log.Logger $r0;

        $r0 = staticinvoke <com.trilead.ssh2.log.Logger: com.trilead.ssh2.log.Logger getLogger(java.lang.Class)>(class "com/trilead/ssh2/signature/DSASHA1Verify");

        <com.trilead.ssh2.signature.DSASHA1Verify: com.trilead.ssh2.log.Logger log> = $r0;

        return;
    }

    public void <init>()
    {
        com.trilead.ssh2.signature.DSASHA1Verify $r0;

        $r0 := @this: com.trilead.ssh2.signature.DSASHA1Verify;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.security.interfaces.DSAPublicKey decodeSSHDSAPublicKey(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        java.security.NoSuchAlgorithmException $r1;
        java.io.IOException $r2;
        java.security.spec.DSAPublicKeySpec $r3;
        com.trilead.ssh2.packets.TypesReader $r4;
        java.lang.String $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        java.math.BigInteger $r7, $r8, $r9, $r10;
        int $i0;
        java.security.KeyFactory $r11;
        java.security.PublicKey $r12;
        java.security.interfaces.DSAPublicKey $r13;
        java.security.spec.InvalidKeySpecException $r14;

        $r0 := @parameter0: byte[];

        $r4 = new com.trilead.ssh2.packets.TypesReader;

        specialinvoke $r4.<com.trilead.ssh2.packets.TypesReader: void <init>(byte[])>($r0);

        $r5 = virtualinvoke $r4.<com.trilead.ssh2.packets.TypesReader: java.lang.String readString()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("ssh-dss");

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This is not a ssh-dss public key!");

        throw $r6;

     label1:
        $r7 = virtualinvoke $r4.<com.trilead.ssh2.packets.TypesReader: java.math.BigInteger readMPINT()>();

        $r8 = virtualinvoke $r4.<com.trilead.ssh2.packets.TypesReader: java.math.BigInteger readMPINT()>();

        $r9 = virtualinvoke $r4.<com.trilead.ssh2.packets.TypesReader: java.math.BigInteger readMPINT()>();

        $r10 = virtualinvoke $r4.<com.trilead.ssh2.packets.TypesReader: java.math.BigInteger readMPINT()>();

        $i0 = virtualinvoke $r4.<com.trilead.ssh2.packets.TypesReader: int remain()>();

        if $i0 == 0 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Padding in DSA public key!");

        throw $r2;

     label2:
        $r11 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("DSA");

        $r3 = new java.security.spec.DSAPublicKeySpec;

        specialinvoke $r3.<java.security.spec.DSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r10, $r7, $r8, $r9);

        $r12 = virtualinvoke $r11.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r3);

     label3:
        $r13 = (java.security.interfaces.DSAPublicKey) $r12;

        return $r13;

     label4:
        $r1 := @caughtexception;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>()>();

        virtualinvoke $r2.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r1);

        throw $r2;

     label5:
        $r14 := @caughtexception;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>()>();

        virtualinvoke $r2.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r14);

        throw $r2;

        catch java.security.NoSuchAlgorithmException from label2 to label3 with label4;
        catch java.security.spec.InvalidKeySpecException from label2 to label3 with label5;
    }

    public static byte[] decodeSSHDSASignature(byte[]) throws java.io.IOException
    {
        byte[] $r0, $r1;
        byte $b0, $b2, $b6;
        int $i1, $i3, $i4;
        com.trilead.ssh2.packets.TypesReader $r2;
        java.lang.String $r3;
        short $s5;
        java.io.IOException $r4;
        boolean $z0;

        $r0 := @parameter0: byte[];

        $i1 = lengthof $r0;

        if $i1 != 40 goto label05;

     label01:
        $b2 = $r0[0];

        if $b2 != 0 goto label02;

        $b2 = $r0[1];

        if $b2 != 0 goto label02;

        $b2 = $r0[2];

        if $b2 != 0 goto label02;

        $i1 = 0 + 1;

        $b2 = $r0[0];

        $i3 = $b2 << 24;

        $i3 = $i3 & -16777216;

        $i4 = $i1 + 1;

        $b2 = $r0[$i1];

        $i1 = $b2 << 16;

        $i1 = $i1 & 16711680;

        $i3 = $i3 | $i1;

        $i1 = $i4 + 1;

        $b2 = $r0[$i4];

        $i4 = $b2 << 8;

        $i4 = $i4 & 65280;

        $i4 = $i3 | $i4;

        $b2 = $r0[$i1];

        $s5 = $b2 & 255;

        $i1 = $i4 | $s5;

        $i4 = $i1 + 4;

        $i3 = $i4 + 1;

        $b2 = $r0[$i4];

        $i4 = $b2 << 24;

        $i4 = $i4 & -16777216;

        $i1 = $i3 + 1;

        $b2 = $r0[$i3];

        $i3 = $b2 << 16;

        $i3 = $i3 & 16711680;

        $i4 = $i4 | $i3;

        $i3 = $i1 + 1;

        $b2 = $r0[$i1];

        $i1 = $b2 << 8;

        $i1 = $i1 & 65280;

        $i4 = $i4 | $i1;

        $i1 = $i3 + 1;

        $b2 = $r0[$i3];

        $s5 = $b2 & 255;

        $i4 = $i4 | $s5;

        $r1 = newarray (byte)[$i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, 0, $i4);

        $r0 = $r1;

     label02:
        $b2 = $r0[0];

        $s5 = $b2 & 128;

        if $s5 == 0 goto label08;

        $b0 = 1;

     label03:
        $b2 = $r0[20];

        $s5 = $b2 & 128;

        if $s5 == 0 goto label09;

        $b2 = 1;

     label04:
        $i4 = lengthof $r0;

        $i4 = $i4 + 6;

        $i4 = $i4 + $b0;

        $i1 = $i4 + $b2;

        $r1 = newarray (byte)[$i1];

        $r1[0] = 48;

        $i4 = lengthof $r0;

        if $i4 == 40 goto label10;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Peer sent corrupt signature");

        throw $r4;

     label05:
        $r2 = new com.trilead.ssh2.packets.TypesReader;

        specialinvoke $r2.<com.trilead.ssh2.packets.TypesReader: void <init>(byte[])>($r0);

        $r3 = virtualinvoke $r2.<com.trilead.ssh2.packets.TypesReader: java.lang.String readString()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("ssh-dss");

        if $z0 != 0 goto label06;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Peer sent wrong signature format");

        throw $r4;

     label06:
        $r1 = virtualinvoke $r2.<com.trilead.ssh2.packets.TypesReader: byte[] readByteString()>();

        $r0 = $r1;

        $i4 = lengthof $r1;

        if $i4 == 40 goto label07;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Peer sent corrupt signature");

        throw $r4;

     label07:
        $i4 = virtualinvoke $r2.<com.trilead.ssh2.packets.TypesReader: int remain()>();

        if $i4 == 0 goto label01;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Padding in DSA signature!");

        throw $r4;

     label08:
        $b0 = 0;

        goto label03;

     label09:
        $b2 = 0;

        goto label04;

     label10:
        $r1[1] = 44;

        $b6 = $r1[1];

        $i4 = $b6 + $b0;

        $b6 = (byte) $i4;

        $r1[1] = $b6;

        $b6 = $r1[1];

        $i4 = $b6 + $b2;

        $b6 = (byte) $i4;

        $r1[1] = $b6;

        $r1[2] = 2;

        $r1[3] = 20;

        $b6 = $r1[3];

        $i4 = $b6 + $b0;

        $b6 = (byte) $i4;

        $r1[3] = $b6;

        $i4 = $b0 + 4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r1, $i4, 20);

        $b6 = $r1[3];

        $i4 = $b6 + 4;

        $r1[$i4] = 2;

        $b6 = $r1[3];

        $i4 = $b6 + 5;

        $r1[$i4] = 20;

        $b6 = $r1[3];

        $i4 = $b6 + 5;

        $b6 = $r1[$i4];

        $i3 = $b6 + $b2;

        $b6 = (byte) $i3;

        $r1[$i4] = $b6;

        $b6 = $r1[3];

        $i4 = $b6 + 6;

        $i4 = $i4 + $b2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 20, $r1, $i4, 20);

        return $r1;
    }

    public static byte[] encodeSSHDSAPublicKey(java.security.interfaces.DSAPublicKey) throws java.io.IOException
    {
        java.security.interfaces.DSAPublicKey $r0;
        com.trilead.ssh2.packets.TypesWriter $r1;
        java.security.interfaces.DSAParams $r2;
        java.math.BigInteger $r3;
        byte[] $r4;

        $r0 := @parameter0: java.security.interfaces.DSAPublicKey;

        $r1 = new com.trilead.ssh2.packets.TypesWriter;

        specialinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void <init>()>();

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>("ssh-dss");

        $r2 = interfaceinvoke $r0.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        $r3 = interfaceinvoke $r2.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeMPInt(java.math.BigInteger)>($r3);

        $r3 = interfaceinvoke $r2.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeMPInt(java.math.BigInteger)>($r3);

        $r3 = interfaceinvoke $r2.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeMPInt(java.math.BigInteger)>($r3);

        $r3 = interfaceinvoke $r0.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeMPInt(java.math.BigInteger)>($r3);

        $r4 = virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: byte[] getBytes()>();

        return $r4;
    }

    public static byte[] encodeSSHDSASignature(byte[])
    {
        byte[] $r0, $r1, $r2;
        int $i0, $i2, $i4, $i5;
        short $s1;
        com.trilead.ssh2.packets.TypesWriter $r3;
        byte $b3;

        $r0 := @parameter0: byte[];

        $r3 = new com.trilead.ssh2.packets.TypesWriter;

        specialinvoke $r3.<com.trilead.ssh2.packets.TypesWriter: void <init>()>();

        virtualinvoke $r3.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>("ssh-dss");

        $i0 = 3 + 1;

        $b3 = $r0[3];

        $s1 = $b3 & 255;

        $r1 = newarray (byte)[$s1];

        $i2 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, $r1, 0, $i2);

        $i2 = $s1 + 4;

        $i2 = $i2 + 1;

        $i0 = $i2 + 1;

        $b3 = $r0[$i2];

        $s1 = $b3 & 255;

        $r2 = newarray (byte)[$s1];

        $i2 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, $r2, 0, $i2);

        $r0 = newarray (byte)[40];

        $i2 = lengthof $r1;

        if $i2 >= 20 goto label3;

        $i0 = lengthof $r1;

     label1:
        $i2 = lengthof $r2;

        if $i2 >= 20 goto label4;

        $i2 = lengthof $r2;

     label2:
        $i4 = lengthof $r1;

        $i4 = $i4 - $i0;

        $i5 = 20 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i4, $r0, $i5, $i0);

        $i5 = lengthof $r2;

        $i5 = $i5 - $i2;

        $i4 = 40 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i5, $r0, $i4, $i2);

        virtualinvoke $r3.<com.trilead.ssh2.packets.TypesWriter: void writeString(byte[],int,int)>($r0, 0, 40);

        $r2 = virtualinvoke $r3.<com.trilead.ssh2.packets.TypesWriter: byte[] getBytes()>();

        return $r2;

     label3:
        $i0 = 20;

        goto label1;

     label4:
        $i2 = 20;

        goto label2;
    }

    public static byte[] generateSignature(byte[], java.security.interfaces.DSAPrivateKey, java.security.SecureRandom) throws java.io.IOException
    {
        byte[] $r0;
        java.security.interfaces.DSAPrivateKey $r1;
        java.security.SecureRandom $r2;
        java.security.NoSuchAlgorithmException $r3;
        java.io.IOException $r4;
        java.security.Signature $r5;
        java.security.InvalidKeyException $r6;
        java.security.SignatureException $r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.security.interfaces.DSAPrivateKey;

        $r2 := @parameter2: java.security.SecureRandom;

     label1:
        $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA1withDSA");

        virtualinvoke $r5.<java.security.Signature: void initSign(java.security.PrivateKey)>($r1);

        virtualinvoke $r5.<java.security.Signature: void update(byte[])>($r0);

        $r0 = virtualinvoke $r5.<java.security.Signature: byte[] sign()>();

     label2:
        return $r0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>()>();

        virtualinvoke $r4.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        $r6 := @caughtexception;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>()>();

        virtualinvoke $r4.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r4;

     label5:
        $r7 := @caughtexception;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>()>();

        virtualinvoke $r4.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r7);

        throw $r4;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label4;
        catch java.security.SignatureException from label1 to label2 with label5;
    }

    public static boolean verifySignature(byte[], byte[], java.security.interfaces.DSAPublicKey) throws java.io.IOException
    {
        byte[] $r0, $r1;
        java.security.interfaces.DSAPublicKey $r2;
        java.security.NoSuchAlgorithmException $r3;
        java.io.IOException $r4;
        java.security.Signature $r5;
        boolean $z0;
        java.security.InvalidKeyException $r6;
        java.security.SignatureException $r7;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: java.security.interfaces.DSAPublicKey;

     label1:
        $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA1withDSA");

        virtualinvoke $r5.<java.security.Signature: void initVerify(java.security.PublicKey)>($r2);

        virtualinvoke $r5.<java.security.Signature: void update(byte[])>($r0);

        $z0 = virtualinvoke $r5.<java.security.Signature: boolean verify(byte[])>($r1);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("No such algorithm");

        virtualinvoke $r4.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        $r6 := @caughtexception;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("No such algorithm");

        virtualinvoke $r4.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

        throw $r4;

     label5:
        $r7 := @caughtexception;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>()>();

        virtualinvoke $r4.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r7);

        throw $r4;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label4;
        catch java.security.SignatureException from label1 to label2 with label5;
    }
}
