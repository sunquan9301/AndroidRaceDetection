public class org.connectbot.transport.TransportFactory extends java.lang.Object
{
    private static java.lang.String[] transportNames;

    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.String[] $r1;

        $r1 = newarray (java.lang.String)[3];

        $r0 = staticinvoke <org.connectbot.transport.SSH: java.lang.String getProtocolName()>();

        $r1[0] = $r0;

        $r0 = staticinvoke <org.connectbot.transport.Telnet: java.lang.String getProtocolName()>();

        $r1[1] = $r0;

        $r0 = staticinvoke <org.connectbot.transport.Local: java.lang.String getProtocolName()>();

        $r1[2] = $r0;

        <org.connectbot.transport.TransportFactory: java.lang.String[] transportNames> = $r1;

        return;
    }

    public void <init>()
    {
        org.connectbot.transport.TransportFactory $r0;

        $r0 := @this: org.connectbot.transport.TransportFactory;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean canForwardPorts(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.connectbot.transport.SSH: java.lang.String getProtocolName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static org.connectbot.bean.HostBean findHost(org.connectbot.util.HostDatabase, android.net.Uri)
    {
        org.connectbot.util.HostDatabase $r0;
        android.net.Uri $r1;
        java.util.HashMap $r2;
        java.lang.String $r3;
        org.connectbot.transport.AbsTransport $r4;
        int $i0;
        java.lang.Object[] $r5;
        java.lang.IllegalStateException $r6;
        org.connectbot.bean.HostBean $r7;

        $r0 := @parameter0: org.connectbot.util.HostDatabase;

        $r1 := @parameter1: android.net.Uri;

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getScheme()>();

        $r4 = staticinvoke <org.connectbot.transport.TransportFactory: org.connectbot.transport.AbsTransport getTransport(java.lang.String)>($r3);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        virtualinvoke $r4.<org.connectbot.transport.AbsTransport: void getSelectionArgs(android.net.Uri,java.util.Map)>($r1, $r2);

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        if $i0 != 0 goto label1;

        $r5 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getScheme()>();

        $r5[0] = $r3;

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String toString()>();

        $r5[1] = $r3;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Transport %s failed to do something useful with URI=%s", $r5);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CB.TransportFactory", $r3);

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Failed to get needed selection arguments");

        throw $r6;

     label1:
        $r7 = virtualinvoke $r0.<org.connectbot.util.HostDatabase: org.connectbot.bean.HostBean findHost(java.util.Map)>($r2);

        return $r7;
    }

    public static java.lang.String getFormatHint(java.lang.String, android.content.Context)
    {
        java.lang.String $r0, $r2;
        android.content.Context $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.content.Context;

        $r2 = staticinvoke <org.connectbot.transport.SSH: java.lang.String getProtocolName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.connectbot.transport.SSH: java.lang.String getFormatHint(android.content.Context)>($r1);

        return $r2;

     label1:
        $r2 = staticinvoke <org.connectbot.transport.Telnet: java.lang.String getProtocolName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <org.connectbot.transport.Telnet: java.lang.String getFormatHint(android.content.Context)>($r1);

        return $r2;

     label2:
        $r2 = staticinvoke <org.connectbot.transport.Local: java.lang.String getProtocolName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label3;

        $r2 = staticinvoke <org.connectbot.transport.Local: java.lang.String getFormatHint(android.content.Context)>($r1);

        return $r2;

     label3:
        $r2 = staticinvoke <org.connectbot.transport.AbsTransport: java.lang.String getFormatHint(android.content.Context)>($r1);

        return $r2;
    }

    public static org.connectbot.transport.AbsTransport getTransport(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;
        org.connectbot.transport.SSH r3;
        org.connectbot.transport.Telnet r4;
        org.connectbot.transport.Local r5;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.connectbot.transport.SSH: java.lang.String getProtocolName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        r3 = new org.connectbot.transport.SSH;

        specialinvoke r3.<org.connectbot.transport.SSH: void <init>()>();

        return r3;

     label1:
        $r1 = staticinvoke <org.connectbot.transport.Telnet: java.lang.String getProtocolName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label2;

        r4 = new org.connectbot.transport.Telnet;

        specialinvoke r4.<org.connectbot.transport.Telnet: void <init>()>();

        return r4;

     label2:
        $r1 = staticinvoke <org.connectbot.transport.Local: java.lang.String getProtocolName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label3;

        r5 = new org.connectbot.transport.Local;

        specialinvoke r5.<org.connectbot.transport.Local: void <init>()>();

        return r5;

     label3:
        return null;
    }

    public static java.lang.String[] getTransportNames()
    {
        java.lang.String[] $r0;

        $r0 = <org.connectbot.transport.TransportFactory: java.lang.String[] transportNames>;

        return $r0;
    }

    public static android.net.Uri getUri(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        java.lang.Object[] $r3;
        boolean $z0;
        android.net.Uri $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = $r0;

        $r3[1] = $r1;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Attempting to discover URI for scheme=%s on input=%s", $r3);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TransportFactory", $r2);

        $r2 = staticinvoke <org.connectbot.transport.SSH: java.lang.String getProtocolName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.connectbot.transport.SSH: android.net.Uri getUri(java.lang.String)>($r1);

        return $r4;

     label1:
        $r2 = staticinvoke <org.connectbot.transport.Telnet: java.lang.String getProtocolName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label2;

        $r4 = staticinvoke <org.connectbot.transport.Telnet: android.net.Uri getUri(java.lang.String)>($r1);

        return $r4;

     label2:
        $r2 = staticinvoke <org.connectbot.transport.Local: java.lang.String getProtocolName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label3;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TransportFactory", "Got to the local parsing area");

        $r4 = staticinvoke <org.connectbot.transport.Local: android.net.Uri getUri(java.lang.String)>($r1);

        return $r4;

     label3:
        return null;
    }
}
