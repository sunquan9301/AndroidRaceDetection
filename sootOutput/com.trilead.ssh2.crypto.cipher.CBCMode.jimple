public class com.trilead.ssh2.crypto.cipher.CBCMode extends java.lang.Object implements com.trilead.ssh2.crypto.cipher.BlockCipher
{
    int blockSize;
    byte[] cbc_vector;
    boolean doEncrypt;
    com.trilead.ssh2.crypto.cipher.BlockCipher tc;
    byte[] tmp_vector;

    public void <init>(com.trilead.ssh2.crypto.cipher.BlockCipher, byte[], boolean) throws java.lang.IllegalArgumentException
    {
        com.trilead.ssh2.crypto.cipher.CBCMode $r0;
        com.trilead.ssh2.crypto.cipher.BlockCipher $r1;
        byte[] $r2, $r6;
        boolean $z0;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @this: com.trilead.ssh2.crypto.cipher.CBCMode;

        $r1 := @parameter0: com.trilead.ssh2.crypto.cipher.BlockCipher;

        $r2 := @parameter1: byte[];

        $z0 := @parameter2: boolean;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: com.trilead.ssh2.crypto.cipher.BlockCipher tc> = $r1;

        $i0 = interfaceinvoke $r1.<com.trilead.ssh2.crypto.cipher.BlockCipher: int getBlockSize()>();

        $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: int blockSize> = $i0;

        $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: boolean doEncrypt> = $z0;

        $i1 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: int blockSize>;

        $i0 = lengthof $r2;

        if $i1 == $i0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IV must be ");

        $i1 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: int blockSize>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes long! (currently ");

        $i1 = lengthof $r2;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $i1 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: int blockSize>;

        $r6 = newarray (byte)[$i1];

        $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: byte[] cbc_vector> = $r6;

        $i1 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: int blockSize>;

        $r6 = newarray (byte)[$i1];

        $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: byte[] tmp_vector> = $r6;

        $r6 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: byte[] cbc_vector>;

        $i1 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: int blockSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r6, 0, $i1);

        return;
    }

    private void decryptBlock(byte[], int, byte[], int)
    {
        com.trilead.ssh2.crypto.cipher.CBCMode $r0;
        byte[] $r1, $r2, $r3;
        int $i0, $i1, $i2;
        com.trilead.ssh2.crypto.cipher.BlockCipher $r4;
        byte $b3, $b4;

        $r0 := @this: com.trilead.ssh2.crypto.cipher.CBCMode;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $r3 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: byte[] tmp_vector>;

        $i2 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: int blockSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r3, 0, $i2);

        $r4 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: com.trilead.ssh2.crypto.cipher.BlockCipher tc>;

        interfaceinvoke $r4.<com.trilead.ssh2.crypto.cipher.BlockCipher: void transformBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        $i0 = 0;

     label1:
        $i2 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: int blockSize>;

        if $i0 >= $i2 goto label2;

        $i2 = $i1 + $i0;

        $b3 = $r2[$i2];

        $r3 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: byte[] cbc_vector>;

        $b4 = $r3[$i0];

        $b4 = $b3 ^ $b4;

        $b4 = (byte) $b4;

        $r2[$i2] = $b4;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r2 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: byte[] cbc_vector>;

        $r3 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: byte[] tmp_vector>;

        $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: byte[] cbc_vector> = $r3;

        $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: byte[] tmp_vector> = $r2;

        return;
    }

    private void encryptBlock(byte[], int, byte[], int)
    {
        com.trilead.ssh2.crypto.cipher.CBCMode $r0;
        byte[] $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;
        byte $b4, $b5;
        com.trilead.ssh2.crypto.cipher.BlockCipher $r4;

        $r0 := @this: com.trilead.ssh2.crypto.cipher.CBCMode;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 = 0;

     label1:
        $i3 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: int blockSize>;

        if $i2 >= $i3 goto label2;

        $r3 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: byte[] cbc_vector>;

        $b4 = $r3[$i2];

        $i3 = $i0 + $i2;

        $b5 = $r1[$i3];

        $b5 = $b4 ^ $b5;

        $b5 = (byte) $b5;

        $r3[$i2] = $b5;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r4 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: com.trilead.ssh2.crypto.cipher.BlockCipher tc>;

        $r3 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: byte[] cbc_vector>;

        interfaceinvoke $r4.<com.trilead.ssh2.crypto.cipher.BlockCipher: void transformBlock(byte[],int,byte[],int)>($r3, 0, $r2, $i1);

        $r3 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: byte[] cbc_vector>;

        $i3 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: int blockSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r3, 0, $i3);

        return;
    }

    public int getBlockSize()
    {
        com.trilead.ssh2.crypto.cipher.CBCMode $r0;
        int $i0;

        $r0 := @this: com.trilead.ssh2.crypto.cipher.CBCMode;

        $i0 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: int blockSize>;

        return $i0;
    }

    public void init(boolean, byte[])
    {
        com.trilead.ssh2.crypto.cipher.CBCMode $r0;
        boolean $z0;
        byte[] $r1;

        $r0 := @this: com.trilead.ssh2.crypto.cipher.CBCMode;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: byte[];

        return;
    }

    public void transformBlock(byte[], int, byte[], int)
    {
        com.trilead.ssh2.crypto.cipher.CBCMode $r0;
        byte[] $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: com.trilead.ssh2.crypto.cipher.CBCMode;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $z0 = $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: boolean doEncrypt>;

        if $z0 == 0 goto label1;

        specialinvoke $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: void encryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return;

     label1:
        specialinvoke $r0.<com.trilead.ssh2.crypto.cipher.CBCMode: void decryptBlock(byte[],int,byte[],int)>($r1, $i0, $r2, $i1);

        return;
    }
}
