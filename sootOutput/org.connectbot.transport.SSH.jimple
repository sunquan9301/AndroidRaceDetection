public class org.connectbot.transport.SSH extends org.connectbot.transport.AbsTransport implements com.trilead.ssh2.AuthAgentCallback, com.trilead.ssh2.ConnectionMonitor, com.trilead.ssh2.InteractiveCallback
{
    static final java.util.regex.Pattern hostmask;
    private java.lang.String agentLockPassphrase;
    private volatile boolean authenticated;
    private int columns;
    private boolean compression;
    private volatile boolean connected;
    private com.trilead.ssh2.Connection connection;
    private com.trilead.ssh2.ConnectionInfo connectionInfo;
    private int height;
    private boolean interactiveCanContinue;
    private java.util.List portForwards;
    private boolean pubkeysExhausted;
    private int rows;
    private com.trilead.ssh2.Session session;
    private volatile boolean sessionOpen;
    private java.io.InputStream stderr;
    private java.io.OutputStream stdin;
    private java.io.InputStream stdout;
    private java.lang.String useAuthAgent;
    private int width;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("^(.+)@([0-9a-z.-]+)(:(\\d+))?$", 2);

        <org.connectbot.transport.SSH: java.util.regex.Pattern hostmask> = $r0;

        return;
    }

    public void <init>()
    {
        org.connectbot.transport.SSH $r0;
        java.util.LinkedList $r1;

        $r0 := @this: org.connectbot.transport.SSH;

        specialinvoke $r0.<org.connectbot.transport.AbsTransport: void <init>()>();

        $r0.<org.connectbot.transport.SSH: boolean compression> = 0;

        $r0.<org.connectbot.transport.SSH: boolean authenticated> = 0;

        $r0.<org.connectbot.transport.SSH: boolean connected> = 0;

        $r0.<org.connectbot.transport.SSH: boolean sessionOpen> = 0;

        $r0.<org.connectbot.transport.SSH: boolean pubkeysExhausted> = 0;

        $r0.<org.connectbot.transport.SSH: boolean interactiveCanContinue> = 1;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        $r0.<org.connectbot.transport.SSH: java.util.List portForwards> = $r1;

        $r0.<org.connectbot.transport.SSH: java.lang.String useAuthAgent> = "no";

        return;
    }

    private void authenticate()
    {
        org.connectbot.transport.SSH $r0;
        java.lang.Exception $r1, $r19;
        com.trilead.ssh2.Connection $r2;
        org.connectbot.bean.HostBean $r3;
        java.lang.String $r4, $r15;
        boolean $z0;
        org.connectbot.service.TerminalBridge $r5;
        org.connectbot.service.TerminalManager $r6;
        android.content.res.Resources $r7;
        long $l0;
        byte $b1;
        java.util.Map $r8;
        java.util.Set $r9;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        java.util.Map$Entry $r12;
        org.connectbot.service.TerminalManager$KeyHolder $r13;
        org.connectbot.bean.PubkeyBean $r14;
        java.security.KeyPair $r16;
        java.lang.IllegalStateException $r17;
        org.connectbot.util.PubkeyDatabase $r18;
        org.connectbot.service.PromptHelper $r20;

        $r0 := @this: org.connectbot.transport.SSH;

     label01:
        $r2 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

        $r3 = $r0.<org.connectbot.transport.SSH: org.connectbot.bean.HostBean host>;

        $r4 = virtualinvoke $r3.<org.connectbot.bean.HostBean: java.lang.String getUsername()>();

        $z0 = virtualinvoke $r2.<com.trilead.ssh2.Connection: boolean authenticateWithNone(java.lang.String)>($r4);

        if $z0 == 0 goto label04;

        specialinvoke $r0.<org.connectbot.transport.SSH: void finishConnection()>();

     label02:
        return;

     label03:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CB.SSH", "Host does not support \'none\' authentication.");

     label04:
        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r6 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r7 = $r6.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r4 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>(2131165368);

        virtualinvoke $r5.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r4);

     label05:
        $r3 = $r0.<org.connectbot.transport.SSH: org.connectbot.bean.HostBean host>;

     label06:
        $l0 = virtualinvoke $r3.<org.connectbot.bean.HostBean: long getPubkeyId()>();

     label07:
        $z0 = $r0.<org.connectbot.transport.SSH: boolean pubkeysExhausted>;

        if $z0 != 0 goto label36;

     label08:
        $b1 = $l0 cmp -2L;

     label09:
        if $b1 == 0 goto label36;

        $r2 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

     label10:
        $r3 = $r0.<org.connectbot.transport.SSH: org.connectbot.bean.HostBean host>;

        $r4 = virtualinvoke $r3.<org.connectbot.bean.HostBean: java.lang.String getUsername()>();

        $z0 = virtualinvoke $r2.<com.trilead.ssh2.Connection: boolean isAuthMethodAvailable(java.lang.String,java.lang.String)>($r4, "publickey");

     label11:
        if $z0 == 0 goto label36;

     label12:
        $b1 = $l0 cmp -1L;

     label13:
        if $b1 != 0 goto label26;

        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r6 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

     label14:
        $r7 = $r6.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r4 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>(2131165374);

        virtualinvoke $r5.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r4);

     label15:
        $r6 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

     label16:
        $r8 = $r6.<org.connectbot.service.TerminalManager: java.util.Map loadedKeypairs>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label17:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label23;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.util.Map$Entry) $r11;

        $r11 = interfaceinvoke $r12.<java.util.Map$Entry: java.lang.Object getValue()>();

     label18:
        $r13 = (org.connectbot.service.TerminalManager$KeyHolder) $r11;

     label19:
        $r14 = $r13.<org.connectbot.service.TerminalManager$KeyHolder: org.connectbot.bean.PubkeyBean bean>;

        $z0 = virtualinvoke $r14.<org.connectbot.bean.PubkeyBean: boolean isConfirmUse()>();

        if $z0 == 0 goto label20;

        $r11 = interfaceinvoke $r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = (java.lang.String) $r11;

        $z0 = specialinvoke $r0.<org.connectbot.transport.SSH: boolean promptForPubkeyUse(java.lang.String)>($r4);

        if $z0 == 0 goto label17;

     label20:
        $r3 = $r0.<org.connectbot.transport.SSH: org.connectbot.bean.HostBean host>;

        $r4 = virtualinvoke $r3.<org.connectbot.bean.HostBean: java.lang.String getUsername()>();

        $r11 = interfaceinvoke $r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = (java.lang.String) $r11;

        $r11 = interfaceinvoke $r12.<java.util.Map$Entry: java.lang.Object getValue()>();

     label21:
        $r13 = (org.connectbot.service.TerminalManager$KeyHolder) $r11;

     label22:
        $r16 = $r13.<org.connectbot.service.TerminalManager$KeyHolder: java.security.KeyPair pair>;

        $z0 = specialinvoke $r0.<org.connectbot.transport.SSH: boolean tryPublicKey(java.lang.String,java.lang.String,java.security.KeyPair)>($r4, $r15, $r16);

        if $z0 == 0 goto label17;

        specialinvoke $r0.<org.connectbot.transport.SSH: void finishConnection()>();

     label23:
        $r0.<org.connectbot.transport.SSH: boolean pubkeysExhausted> = 1;

     label24:
        return;

     label25:
        $r17 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", "Connection went away while we were trying to authenticate", $r17);

        return;

     label26:
        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r6 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r7 = $r6.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

     label27:
        $r15 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>(2131165377);

        virtualinvoke $r5.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r15);

     label28:
        $r6 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

     label29:
        $r18 = $r6.<org.connectbot.service.TerminalManager: org.connectbot.util.PubkeyDatabase pubkeydb>;

        $r14 = virtualinvoke $r18.<org.connectbot.util.PubkeyDatabase: org.connectbot.bean.PubkeyBean findPubkeyById(long)>($l0);

        if $r14 != null goto label34;

     label30:
        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r6 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

     label31:
        $r7 = $r6.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r15 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>(2131165376);

        virtualinvoke $r5.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r15);

     label32:
        goto label23;

     label33:
        $r19 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", "Problem during handleAuthentication()", $r19);

        return;

     label34:
        $z0 = specialinvoke $r0.<org.connectbot.transport.SSH: boolean tryPublicKey(org.connectbot.bean.PubkeyBean)>($r14);

        if $z0 == 0 goto label23;

        specialinvoke $r0.<org.connectbot.transport.SSH: void finishConnection()>();

     label35:
        goto label23;

     label36:
        $z0 = $r0.<org.connectbot.transport.SSH: boolean interactiveCanContinue>;

        if $z0 == 0 goto label46;

        $r2 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

     label37:
        $r3 = $r0.<org.connectbot.transport.SSH: org.connectbot.bean.HostBean host>;

        $r15 = virtualinvoke $r3.<org.connectbot.bean.HostBean: java.lang.String getUsername()>();

        $z0 = virtualinvoke $r2.<com.trilead.ssh2.Connection: boolean isAuthMethodAvailable(java.lang.String,java.lang.String)>($r15, "keyboard-interactive");

     label38:
        if $z0 == 0 goto label46;

        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r6 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

     label39:
        $r7 = $r6.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r15 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>(2131165370);

        virtualinvoke $r5.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r15);

     label40:
        $r0.<org.connectbot.transport.SSH: boolean interactiveCanContinue> = 0;

        $r2 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

     label41:
        $r3 = $r0.<org.connectbot.transport.SSH: org.connectbot.bean.HostBean host>;

        $r15 = virtualinvoke $r3.<org.connectbot.bean.HostBean: java.lang.String getUsername()>();

        $z0 = virtualinvoke $r2.<com.trilead.ssh2.Connection: boolean authenticateWithKeyboardInteractive(java.lang.String,com.trilead.ssh2.InteractiveCallback)>($r15, $r0);

        if $z0 == 0 goto label43;

        specialinvoke $r0.<org.connectbot.transport.SSH: void finishConnection()>();

     label42:
        return;

     label43:
        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r6 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

     label44:
        $r7 = $r6.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r15 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>(2131165371);

        virtualinvoke $r5.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r15);

     label45:
        return;

     label46:
        $r2 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

     label47:
        $r3 = $r0.<org.connectbot.transport.SSH: org.connectbot.bean.HostBean host>;

        $r15 = virtualinvoke $r3.<org.connectbot.bean.HostBean: java.lang.String getUsername()>();

        $z0 = virtualinvoke $r2.<com.trilead.ssh2.Connection: boolean isAuthMethodAvailable(java.lang.String,java.lang.String)>($r15, "password");

     label48:
        if $z0 == 0 goto label58;

        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r6 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

     label49:
        $r7 = $r6.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r15 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>(2131165372);

        virtualinvoke $r5.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r15);

        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r20 = virtualinvoke $r5.<org.connectbot.service.TerminalBridge: org.connectbot.service.PromptHelper getPromptHelper()>();

     label50:
        $r6 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

     label51:
        $r7 = $r6.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r15 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>(2131165197);

        $r15 = virtualinvoke $r20.<org.connectbot.service.PromptHelper: java.lang.String requestStringPrompt(java.lang.String,java.lang.String)>(null, $r15);

     label52:
        if $r15 == null goto label55;

        $r2 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

     label53:
        $r3 = $r0.<org.connectbot.transport.SSH: org.connectbot.bean.HostBean host>;

        $r4 = virtualinvoke $r3.<org.connectbot.bean.HostBean: java.lang.String getUsername()>();

        $z0 = virtualinvoke $r2.<com.trilead.ssh2.Connection: boolean authenticateWithPassword(java.lang.String,java.lang.String)>($r4, $r15);

        if $z0 == 0 goto label55;

        specialinvoke $r0.<org.connectbot.transport.SSH: void finishConnection()>();

     label54:
        return;

     label55:
        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r6 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

     label56:
        $r7 = $r6.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r15 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>(2131165373);

        virtualinvoke $r5.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r15);

     label57:
        return;

     label58:
        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r6 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

     label59:
        $r7 = $r6.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r15 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int)>(2131165369);

        virtualinvoke $r5.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r15);

     label60:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.IllegalStateException from label06 to label07 with label25;
        catch java.lang.IllegalStateException from label10 to label11 with label25;
        catch java.lang.IllegalStateException from label14 to label15 with label25;
        catch java.lang.IllegalStateException from label16 to label18 with label25;
        catch java.lang.IllegalStateException from label19 to label21 with label25;
        catch java.lang.IllegalStateException from label22 to label23 with label25;
        catch java.lang.Exception from label05 to label08 with label33;
        catch java.lang.Exception from label09 to label12 with label33;
        catch java.lang.Exception from label13 to label24 with label33;
        catch java.lang.IllegalStateException from label27 to label28 with label25;
        catch java.lang.IllegalStateException from label29 to label30 with label25;
        catch java.lang.IllegalStateException from label31 to label32 with label25;
        catch java.lang.Exception from label26 to label32 with label33;
        catch java.lang.IllegalStateException from label34 to label35 with label25;
        catch java.lang.IllegalStateException from label37 to label38 with label25;
        catch java.lang.IllegalStateException from label39 to label40 with label25;
        catch java.lang.IllegalStateException from label41 to label42 with label25;
        catch java.lang.IllegalStateException from label44 to label45 with label25;
        catch java.lang.IllegalStateException from label47 to label48 with label25;
        catch java.lang.IllegalStateException from label49 to label50 with label25;
        catch java.lang.IllegalStateException from label51 to label52 with label25;
        catch java.lang.IllegalStateException from label53 to label54 with label25;
        catch java.lang.IllegalStateException from label56 to label57 with label25;
        catch java.lang.IllegalStateException from label59 to label60 with label25;
        catch java.lang.Exception from label34 to label42 with label33;
        catch java.lang.Exception from label43 to label45 with label33;
        catch java.lang.Exception from label46 to label54 with label33;
        catch java.lang.Exception from label55 to label57 with label33;
        catch java.lang.Exception from label58 to label60 with label33;
    }

    private void finishConnection()
    {
        org.connectbot.transport.SSH $r0;
        org.connectbot.service.TerminalManager $r1;
        java.lang.Exception $r2;
        java.io.IOException $r3;
        java.util.Iterator $r4;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.connectbot.bean.PortForwardBean $r7;
        org.connectbot.service.TerminalBridge $r8;
        android.content.res.Resources $r9;
        java.lang.Object[] $r10;
        java.lang.CharSequence $r11;
        java.lang.String $r12;
        org.connectbot.bean.HostBean $r13;
        com.trilead.ssh2.Connection $r14;
        com.trilead.ssh2.Session $r15;
        int $i0, $i1, $i2, $i3;
        java.io.OutputStream $r16;
        java.io.InputStream $r17;

        $r0 := @this: org.connectbot.transport.SSH;

        $r0.<org.connectbot.transport.SSH: boolean authenticated> = 1;

        $r5 = $r0.<org.connectbot.transport.SSH: java.util.List portForwards>;

        $r4 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.connectbot.bean.PortForwardBean) $r6;

     label02:
        virtualinvoke $r0.<org.connectbot.transport.SSH: boolean enablePortForward(org.connectbot.bean.PortForwardBean)>($r7);

        $r8 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r1 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r9 = $r1.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r10 = newarray (java.lang.Object)[1];

        $r11 = virtualinvoke $r7.<org.connectbot.bean.PortForwardBean: java.lang.CharSequence getDescription()>();

        $r10[0] = $r11;

        $r12 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131165379, $r10);

        virtualinvoke $r8.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r12);

     label03:
        goto label01;

     label04:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", "Error setting up port forward during connect", $r2);

        goto label01;

     label05:
        $r13 = $r0.<org.connectbot.transport.SSH: org.connectbot.bean.HostBean host>;

        $z0 = virtualinvoke $r13.<org.connectbot.bean.HostBean: boolean getWantSession()>();

        if $z0 != 0 goto label06;

        $r8 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r1 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r9 = $r1.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r12 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getString(int)>(2131165382);

        virtualinvoke $r8.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r12);

        $r8 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        virtualinvoke $r8.<org.connectbot.service.TerminalBridge: void onConnected()>();

        return;

     label06:
        $r14 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

     label07:
        $r15 = virtualinvoke $r14.<com.trilead.ssh2.Connection: com.trilead.ssh2.Session openSession()>();

     label08:
        $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Session session> = $r15;

     label09:
        $r12 = $r0.<org.connectbot.transport.SSH: java.lang.String useAuthAgent>;

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("no");

     label10:
        if $z0 != 0 goto label12;

     label11:
        $r15 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Session session>;

        virtualinvoke $r15.<com.trilead.ssh2.Session: boolean requestAuthAgentForwarding(com.trilead.ssh2.AuthAgentCallback)>($r0);

     label12:
        $r15 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Session session>;

        $r12 = virtualinvoke $r0.<org.connectbot.transport.SSH: java.lang.String getEmulation()>();

     label13:
        $i0 = $r0.<org.connectbot.transport.SSH: int columns>;

        $i1 = $r0.<org.connectbot.transport.SSH: int rows>;

        $i2 = $r0.<org.connectbot.transport.SSH: int width>;

     label14:
        $i3 = $r0.<org.connectbot.transport.SSH: int height>;

        virtualinvoke $r15.<com.trilead.ssh2.Session: void requestPTY(java.lang.String,int,int,int,int,byte[])>($r12, $i0, $i1, $i2, $i3, null);

        $r15 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Session session>;

        virtualinvoke $r15.<com.trilead.ssh2.Session: void startShell()>();

        $r15 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Session session>;

        $r16 = virtualinvoke $r15.<com.trilead.ssh2.Session: java.io.OutputStream getStdin()>();

     label15:
        $r0.<org.connectbot.transport.SSH: java.io.OutputStream stdin> = $r16;

     label16:
        $r15 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Session session>;

        $r17 = virtualinvoke $r15.<com.trilead.ssh2.Session: java.io.InputStream getStdout()>();

     label17:
        $r0.<org.connectbot.transport.SSH: java.io.InputStream stdout> = $r17;

     label18:
        $r15 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Session session>;

        $r17 = virtualinvoke $r15.<com.trilead.ssh2.Session: java.io.InputStream getStderr()>();

     label19:
        $r0.<org.connectbot.transport.SSH: java.io.InputStream stderr> = $r17;

        $r0.<org.connectbot.transport.SSH: boolean sessionOpen> = 1;

     label20:
        $r8 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        virtualinvoke $r8.<org.connectbot.service.TerminalBridge: void onConnected()>();

     label21:
        return;

     label22:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", "Problem while trying to create PTY in finishConnection()", $r3);

        return;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.io.IOException from label07 to label08 with label22;
        catch java.io.IOException from label09 to label10 with label22;
        catch java.io.IOException from label11 to label13 with label22;
        catch java.io.IOException from label14 to label15 with label22;
        catch java.io.IOException from label16 to label17 with label22;
        catch java.io.IOException from label18 to label19 with label22;
        catch java.io.IOException from label20 to label21 with label22;
    }

    public static java.lang.String getFormatHint(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        $r0 := @parameter0: android.content.Context;

        $r2 = newarray (java.lang.Object)[3];

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.String getString(int)>(2131165270);

        $r2[0] = $r1;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.String getString(int)>(2131165268);

        $r2[1] = $r1;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.String getString(int)>(2131165269);

        $r2[2] = $r1;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s@%s:%s", $r2);

        return $r1;
    }

    public static java.lang.String getProtocolName()
    {
        return "ssh";
    }

    public static android.net.Uri getUri(java.lang.String)
    {
        java.lang.String $r0, $r5;
        int $i0, $i1;
        java.lang.StringBuilder $r1, $r4;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;
        android.net.Uri $r6;
        java.lang.NumberFormatException $r7;

        $r0 := @parameter0: java.lang.String;

        $r2 = <org.connectbot.transport.SSH: java.util.regex.Pattern hostmask>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ssh");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("://");

        $r5 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r5 = staticinvoke <android.net.Uri: java.lang.String encode(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $r5 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        $i0 = 22;

        if $r5 == null goto label5;

     label2:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

     label3:
        $i0 = $i1;

        if $i1 < 1 goto label4;

        if $i1 <= 65535 goto label5;

     label4:
        $i0 = 22;

     label5:
        if $i0 == 22 goto label6;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label6:
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/#");

        $r5 = staticinvoke <android.net.Uri: java.lang.String encode(java.lang.String)>($r0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r5);

        return $r6;

     label7:
        $r7 := @caughtexception;

        goto label5;

        catch java.lang.NumberFormatException from label2 to label3 with label7;
    }

    private void onDisconnect()
    {
        org.connectbot.transport.SSH $r0;
        org.connectbot.service.TerminalBridge $r1;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        virtualinvoke $r1.<org.connectbot.service.TerminalBridge: void dispatchDisconnect(boolean)>(0);

        return;
    }

    private boolean promptForPubkeyUse(java.lang.String)
    {
        org.connectbot.transport.SSH $r0;
        java.lang.String $r1;
        org.connectbot.service.TerminalBridge $r2;
        org.connectbot.service.TerminalManager $r3;
        org.connectbot.service.PromptHelper $r4;
        android.content.res.Resources $r5;
        java.lang.Object[] $r6;
        java.lang.Boolean $r7;
        boolean $z0;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r4 = $r2.<org.connectbot.service.TerminalBridge: org.connectbot.service.PromptHelper promptHelper>;

        $r3 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r5 = $r3.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r1;

        $r1 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131165360, $r6);

        $r7 = virtualinvoke $r4.<org.connectbot.service.PromptHelper: java.lang.Boolean requestBooleanPrompt(java.lang.String,java.lang.String)>(null, $r1);

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean tryPublicKey(java.lang.String, java.lang.String, java.security.KeyPair) throws java.io.IOException
    {
        org.connectbot.transport.SSH $r0;
        java.lang.String $r1, $r2;
        java.security.KeyPair $r3;
        com.trilead.ssh2.Connection $r4;
        org.connectbot.service.TerminalManager $r5;
        boolean $z0;
        org.connectbot.service.TerminalBridge $r6;
        android.content.res.Resources $r7;
        java.lang.Object[] $r8;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.security.KeyPair;

        $r4 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

        $z0 = virtualinvoke $r4.<com.trilead.ssh2.Connection: boolean authenticateWithPublicKey(java.lang.String,java.security.KeyPair)>($r1, $r3);

        if $z0 != 0 goto label1;

        $r6 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r7 = $r5.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r2;

        $r2 = virtualinvoke $r7.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131165375, $r8);

        virtualinvoke $r6.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r2);

        return $z0;

     label1:
        return $z0;
    }

    private boolean tryPublicKey(org.connectbot.bean.PubkeyBean) throws java.security.NoSuchAlgorithmException, java.security.spec.InvalidKeySpecException, java.io.IOException
    {
        org.connectbot.transport.SSH $r0;
        org.connectbot.bean.PubkeyBean $r1;
        java.lang.Exception $r2;
        java.security.KeyPair $r3;
        java.lang.String $r4, $r8, $r12;
        org.connectbot.service.TerminalManager $r5;
        java.lang.Object[] $r6;
        boolean $z0;
        org.connectbot.bean.HostBean $r7;
        org.connectbot.service.TerminalBridge $r9;
        org.connectbot.service.PromptHelper $r10;
        android.content.res.Resources $r11;
        byte[] $r13;
        char[] $r14;
        java.security.PrivateKey $r15;
        java.security.PublicKey $r16;
        java.lang.StringBuilder $r17;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: org.connectbot.bean.PubkeyBean;

        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r4 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: java.lang.String getNickname()>();

        $z0 = virtualinvoke $r5.<org.connectbot.service.TerminalManager: boolean isKeyLoaded(java.lang.String)>($r4);

        if $z0 == 0 goto label3;

        $r6 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: java.lang.String getNickname()>();

        $r6[0] = $r4;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Found unlocked key \'%s\' already in-memory", $r6);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CB.SSH", $r4);

        $z0 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: boolean isConfirmUse()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: java.lang.String getNickname()>();

        $z0 = specialinvoke $r0.<org.connectbot.transport.SSH: boolean promptForPubkeyUse(java.lang.String)>($r4);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r4 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: java.lang.String getNickname()>();

        $r3 = virtualinvoke $r5.<org.connectbot.service.TerminalManager: java.security.KeyPair getKey(java.lang.String)>($r4);

     label2:
        $r7 = $r0.<org.connectbot.transport.SSH: org.connectbot.bean.HostBean host>;

        $r4 = virtualinvoke $r7.<org.connectbot.bean.HostBean: java.lang.String getUsername()>();

        $r8 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: java.lang.String getNickname()>();

        $z0 = specialinvoke $r0.<org.connectbot.transport.SSH: boolean tryPublicKey(java.lang.String,java.lang.String,java.security.KeyPair)>($r4, $r8, $r3);

        return $z0;

     label3:
        $r4 = null;

        $z0 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: boolean isEncrypted()>();

        if $z0 == 0 goto label4;

        $r9 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r10 = virtualinvoke $r9.<org.connectbot.service.TerminalBridge: org.connectbot.service.PromptHelper getPromptHelper()>();

        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r11 = $r5.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r6 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: java.lang.String getNickname()>();

        $r6[0] = $r8;

        $r8 = virtualinvoke $r11.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131165364, $r6);

        $r8 = virtualinvoke $r10.<org.connectbot.service.PromptHelper: java.lang.String requestStringPrompt(java.lang.String,java.lang.String)>(null, $r8);

        $r4 = $r8;

        if $r8 == null goto label9;

     label4:
        $r8 = "IMPORTED";

        $r12 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: java.lang.String getType()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label6;

        $r12 = new java.lang.String;

        $r13 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: byte[] getPrivateKey()>();

        specialinvoke $r12.<java.lang.String: void <init>(byte[])>($r13);

        $r14 = virtualinvoke $r12.<java.lang.String: char[] toCharArray()>();

        $r3 = staticinvoke <com.trilead.ssh2.crypto.PEMDecoder: java.security.KeyPair decode(char[],java.lang.String)>($r14, $r4);

     label5:
        $r6 = newarray (java.lang.Object)[1];

        $r12 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: java.lang.String getNickname()>();

        $r6[0] = $r12;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unlocked key \'%s\'", $r6);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CB.SSH", $r12);

        $r5 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        virtualinvoke $r5.<org.connectbot.service.TerminalManager: void addKey(org.connectbot.bean.PubkeyBean,java.security.KeyPair)>($r1, $r3);

        goto label2;

     label6:
        $r13 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: byte[] getPrivateKey()>();

        $r12 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: java.lang.String getType()>();

        $r15 = staticinvoke <org.connectbot.util.PubkeyUtils: java.security.PrivateKey decodePrivate(byte[],java.lang.String,java.lang.String)>($r13, $r12, $r4);

     label7:
        $r13 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: byte[] getPublicKey()>();

        $r12 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: java.lang.String getType()>();

        $r16 = staticinvoke <org.connectbot.util.PubkeyUtils: java.security.PublicKey decodePublic(byte[],java.lang.String)>($r13, $r12);

        $r3 = new java.security.KeyPair;

        specialinvoke $r3.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r16, $r15);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unlocked key ");

        $r12 = staticinvoke <org.connectbot.util.PubkeyUtils: java.lang.String formatKey(java.security.Key)>($r16);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CB.SSH", $r12);

        goto label5;

     label8:
        $r2 := @caughtexception;

        $r6 = newarray (java.lang.Object)[1];

        $r12 = virtualinvoke $r1.<org.connectbot.bean.PubkeyBean: java.lang.String getNickname()>();

        $r6[0] = $r12;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Bad password for key \'%s\'. Authentication failed.", $r6);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", $r12, $r2);

        $r9 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        virtualinvoke $r9.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r12);

        return 0;

     label9:
        return 0;

        catch java.lang.Exception from label6 to label7 with label8;
    }

    public boolean addIdentity(java.security.KeyPair, java.lang.String, boolean, int)
    {
        org.connectbot.transport.SSH $r0;
        java.security.KeyPair $r1;
        java.lang.String $r2;
        boolean $z0;
        int $i0;
        org.connectbot.bean.PubkeyBean $r3;
        org.connectbot.service.TerminalManager $r4;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: java.security.KeyPair;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $r3 = new org.connectbot.bean.PubkeyBean;

        specialinvoke $r3.<org.connectbot.bean.PubkeyBean: void <init>()>();

        virtualinvoke $r3.<org.connectbot.bean.PubkeyBean: void setNickname(java.lang.String)>($r2);

        virtualinvoke $r3.<org.connectbot.bean.PubkeyBean: void setConfirmUse(boolean)>($z0);

        virtualinvoke $r3.<org.connectbot.bean.PubkeyBean: void setLifetime(int)>($i0);

        $r4 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        virtualinvoke $r4.<org.connectbot.service.TerminalManager: void addKey(org.connectbot.bean.PubkeyBean,java.security.KeyPair)>($r3, $r1);

        return 1;
    }

    public boolean addPortForward(org.connectbot.bean.PortForwardBean)
    {
        org.connectbot.transport.SSH $r0;
        org.connectbot.bean.PortForwardBean $r1;
        java.util.List $r2;
        boolean $z0;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: org.connectbot.bean.PortForwardBean;

        $r2 = $r0.<org.connectbot.transport.SSH: java.util.List portForwards>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean canForwardPorts()
    {
        org.connectbot.transport.SSH $r0;

        $r0 := @this: org.connectbot.transport.SSH;

        return 1;
    }

    public void close()
    {
        org.connectbot.transport.SSH $r0;
        com.trilead.ssh2.Session $r1;
        com.trilead.ssh2.Connection $r2;

        $r0 := @this: org.connectbot.transport.SSH;

        $r0.<org.connectbot.transport.SSH: boolean connected> = 0;

        $r1 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Session session>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Session session>;

        virtualinvoke $r1.<com.trilead.ssh2.Session: void close()>();

        $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Session session> = null;

     label1:
        $r2 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

        if $r2 == null goto label2;

        $r2 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

        virtualinvoke $r2.<com.trilead.ssh2.Connection: void close()>();

        $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection> = null;

        return;

     label2:
        return;
    }

    public void connect()
    {
        org.connectbot.transport.SSH $r0;
        java.io.IOException $r1, $r13;
        java.lang.Throwable $r2, $r14;
        int $i0;
        com.trilead.ssh2.Connection $r3;
        org.connectbot.bean.HostBean $r4;
        com.trilead.ssh2.ConnectionInfo $r5;
        java.lang.String $r6, $r12;
        boolean $z0;
        org.connectbot.transport.SSH$HostKeyVerifier $r7;
        org.connectbot.service.TerminalBridge $r8;
        org.connectbot.service.TerminalManager $r9;
        android.content.res.Resources $r10;
        java.lang.Object[] $r11;
        java.lang.Exception $r15;

        $r0 := @this: org.connectbot.transport.SSH;

        $r3 = new com.trilead.ssh2.Connection;

        $r4 = $r0.<org.connectbot.transport.SSH: org.connectbot.bean.HostBean host>;

        $r6 = virtualinvoke $r4.<org.connectbot.bean.HostBean: java.lang.String getHostname()>();

        $r4 = $r0.<org.connectbot.transport.SSH: org.connectbot.bean.HostBean host>;

        $i0 = virtualinvoke $r4.<org.connectbot.bean.HostBean: int getPort()>();

        specialinvoke $r3.<com.trilead.ssh2.Connection: void <init>(java.lang.String,int)>($r6, $i0);

        $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection> = $r3;

        $r3 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

        virtualinvoke $r3.<com.trilead.ssh2.Connection: void addConnectionMonitor(com.trilead.ssh2.ConnectionMonitor)>($r0);

        $r3 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

        $z0 = $r0.<org.connectbot.transport.SSH: boolean compression>;

     label01:
        virtualinvoke $r3.<com.trilead.ssh2.Connection: void setCompression(boolean)>($z0);

     label02:
        $r3 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

        $r7 = new org.connectbot.transport.SSH$HostKeyVerifier;

     label03:
        specialinvoke $r7.<org.connectbot.transport.SSH$HostKeyVerifier: void <init>(org.connectbot.transport.SSH)>($r0);

        $r5 = virtualinvoke $r3.<com.trilead.ssh2.Connection: com.trilead.ssh2.ConnectionInfo connect(com.trilead.ssh2.ServerHostKeyVerifier)>($r7);

     label04:
        $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.ConnectionInfo connectionInfo> = $r5;

        $r0.<org.connectbot.transport.SSH: boolean connected> = 1;

        $r8 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r9 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r10 = $r9.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r11 = newarray (java.lang.Object)[1];

        $r5 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.ConnectionInfo connectionInfo>;

        $r6 = $r5.<com.trilead.ssh2.ConnectionInfo: java.lang.String keyExchangeAlgorithm>;

     label05:
        $r11[0] = $r6;

        $r6 = virtualinvoke $r10.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131165409, $r11);

        virtualinvoke $r8.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r6);

     label06:
        $r5 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.ConnectionInfo connectionInfo>;

        $r6 = $r5.<com.trilead.ssh2.ConnectionInfo: java.lang.String clientToServerCryptoAlgorithm>;

        $r5 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.ConnectionInfo connectionInfo>;

     label07:
        $r12 = $r5.<com.trilead.ssh2.ConnectionInfo: java.lang.String serverToClientCryptoAlgorithm>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r12);

     label08:
        if $z0 == 0 goto label18;

        $r5 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.ConnectionInfo connectionInfo>;

        $r12 = $r5.<com.trilead.ssh2.ConnectionInfo: java.lang.String clientToServerMACAlgorithm>;

        $r5 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.ConnectionInfo connectionInfo>;

     label09:
        $r6 = $r5.<com.trilead.ssh2.ConnectionInfo: java.lang.String serverToClientMACAlgorithm>;

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r6);

     label10:
        if $z0 == 0 goto label18;

        $r8 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r9 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r10 = $r9.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r11 = newarray (java.lang.Object)[2];

        $r5 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.ConnectionInfo connectionInfo>;

        $r12 = $r5.<com.trilead.ssh2.ConnectionInfo: java.lang.String clientToServerCryptoAlgorithm>;

        $r11[0] = $r12;

        $r5 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.ConnectionInfo connectionInfo>;

        $r12 = $r5.<com.trilead.ssh2.ConnectionInfo: java.lang.String clientToServerMACAlgorithm>;

     label11:
        $r11[1] = $r12;

        $r12 = virtualinvoke $r10.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131165384, $r11);

        virtualinvoke $r8.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r12);

     label12:
        $i0 = 0;

     label13:
        $z0 = $r0.<org.connectbot.transport.SSH: boolean connected>;

        if $z0 == 0 goto label28;

        $r3 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

        $z0 = virtualinvoke $r3.<com.trilead.ssh2.Connection: boolean isAuthenticationComplete()>();

     label14:
        if $z0 != 0 goto label28;

        if $i0 >= 20 goto label29;

     label15:
        specialinvoke $r0.<org.connectbot.transport.SSH: void authenticate()>();

        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

     label16:
        $i0 = $i0 + 1;

        goto label13;

     label17:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", "Could not enable compression!", $r1);

        goto label02;

     label18:
        $r8 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r9 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r10 = $r9.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r11 = newarray (java.lang.Object)[2];

        $r5 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.ConnectionInfo connectionInfo>;

        $r12 = $r5.<com.trilead.ssh2.ConnectionInfo: java.lang.String clientToServerCryptoAlgorithm>;

        $r11[0] = $r12;

        $r5 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.ConnectionInfo connectionInfo>;

        $r12 = $r5.<com.trilead.ssh2.ConnectionInfo: java.lang.String clientToServerMACAlgorithm>;

        $r11[1] = $r12;

     label19:
        $r12 = virtualinvoke $r10.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131165385, $r11);

        virtualinvoke $r8.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r12);

     label20:
        $r8 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r9 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r10 = $r9.<org.connectbot.service.TerminalManager: android.content.res.Resources res>;

        $r11 = newarray (java.lang.Object)[2];

        $r5 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.ConnectionInfo connectionInfo>;

        $r12 = $r5.<com.trilead.ssh2.ConnectionInfo: java.lang.String serverToClientCryptoAlgorithm>;

        $r11[0] = $r12;

        $r5 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.ConnectionInfo connectionInfo>;

        $r12 = $r5.<com.trilead.ssh2.ConnectionInfo: java.lang.String serverToClientMACAlgorithm>;

     label21:
        $r11[1] = $r12;

        $r12 = virtualinvoke $r10.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(2131165386, $r11);

        virtualinvoke $r8.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r12);

     label22:
        goto label12;

     label23:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", "Problem in SSH connection thread during authentication", $r13);

        $r2 = virtualinvoke $r13.<java.io.IOException: java.lang.Throwable getCause()>();

     label24:
        $r8 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r12 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r8.<org.connectbot.service.TerminalBridge: void outputLine(java.lang.String)>($r12);

        $r14 = virtualinvoke $r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $r2 = $r14;

        if $r14 != null goto label24;

        virtualinvoke $r0.<org.connectbot.transport.SSH: void close()>();

        specialinvoke $r0.<org.connectbot.transport.SSH: void onDisconnect()>();

        return;

     label25:
        $r15 := @caughtexception;

     label26:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", "Problem in SSH connection thread during authentication", $r15);

        return;

     label27:
        $r15 := @caughtexception;

        goto label26;

     label28:
        return;

     label29:
        return;

        catch java.io.IOException from label01 to label02 with label17;
        catch java.io.IOException from label03 to label04 with label23;
        catch java.io.IOException from label05 to label06 with label23;
        catch java.io.IOException from label07 to label08 with label23;
        catch java.io.IOException from label09 to label10 with label23;
        catch java.io.IOException from label11 to label12 with label23;
        catch java.lang.Exception from label13 to label14 with label25;
        catch java.lang.Exception from label15 to label16 with label27;
        catch java.io.IOException from label19 to label20 with label23;
        catch java.io.IOException from label21 to label22 with label23;
    }

    public void connectionLost(java.lang.Throwable)
    {
        org.connectbot.transport.SSH $r0;
        java.lang.Throwable $r1;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: java.lang.Throwable;

        specialinvoke $r0.<org.connectbot.transport.SSH: void onDisconnect()>();

        return;
    }

    public org.connectbot.bean.HostBean createHost(android.net.Uri)
    {
        org.connectbot.transport.SSH $r0;
        android.net.Uri $r1;
        org.connectbot.bean.HostBean $r2;
        int $i0, $i1;
        java.lang.String $r3, $r4;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: android.net.Uri;

        $r2 = new org.connectbot.bean.HostBean;

        specialinvoke $r2.<org.connectbot.bean.HostBean: void <init>()>();

        virtualinvoke $r2.<org.connectbot.bean.HostBean: void setProtocol(java.lang.String)>("ssh");

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getHost()>();

        virtualinvoke $r2.<org.connectbot.bean.HostBean: void setHostname(java.lang.String)>($r3);

        $i1 = virtualinvoke $r1.<android.net.Uri: int getPort()>();

        $i0 = $i1;

        if $i1 >= 0 goto label1;

        $i0 = 22;

     label1:
        virtualinvoke $r2.<org.connectbot.bean.HostBean: void setPort(int)>($i0);

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getUserInfo()>();

        virtualinvoke $r2.<org.connectbot.bean.HostBean: void setUsername(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getFragment()>();

        if $r3 == null goto label2;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

     label2:
        $r3 = virtualinvoke $r2.<org.connectbot.bean.HostBean: java.lang.String getUsername()>();

        $r4 = virtualinvoke $r2.<org.connectbot.bean.HostBean: java.lang.String getHostname()>();

        $i1 = virtualinvoke $r2.<org.connectbot.bean.HostBean: int getPort()>();

        $r4 = virtualinvoke $r0.<org.connectbot.transport.SSH: java.lang.String getDefaultNickname(java.lang.String,java.lang.String,int)>($r3, $r4, $i1);

        virtualinvoke $r2.<org.connectbot.bean.HostBean: void setNickname(java.lang.String)>($r4);

        return $r2;

     label3:
        $r4 = virtualinvoke $r1.<android.net.Uri: java.lang.String getFragment()>();

        virtualinvoke $r2.<org.connectbot.bean.HostBean: void setNickname(java.lang.String)>($r4);

        return $r2;
    }

    public boolean disablePortForward(org.connectbot.bean.PortForwardBean)
    {
        org.connectbot.transport.SSH $r0;
        org.connectbot.bean.PortForwardBean $r1;
        java.io.IOException $r2, $r10, $r12;
        java.util.List $r3;
        boolean $z0;
        java.lang.String $r4, $r5;
        java.lang.Object $r6;
        com.trilead.ssh2.LocalPortForwarder $r7;
        java.lang.Object[] $r8;
        com.trilead.ssh2.Connection $r9;
        int $i0;
        com.trilead.ssh2.DynamicPortForwarder $r11;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: org.connectbot.bean.PortForwardBean;

        $r3 = $r0.<org.connectbot.transport.SSH: java.util.List portForwards>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CB.SSH", "Attempt to disable port forward not in list");

        return 0;

     label01:
        $z0 = $r0.<org.connectbot.transport.SSH: boolean authenticated>;

        if $z0 == 0 goto label18;

        $r4 = "local";

        $r5 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: java.lang.String getType()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label07;

        $r6 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: java.lang.Object getIdentifier()>();

        $r7 = (com.trilead.ssh2.LocalPortForwarder) $r6;

        $z0 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: boolean isEnabled()>();

        if $z0 == 0 goto label02;

        if $r7 != null goto label03;

     label02:
        $r8 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: java.lang.String getNickname()>();

        $r8[0] = $r5;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not disable %s; it appears to be not enabled or have no handler", $r8);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CB.SSH", $r5);

        return 0;

     label03:
        virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: void setEnabled(boolean)>(0);

     label04:
        virtualinvoke $r7.<com.trilead.ssh2.LocalPortForwarder: void close()>();

     label05:
        return 1;

     label06:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", "Could not stop local port forwarder, setting enabled to false", $r2);

        return 0;

     label07:
        $r5 = "remote";

        $r4 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: java.lang.String getType()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label11;

        virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: void setEnabled(boolean)>(0);

        $r9 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

     label08:
        $i0 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: int getSourcePort()>();

        virtualinvoke $r9.<com.trilead.ssh2.Connection: void cancelRemotePortForwarding(int)>($i0);

     label09:
        return 1;

     label10:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", "Could not stop remote port forwarding, setting enabled to false", $r10);

        return 0;

     label11:
        $r5 = "dynamic5";

        $r4 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: java.lang.String getType()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label17;

        $r6 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: java.lang.Object getIdentifier()>();

        $r11 = (com.trilead.ssh2.DynamicPortForwarder) $r6;

        $z0 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: boolean isEnabled()>();

        if $z0 == 0 goto label12;

        if $r11 != null goto label13;

     label12:
        $r8 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: java.lang.String getNickname()>();

        $r8[0] = $r5;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not disable %s; it appears to be not enabled or have no handler", $r8);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CB.SSH", $r5);

        return 0;

     label13:
        virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: void setEnabled(boolean)>(0);

     label14:
        virtualinvoke $r11.<com.trilead.ssh2.DynamicPortForwarder: void close()>();

     label15:
        return 1;

     label16:
        $r12 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", "Could not stop dynamic port forwarder, setting enabled to false", $r12);

        return 0;

     label17:
        $r8 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: java.lang.String getType()>();

        $r8[0] = $r5;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("attempt to forward unknown type %s", $r8);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CB.SSH", $r5);

        return 0;

     label18:
        return 0;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label14 to label15 with label16;
    }

    public boolean enablePortForward(org.connectbot.bean.PortForwardBean)
    {
        org.connectbot.transport.SSH $r0;
        org.connectbot.bean.PortForwardBean $r1;
        java.lang.Exception $r2, $r10, $r12;
        java.util.List $r3;
        boolean $z0;
        java.lang.String $r4, $r5;
        com.trilead.ssh2.Connection $r6;
        java.net.InetSocketAddress $r7;
        java.net.InetAddress $r8;
        int $i0, $i1;
        com.trilead.ssh2.LocalPortForwarder $r9;
        com.trilead.ssh2.DynamicPortForwarder $r11;
        java.lang.Object[] $r13;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: org.connectbot.bean.PortForwardBean;

        $r3 = $r0.<org.connectbot.transport.SSH: java.util.List portForwards>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CB.SSH", "Attempt to enable port forward not in list");

        return 0;

     label01:
        $z0 = $r0.<org.connectbot.transport.SSH: boolean authenticated>;

        if $z0 == 0 goto label15;

        $r4 = "local";

        $r5 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: java.lang.String getType()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label06;

     label02:
        $r6 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

        $r7 = new java.net.InetSocketAddress;

        $r8 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>();

        $i0 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: int getSourcePort()>();

        specialinvoke $r7.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r8, $i0);

        $r5 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: java.lang.String getDestAddr()>();

        $i0 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: int getDestPort()>();

        $r9 = virtualinvoke $r6.<com.trilead.ssh2.Connection: com.trilead.ssh2.LocalPortForwarder createLocalPortForwarder(java.net.InetSocketAddress,java.lang.String,int)>($r7, $r5, $i0);

     label03:
        if $r9 != null goto label05;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CB.SSH", "returned LocalPortForwarder object is null");

        return 0;

     label04:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", "Could not create local port forward", $r2);

        return 0;

     label05:
        virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: void setIdentifier(java.lang.Object)>($r9);

        virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: void setEnabled(boolean)>(1);

        return 1;

     label06:
        $r5 = "remote";

        $r4 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: java.lang.String getType()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label10;

     label07:
        $r6 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

        $i0 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: int getSourcePort()>();

        $r5 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: java.lang.String getDestAddr()>();

        $i1 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: int getDestPort()>();

        virtualinvoke $r6.<com.trilead.ssh2.Connection: void requestRemotePortForwarding(java.lang.String,int,java.lang.String,int)>("", $i0, $r5, $i1);

     label08:
        virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: void setEnabled(boolean)>(1);

        return 1;

     label09:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", "Could not create remote port forward", $r10);

        return 0;

     label10:
        $r5 = "dynamic5";

        $r4 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: java.lang.String getType()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label14;

     label11:
        $r6 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Connection connection>;

        $r7 = new java.net.InetSocketAddress;

        $r8 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>();

        $i1 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: int getSourcePort()>();

        specialinvoke $r7.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r8, $i1);

        $r11 = virtualinvoke $r6.<com.trilead.ssh2.Connection: com.trilead.ssh2.DynamicPortForwarder createDynamicPortForwarder(java.net.InetSocketAddress)>($r7);

     label12:
        virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: void setIdentifier(java.lang.Object)>($r11);

        virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: void setEnabled(boolean)>(1);

        return 1;

     label13:
        $r12 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", "Could not create dynamic port forward", $r12);

        return 0;

     label14:
        $r13 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke $r1.<org.connectbot.bean.PortForwardBean: java.lang.String getType()>();

        $r13[0] = $r5;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("attempt to forward unknown type %s", $r13);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CB.SSH", $r5);

        return 0;

     label15:
        return 0;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label11 to label12 with label13;
    }

    public void flush() throws java.io.IOException
    {
        org.connectbot.transport.SSH $r0;
        java.io.OutputStream $r1;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 = $r0.<org.connectbot.transport.SSH: java.io.OutputStream stdin>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.connectbot.transport.SSH: java.io.OutputStream stdin>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;

     label1:
        return;
    }

    public java.lang.String getDefaultNickname(java.lang.String, java.lang.String, int)
    {
        org.connectbot.transport.SSH $r0;
        java.lang.String $r1, $r2;
        int $i0;
        java.lang.Object[] $r3;
        java.util.Locale $r4;
        java.lang.Integer $r5;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        if $i0 != 22 goto label1;

        $r4 = <java.util.Locale: java.util.Locale US>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = $r1;

        $r3[1] = $r2;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, "%s@%s", $r3);

        return $r2;

     label1:
        $r4 = <java.util.Locale: java.util.Locale US>;

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = $r1;

        $r3[1] = $r2;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[2] = $r5;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, "%s@%s:%d", $r3);

        return $r2;
    }

    public java.security.KeyPair getKeyPair(byte[])
    {
        org.connectbot.transport.SSH $r0;
        byte[] $r1;
        org.connectbot.service.TerminalManager $r2;
        java.lang.String $r3, $r4;
        boolean $z0;
        java.util.Map $r5;
        java.lang.Object $r6;
        org.connectbot.service.TerminalManager$KeyHolder $r7;
        org.connectbot.bean.PubkeyBean $r8;
        java.security.KeyPair $r9;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: byte[];

        $r2 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r3 = virtualinvoke $r2.<org.connectbot.service.TerminalManager: java.lang.String getKeyNickname(byte[])>($r1);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = $r0.<org.connectbot.transport.SSH: java.lang.String useAuthAgent>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("no");

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("CB.SSH", "");

        return null;

     label2:
        $r4 = $r0.<org.connectbot.transport.SSH: java.lang.String useAuthAgent>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("confirm");

        if $z0 != 0 goto label3;

        $r2 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r5 = $r2.<org.connectbot.service.TerminalManager: java.util.Map loadedKeypairs>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r7 = (org.connectbot.service.TerminalManager$KeyHolder) $r6;

        $r8 = $r7.<org.connectbot.service.TerminalManager$KeyHolder: org.connectbot.bean.PubkeyBean bean>;

        $z0 = virtualinvoke $r8.<org.connectbot.bean.PubkeyBean: boolean isConfirmUse()>();

        if $z0 == 0 goto label4;

     label3:
        $z0 = specialinvoke $r0.<org.connectbot.transport.SSH: boolean promptForPubkeyUse(java.lang.String)>($r3);

        if $z0 != 0 goto label4;

        return null;

     label4:
        $r2 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r9 = virtualinvoke $r2.<org.connectbot.service.TerminalManager: java.security.KeyPair getKey(java.lang.String)>($r3);

        return $r9;
    }

    public java.util.List getPortForwards()
    {
        org.connectbot.transport.SSH $r0;
        java.util.List $r1;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 = $r0.<org.connectbot.transport.SSH: java.util.List portForwards>;

        return $r1;
    }

    public void getSelectionArgs(android.net.Uri, java.util.Map)
    {
        org.connectbot.transport.SSH $r0;
        android.net.Uri $r1;
        java.util.Map $r2;
        int $i0, $i1;
        java.lang.String $r3;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: java.util.Map;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("protocol", "ssh");

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getFragment()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("nickname", $r3);

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getHost()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostname", $r3);

        $i1 = virtualinvoke $r1.<android.net.Uri: int getPort()>();

        $i0 = $i1;

        if $i1 >= 0 goto label1;

        $i0 = 22;

     label1:
        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("port", $r3);

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getUserInfo()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("username", $r3);

        return;
    }

    public boolean isAgentLocked()
    {
        org.connectbot.transport.SSH $r0;
        java.lang.String $r1;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 = $r0.<org.connectbot.transport.SSH: java.lang.String agentLockPassphrase>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isConnected()
    {
        org.connectbot.transport.SSH $r0;
        boolean $z0;

        $r0 := @this: org.connectbot.transport.SSH;

        $z0 = $r0.<org.connectbot.transport.SSH: boolean connected>;

        return $z0;
    }

    public boolean isSessionOpen()
    {
        org.connectbot.transport.SSH $r0;
        boolean $z0;

        $r0 := @this: org.connectbot.transport.SSH;

        $z0 = $r0.<org.connectbot.transport.SSH: boolean sessionOpen>;

        return $z0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.connectbot.transport.SSH $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3, $i4;
        com.trilead.ssh2.Session $r2;
        java.io.InputStream $r3;
        java.io.IOException $r4;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = 0;

        $r2 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Session session>;

        if $r2 != null goto label1;

        return 0;

     label1:
        $r2 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Session session>;

        $i3 = virtualinvoke $r2.<com.trilead.ssh2.Session: int waitForCondition(int,long)>(30, 0L);

        $i4 = $i3 & 4;

        if $i4 == 0 goto label2;

        $r3 = $r0.<org.connectbot.transport.SSH: java.io.InputStream stdout>;

        $i2 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r1, $i0, $i1);

     label2:
        $i4 = $i3 & 8;

        if $i4 == 0 goto label4;

        $r1 = newarray (byte)[256];

     label3:
        $r3 = $r0.<org.connectbot.transport.SSH: java.io.InputStream stderr>;

        $i4 = virtualinvoke $r3.<java.io.InputStream: int available()>();

        if $i4 <= 0 goto label4;

        $r3 = $r0.<org.connectbot.transport.SSH: java.io.InputStream stderr>;

        virtualinvoke $r3.<java.io.InputStream: int read(byte[])>($r1);

        goto label3;

     label4:
        $i4 = $i3 & 16;

        if $i4 == 0 goto label5;

        virtualinvoke $r0.<org.connectbot.transport.SSH: void close()>();

        specialinvoke $r0.<org.connectbot.transport.SSH: void onDisconnect()>();

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Remote end closed connection");

        throw $r4;

     label5:
        return $i2;
    }

    public boolean removeAllIdentities()
    {
        org.connectbot.transport.SSH $r0;
        org.connectbot.service.TerminalManager $r1;
        java.util.Map $r2;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r2 = $r1.<org.connectbot.service.TerminalManager: java.util.Map loadedKeypairs>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        return 1;
    }

    public boolean removeIdentity(byte[])
    {
        org.connectbot.transport.SSH $r0;
        byte[] $r1;
        org.connectbot.service.TerminalManager $r2;
        boolean $z0;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: byte[];

        $r2 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $z0 = virtualinvoke $r2.<org.connectbot.service.TerminalManager: boolean removeKey(byte[])>($r1);

        return $z0;
    }

    public boolean removePortForward(org.connectbot.bean.PortForwardBean)
    {
        org.connectbot.transport.SSH $r0;
        org.connectbot.bean.PortForwardBean $r1;
        java.util.List $r2;
        boolean $z0;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: org.connectbot.bean.PortForwardBean;

        virtualinvoke $r0.<org.connectbot.transport.SSH: boolean disablePortForward(org.connectbot.bean.PortForwardBean)>($r1);

        $r2 = $r0.<org.connectbot.transport.SSH: java.util.List portForwards>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>($r1);

        return $z0;
    }

    public java.lang.String[] replyToChallenge(java.lang.String, java.lang.String, int, java.lang.String[], boolean[])
    {
        org.connectbot.transport.SSH $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        java.lang.String[] $r3, $r5;
        boolean[] $r4;
        org.connectbot.service.TerminalBridge $r6;
        org.connectbot.service.PromptHelper $r7;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.lang.String[];

        $r4 := @parameter4: boolean[];

        $r0.<org.connectbot.transport.SSH: boolean interactiveCanContinue> = 1;

        $r5 = newarray (java.lang.String)[$i0];

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r6 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalBridge bridge>;

        $r7 = $r6.<org.connectbot.service.TerminalBridge: org.connectbot.service.PromptHelper promptHelper>;

        $r1 = $r3[$i1];

        $r1 = virtualinvoke $r7.<org.connectbot.service.PromptHelper: java.lang.String requestStringPrompt(java.lang.String,java.lang.String)>($r2, $r1);

        $r5[$i1] = $r1;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $r5;
    }

    public boolean requestAgentUnlock(java.lang.String)
    {
        org.connectbot.transport.SSH $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.connectbot.transport.SSH: java.lang.String agentLockPassphrase>;

        if $r2 != null goto label1;

        return 0;

     label1:
        $r2 = $r0.<org.connectbot.transport.SSH: java.lang.String agentLockPassphrase>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r0.<org.connectbot.transport.SSH: java.lang.String agentLockPassphrase> = null;

     label2:
        $r2 = $r0.<org.connectbot.transport.SSH: java.lang.String agentLockPassphrase>;

        if $r2 != null goto label3;

        return 1;

     label3:
        return 0;
    }

    public java.util.Map retrieveIdentities()
    {
        org.connectbot.transport.SSH $r0;
        java.io.IOException $r1;
        java.security.KeyPair $r2;
        java.util.HashMap $r3;
        org.connectbot.service.TerminalManager $r4;
        int $i0;
        java.util.Map $r5;
        java.util.Set $r6;
        java.util.Iterator $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.util.Map$Entry $r9;
        org.connectbot.service.TerminalManager$KeyHolder $r10;
        java.security.PrivateKey $r11;
        java.security.PublicKey $r12;
        java.security.interfaces.RSAPublicKey $r13;
        byte[] $r14;
        java.security.interfaces.DSAPublicKey $r15;

        $r0 := @this: org.connectbot.transport.SSH;

        $r3 = new java.util.HashMap;

        $r4 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r5 = $r4.<org.connectbot.service.TerminalManager: java.util.Map loadedKeypairs>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>($i0);

        $r4 = $r0.<org.connectbot.transport.SSH: org.connectbot.service.TerminalManager manager>;

        $r5 = $r4.<org.connectbot.service.TerminalManager: java.util.Map loadedKeypairs>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.util.Map$Entry) $r8;

        $r8 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.connectbot.service.TerminalManager$KeyHolder) $r8;

        $r2 = $r10.<org.connectbot.service.TerminalManager$KeyHolder: java.security.KeyPair pair>;

     label02:
        $r11 = virtualinvoke $r2.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

     label03:
        $z0 = $r11 instanceof java.security.interfaces.RSAPrivateKey;

     label04:
        if $z0 == 0 goto label07;

        $r12 = virtualinvoke $r2.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r13 = (java.security.interfaces.RSAPublicKey) $r12;

        $r8 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = staticinvoke <com.trilead.ssh2.signature.RSASHA1Verify: byte[] encodeSSHRSAPublicKey(java.security.interfaces.RSAPublicKey)>($r13);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r14);

     label05:
        goto label01;

     label06:
        $r1 := @caughtexception;

        goto label01;

     label07:
        $z0 = $r11 instanceof java.security.interfaces.DSAPrivateKey;

     label08:
        if $z0 == 0 goto label01;

        $r12 = virtualinvoke $r2.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r15 = (java.security.interfaces.DSAPublicKey) $r12;

        $r8 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = staticinvoke <com.trilead.ssh2.signature.DSASHA1Verify: byte[] encodeSSHDSAPublicKey(java.security.interfaces.DSAPublicKey)>($r15);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r14);

     label09:
        goto label01;

     label10:
        return $r3;

        catch java.io.IOException from label02 to label03 with label06;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label08 to label09 with label06;
    }

    public boolean setAgentLock(java.lang.String)
    {
        org.connectbot.transport.SSH $r0;
        java.lang.String $r1, $r2;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.connectbot.transport.SSH: java.lang.String agentLockPassphrase>;

        if $r2 == null goto label1;

        return 0;

     label1:
        $r0.<org.connectbot.transport.SSH: java.lang.String agentLockPassphrase> = $r1;

        return 1;
    }

    public void setCompression(boolean)
    {
        org.connectbot.transport.SSH $r0;
        boolean $z0;

        $r0 := @this: org.connectbot.transport.SSH;

        $z0 := @parameter0: boolean;

        $r0.<org.connectbot.transport.SSH: boolean compression> = $z0;

        return;
    }

    public void setDimensions(int, int, int, int)
    {
        org.connectbot.transport.SSH $r0;
        int $i0, $i1, $i2, $i3;
        java.io.IOException $r1;
        boolean $z0;
        com.trilead.ssh2.Session $r2;

        $r0 := @this: org.connectbot.transport.SSH;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r0.<org.connectbot.transport.SSH: int columns> = $i0;

        $r0.<org.connectbot.transport.SSH: int rows> = $i1;

        $z0 = $r0.<org.connectbot.transport.SSH: boolean sessionOpen>;

        if $z0 == 0 goto label4;

        $r2 = $r0.<org.connectbot.transport.SSH: com.trilead.ssh2.Session session>;

     label1:
        virtualinvoke $r2.<com.trilead.ssh2.Session: void resizePTY(int,int,int,int)>($i0, $i1, $i2, $i3);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.SSH", "Couldn\'t send resize PTY packet", $r1);

        return;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void setUseAuthAgent(java.lang.String)
    {
        org.connectbot.transport.SSH $r0;
        java.lang.String $r1;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: java.lang.String;

        $r0.<org.connectbot.transport.SSH: java.lang.String useAuthAgent> = $r1;

        return;
    }

    public boolean usesNetwork()
    {
        org.connectbot.transport.SSH $r0;

        $r0 := @this: org.connectbot.transport.SSH;

        return 1;
    }

    public void write(int) throws java.io.IOException
    {
        org.connectbot.transport.SSH $r0;
        int $i0;
        java.io.OutputStream $r1;

        $r0 := @this: org.connectbot.transport.SSH;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.connectbot.transport.SSH: java.io.OutputStream stdin>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.connectbot.transport.SSH: java.io.OutputStream stdin>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i0);

        return;

     label1:
        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        org.connectbot.transport.SSH $r0;
        byte[] $r1;
        java.io.OutputStream $r2;

        $r0 := @this: org.connectbot.transport.SSH;

        $r1 := @parameter0: byte[];

        $r2 = $r0.<org.connectbot.transport.SSH: java.io.OutputStream stdin>;

        if $r2 == null goto label1;

        $r2 = $r0.<org.connectbot.transport.SSH: java.io.OutputStream stdin>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>($r1);

        return;

     label1:
        return;
    }
}
