public final class org.connectbot.util.Encryptor extends java.lang.Object
{

    private void <init>()
    {
        org.connectbot.util.Encryptor $r0;

        $r0 := @this: org.connectbot.util.Encryptor;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] decrypt(byte[], int, java.lang.String, byte[]) throws java.lang.Exception
    {
        byte[] $r0, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1;
        java.security.MessageDigest $r5;
        javax.crypto.Cipher $r6;
        javax.crypto.spec.SecretKeySpec $r7;
        javax.crypto.spec.IvParameterSpec $r8;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: byte[];

        $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i3 = lengthof $r4;

        $i2 = lengthof $r0;

        $i3 = $i3 + $i2;

        $r3 = newarray (byte)[$i3];

        $i3 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i3);

        $i3 = lengthof $r4;

        $i2 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r3, $i3, $i2);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r4, 0);

        virtualinvoke $r5.<java.security.MessageDigest: void reset()>();

        $r4 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>($r3);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r3, 0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r3 = newarray (byte)[16];

        $r0 = newarray (byte)[16];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, 16);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 16, $r0, 0, 16);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r4, 0);

        $r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

        $r7 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, "AES");

        $r8 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r0);

        virtualinvoke $r6.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r7, $r8);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r3, 0);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r0, 0);

        $r4 = virtualinvoke $r6.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

        return $r4;
    }

    public static byte[] encrypt(byte[], int, java.lang.String, byte[]) throws java.lang.Exception
    {
        byte[] $r0, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1;
        java.security.SecureRandom $r5;
        java.security.MessageDigest $r6;
        javax.crypto.Cipher $r7;
        javax.crypto.spec.SecretKeySpec $r8;
        javax.crypto.spec.IvParameterSpec $r9;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: byte[];

        $r5 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>("SHA1PRNG");

        virtualinvoke $r5.<java.security.SecureRandom: void nextBytes(byte[])>($r0);

        $r6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $i3 = lengthof $r4;

        $i2 = lengthof $r0;

        $i3 = $i3 + $i2;

        $r3 = newarray (byte)[$i3];

        $i3 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i3);

        $i3 = lengthof $r4;

        $i2 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r3, $i3, $i2);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r4, 0);

        virtualinvoke $r6.<java.security.MessageDigest: void reset()>();

        $r4 = virtualinvoke $r6.<java.security.MessageDigest: byte[] digest(byte[])>($r3);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r3, 0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r3 = newarray (byte)[16];

        $r0 = newarray (byte)[16];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, 16);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 16, $r0, 0, 16);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r4, 0);

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

        $r8 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r8.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, "AES");

        $r9 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r9.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r0);

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r8, $r9);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r3, 0);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r0, 0);

        $r4 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r2);

        return $r4;
    }
}
