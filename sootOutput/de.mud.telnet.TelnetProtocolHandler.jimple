public abstract class de.mud.telnet.TelnetProtocolHandler extends java.lang.Object
{
    private static final byte[] IACDO;
    private static final byte[] IACDONT;
    private static final byte[] IACSB;
    private static final byte[] IACSE;
    private static final byte[] IACWILL;
    private static final byte[] IACWONT;
    private static byte[] one;
    private byte[] cr;
    private byte[] crlf;
    private byte current_sb;
    private byte neg_state;
    private byte[] receivedDX;
    private byte[] receivedWX;
    private byte[] sbbuf;
    private byte[] sentDX;
    private byte[] sentWX;
    private byte[] tempbuf;

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[1];

        <de.mud.telnet.TelnetProtocolHandler: byte[] one> = $r0;

        $r0 = newarray (byte)[2];

        $r0[0] = -1;

        $r0[1] = -5;

        <de.mud.telnet.TelnetProtocolHandler: byte[] IACWILL> = $r0;

        $r0 = newarray (byte)[2];

        $r0[0] = -1;

        $r0[1] = -4;

        <de.mud.telnet.TelnetProtocolHandler: byte[] IACWONT> = $r0;

        $r0 = newarray (byte)[2];

        $r0[0] = -1;

        $r0[1] = -3;

        <de.mud.telnet.TelnetProtocolHandler: byte[] IACDO> = $r0;

        $r0 = newarray (byte)[2];

        $r0[0] = -1;

        $r0[1] = -2;

        <de.mud.telnet.TelnetProtocolHandler: byte[] IACDONT> = $r0;

        $r0 = newarray (byte)[2];

        $r0[0] = -1;

        $r0[1] = -6;

        <de.mud.telnet.TelnetProtocolHandler: byte[] IACSB> = $r0;

        $r0 = newarray (byte)[2];

        $r0[0] = -1;

        $r0[1] = -16;

        <de.mud.telnet.TelnetProtocolHandler: byte[] IACSE> = $r0;

        return;
    }

    public void <init>()
    {
        de.mud.telnet.TelnetProtocolHandler $r0;
        byte[] $r1;

        $r0 := @this: de.mud.telnet.TelnetProtocolHandler;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[0];

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] tempbuf> = $r1;

        $r1 = newarray (byte)[2];

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] crlf> = $r1;

        $r1 = newarray (byte)[2];

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] cr> = $r1;

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 0;

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void reset()>();

        $r1 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] crlf>;

        $r1[0] = 13;

        $r1 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] crlf>;

        $r1[1] = 10;

        $r1 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] cr>;

        $r1[0] = 13;

        $r1 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] cr>;

        $r1[1] = 0;

        return;
    }

    private void handle_sb(byte, byte[]) throws java.io.IOException
    {
        de.mud.telnet.TelnetProtocolHandler $r0;
        byte $b0;
        byte[] $r1;
        java.lang.String $r2, $r3;
        int $i1, $i2;
        java.io.PrintStream $r4;
        boolean $z0;
        java.lang.String[] $r5;

        $r0 := @this: de.mud.telnet.TelnetProtocolHandler;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: byte[];

        lookupswitch($b0)
        {
            case 24: goto label02;
            case 42: goto label04;
            default: goto label01;
        };

     label01:
        return;

     label02:
        $i2 = lengthof $r1;

        if $i2 <= 0 goto label09;

        $b0 = $r1[0];

        if $b0 != 1 goto label10;

        $r1 = <de.mud.telnet.TelnetProtocolHandler: byte[] IACSB>;

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte[])>($r1);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(24);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(0);

        $r3 = virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: java.lang.String getTerminalType()>();

        $r2 = $r3;

        if $r3 != null goto label03;

        $r2 = "dumb";

     label03:
        $r1 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte[])>($r1);

        $r1 = <de.mud.telnet.TelnetProtocolHandler: byte[] IACSE>;

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte[])>($r1);

        return;

     label04:
        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Got SB CHARSET");

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "US-ASCII");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("TTABLE ");

        if $z0 == 0 goto label05;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(7);

     label05:
        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, 0);

        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>($r3);

        $r3 = virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: java.lang.String getCharsetName()>();

        $i2 = lengthof $r5;

        $i1 = 0;

     label06:
        if $i1 >= $i2 goto label08;

        $r2 = $r5[$i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label07;

        $r1 = <de.mud.telnet.TelnetProtocolHandler: byte[] IACSB>;

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte[])>($r1);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(42);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(2);

        $r1 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte[])>($r1);

        $r1 = <de.mud.telnet.TelnetProtocolHandler: byte[] IACSE>;

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte[])>($r1);

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Sent our charset!");

        return;

     label07:
        $i1 = $i1 + 1;

        goto label06;

     label08:
        $r1 = <de.mud.telnet.TelnetProtocolHandler: byte[] IACSB>;

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte[])>($r1);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(42);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(3);

        $r1 = <de.mud.telnet.TelnetProtocolHandler: byte[] IACSE>;

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte[])>($r1);

        return;

     label09:
        return;

     label10:
        return;
    }

    private void write(byte) throws java.io.IOException
    {
        de.mud.telnet.TelnetProtocolHandler $r0;
        byte $b0;
        byte[] $r1;

        $r0 := @this: de.mud.telnet.TelnetProtocolHandler;

        $b0 := @parameter0: byte;

        $r1 = <de.mud.telnet.TelnetProtocolHandler: byte[] one>;

        $r1[0] = $b0;

        $r1 = <de.mud.telnet.TelnetProtocolHandler: byte[] one>;

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte[])>($r1);

        return;
    }

    protected abstract java.lang.String getCharsetName();

    protected abstract java.lang.String getTerminalType();

    protected abstract int[] getWindowSize();

    public void inputfeed(byte[], int, int)
    {
        de.mud.telnet.TelnetProtocolHandler $r0;
        byte[] $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2;

        $r0 := @this: de.mud.telnet.TelnetProtocolHandler;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] tempbuf>;

        $i2 = lengthof $r2;

        $i2 = $i2 + $i1;

        $r2 = newarray (byte)[$i2];

        $r4 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] tempbuf>;

        $r3 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] tempbuf>;

        $i2 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, 0, $i2);

        $r4 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] tempbuf>;

        $i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r2, $i2, $i1);

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] tempbuf> = $r2;

        return;
    }

    public int negotiate(byte[], int) throws java.io.IOException
    {
        de.mud.telnet.TelnetProtocolHandler $r0;
        byte[] $r1, $r2, $r3, $r5, $r9, $r10;
        int $i0, $i2, $i3, $i4, $i6;
        byte $b1, $b5, $b7;
        boolean $z0;
        int[] $r4;
        java.io.PrintStream $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        $r0 := @this: de.mud.telnet.TelnetProtocolHandler;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r3 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] tempbuf>;

        $i3 = lengthof $r3;

        $r2 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] tempbuf>;

        $r3 = newarray (byte)[3];

        $z0 = 0;

        if $i3 != 0 goto label67;

        return -1;

     label01:
        if $b1 != -1 goto label05;

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 1;

        $z0 = 1;

        $i2 = $i6;

     label02:
        if $z0 != 0 goto label66;

        if $i2 >= $i3 goto label66;

        $i6 = lengthof $r1;

        if $i4 >= $i6 goto label66;

        $i6 = $i2 + 1;

        $b1 = $r2[$i2];

        if $b1 < 128 goto label03;

        $i2 = $b1 + -256;

        $b1 = (byte) $i2;

     label03:
        $b5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state>;

        lookupswitch($b5)
        {
            case 0: goto label01;
            case 1: goto label06;
            case 2: goto label53;
            case 3: goto label15;
            case 4: goto label32;
            case 5: goto label24;
            case 6: goto label43;
            case 7: goto label51;
            case 8: goto label56;
            case 9: goto label60;
            default: goto label04;
        };

     label04:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 0;

        $i2 = $i6;

        goto label02;

     label05:
        $r1[$i4] = $b1;

        $i4 = $i4 + 1;

        $i2 = $i6;

        goto label02;

     label06:
        lookupswitch($b1)
        {
            case -17: goto label13;
            case -6: goto label14;
            case -5: goto label09;
            case -4: goto label10;
            case -3: goto label12;
            case -2: goto label11;
            case -1: goto label08;
            default: goto label07;
        };

     label07:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 0;

        $i2 = $i6;

        goto label02;

     label08:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 0;

        $r1[$i4] = -1;

        $i4 = $i4 + 1;

        $i2 = $i6;

        goto label02;

     label09:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 3;

        $i2 = $i6;

        goto label02;

     label10:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 5;

        $i2 = $i6;

        goto label02;

     label11:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 6;

        $i2 = $i6;

        goto label02;

     label12:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 4;

        $i2 = $i6;

        goto label02;

     label13:
        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void notifyEndOfRecord()>();

        $z0 = 1;

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 0;

        $i2 = $i6;

        goto label02;

     label14:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 2;

        $i2 = $i6;

        goto label02;

     label15:
        lookupswitch($b1)
        {
            case 0: goto label23;
            case 1: goto label20;
            case 3: goto label21;
            case 25: goto label22;
            default: goto label16;
        };

     label16:
        $b5 = -2;

     label17:
        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sentDX>;

        $i2 = $b1 + 128;

        $b7 = $r5[$i2];

        if $b5 != $b7 goto label18;

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] receivedWX>;

        $i2 = $b1 + 128;

        $b7 = $r5[$i2];

        if -5 == $b7 goto label19;

     label18:
        $r3[0] = -1;

        $r3[1] = $b5;

        $r3[2] = $b1;

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte[])>($r3);

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sentDX>;

        $i2 = $b1 + 128;

        $r5[$i2] = $b5;

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] receivedWX>;

        $i2 = $b1 + 128;

        $r5[$i2] = -5;

     label19:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 0;

        $i2 = $i6;

        goto label02;

     label20:
        $b5 = -3;

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void setLocalEcho(boolean)>(0);

        goto label17;

     label21:
        $b5 = -3;

        goto label17;

     label22:
        $b5 = -3;

        goto label17;

     label23:
        $b5 = -3;

        goto label17;

     label24:
        lookupswitch($b1)
        {
            case 0: goto label31;
            case 1: goto label28;
            case 3: goto label29;
            case 25: goto label30;
            default: goto label25;
        };

     label25:
        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sentDX>;

        $i2 = $b1 + 128;

        $b7 = $r5[$i2];

        if -2 != $b7 goto label26;

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] receivedWX>;

        $i2 = $b1 + 128;

        $b7 = $r5[$i2];

        if -4 == $b7 goto label27;

     label26:
        $r3[0] = -1;

        $r3[1] = -2;

        $r3[2] = $b1;

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte[])>($r3);

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sentDX>;

        $i2 = $b1 + 128;

        $r5[$i2] = -2;

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] receivedWX>;

        $i2 = $b1 + 128;

        $r5[$i2] = -5;

     label27:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 0;

        $i2 = $i6;

        goto label02;

     label28:
        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void setLocalEcho(boolean)>(1);

        goto label25;

     label29:
        goto label25;

     label30:
        goto label25;

     label31:
        goto label25;

     label32:
        lookupswitch($b1)
        {
            case 0: goto label40;
            case 1: goto label37;
            case 3: goto label38;
            case 24: goto label39;
            case 31: goto label41;
            default: goto label33;
        };

     label33:
        $b7 = -4;

     label34:
        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sentWX>;

        $i2 = $b1 + 128;

        $b5 = $r5[$i2];

        if $b7 != $b5 goto label35;

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] receivedDX>;

        $i2 = $b1 + 128;

        $b5 = $r5[$i2];

        if -3 == $b5 goto label36;

     label35:
        $r3[0] = -1;

        $r3[1] = $b7;

        $r3[2] = $b1;

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte[])>($r3);

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sentWX>;

        $i2 = $b1 + 128;

        $r5[$i2] = $b7;

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] receivedDX>;

        $i2 = $b1 + 128;

        $r5[$i2] = -3;

     label36:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 0;

        $i2 = $i6;

        goto label02;

     label37:
        $b7 = -5;

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void setLocalEcho(boolean)>(1);

        goto label34;

     label38:
        $b7 = -5;

        goto label34;

     label39:
        $b7 = -5;

        goto label34;

     label40:
        $b7 = -5;

        goto label34;

     label41:
        $r4 = virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: int[] getWindowSize()>();

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] receivedDX>;

        $r5[$b1] = -3;

        if $r4 != null goto label42;

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(-1);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(-4);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(31);

        $b7 = -4;

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sentWX>;

        $r5[$b1] = -4;

        goto label34;

     label42:
        $b7 = -5;

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sentWX>;

        $r5[$b1] = -5;

        $r3[0] = -1;

        $r3[1] = -5;

        $r3[2] = 31;

        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte[])>($r3);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(-1);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(-6);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(31);

        $i2 = $r4[0];

        $i2 = $i2 >> 8;

        $b5 = (byte) $i2;

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>($b5);

        $i2 = $r4[0];

        $i2 = $i2 & 255;

        $b5 = (byte) $i2;

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>($b5);

        $i2 = $r4[1];

        $i2 = $i2 >> 8;

        $b5 = (byte) $i2;

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>($b5);

        $i2 = $r4[1];

        $i2 = $i2 & 255;

        $b5 = (byte) $i2;

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>($b5);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(-1);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(-16);

        goto label34;

     label43:
        lookupswitch($b1)
        {
            case 0: goto label50;
            case 1: goto label47;
            case 3: goto label48;
            case 31: goto label49;
            default: goto label44;
        };

     label44:
        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sentWX>;

        $i2 = $b1 + 128;

        $b7 = $r5[$i2];

        if -4 != $b7 goto label45;

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] receivedDX>;

        $i2 = $b1 + 128;

        $b7 = $r5[$i2];

        if -2 == $b7 goto label46;

     label45:
        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(-1);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(-4);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>($b1);

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sentWX>;

        $i2 = $b1 + 128;

        $r5[$i2] = -4;

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] receivedDX>;

        $i2 = $b1 + 128;

        $r5[$i2] = -2;

     label46:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 0;

        $i2 = $i6;

        goto label02;

     label47:
        virtualinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void setLocalEcho(boolean)>(0);

        goto label44;

     label48:
        goto label44;

     label49:
        goto label44;

     label50:
        goto label44;

     label51:
        if $b1 != -1 goto label52;

        $r5 = newarray (byte)[0];

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf> = $r5;

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte current_sb> = $b1;

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 8;

        $i2 = $i6;

        goto label02;

     label52:
        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(bad) ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r8);

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 0;

        $i2 = $i6;

        goto label02;

     label53:
        lookupswitch($b1)
        {
            case -1: goto label55;
            default: goto label54;
        };

     label54:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte current_sb> = $b1;

        $r5 = newarray (byte)[0];

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf> = $r5;

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 8;

        $i2 = $i6;

        goto label02;

     label55:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 7;

        $i2 = $i6;

        goto label02;

     label56:
        lookupswitch($b1)
        {
            case -1: goto label59;
            default: goto label57;
        };

     label57:
        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf>;

        $i2 = lengthof $r5;

        $i2 = $i2 + 1;

        $r5 = newarray (byte)[$i2];

        $r9 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf>;

        $r10 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf>;

        $i2 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r5, 0, $i2);

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf> = $r5;

        $r10 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf>;

        $r9 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf>;

        $i2 = lengthof $r9;

        $i2 = $i2 + -1;

        $r10[$i2] = $b1;

     label58:
        $i2 = $i6;

        goto label02;

     label59:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 9;

        goto label58;

     label60:
        lookupswitch($b1)
        {
            case -16: goto label64;
            case -6: goto label65;
            case -1: goto label63;
            default: goto label61;
        };

     label61:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 0;

     label62:
        $i2 = $i6;

        goto label02;

     label63:
        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 8;

        $r10 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf>;

        $i2 = lengthof $r10;

        $i2 = $i2 + 1;

        $r10 = newarray (byte)[$i2];

        $r9 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf>;

        $r5 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf>;

        $i2 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r10, 0, $i2);

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf> = $r10;

        $r10 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf>;

        $r9 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf>;

        $i2 = lengthof $r9;

        $i2 = $i2 + -1;

        $r10[$i2] = -1;

        goto label62;

     label64:
        $b7 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte current_sb>;

        $r10 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf>;

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void handle_sb(byte,byte[])>($b7, $r10);

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte current_sb> = 0;

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 0;

        goto label62;

     label65:
        $b7 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte current_sb>;

        $r10 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sbbuf>;

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void handle_sb(byte,byte[])>($b7, $r10);

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 2;

        goto label62;

     label66:
        $i6 = $i3 - $i2;

        $r10 = newarray (byte)[$i6];

        $r9 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] tempbuf>;

        $i6 = $i3 - $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i2, $r10, 0, $i6);

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] tempbuf> = $r10;

        $i4 = $i4 - $i0;

        return $i4;

     label67:
        $i4 = $i0;

        $i2 = 0;

        goto label02;
    }

    protected abstract void notifyEndOfRecord();

    public void reset()
    {
        de.mud.telnet.TelnetProtocolHandler $r0;
        byte[] $r1;

        $r0 := @this: de.mud.telnet.TelnetProtocolHandler;

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte neg_state> = 0;

        $r1 = newarray (byte)[256];

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] receivedDX> = $r1;

        $r1 = newarray (byte)[256];

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sentDX> = $r1;

        $r1 = newarray (byte)[256];

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] receivedWX> = $r1;

        $r1 = newarray (byte)[256];

        $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] sentWX> = $r1;

        return;
    }

    protected abstract void setLocalEcho(boolean);

    public void setWindowSize(int, int) throws java.io.IOException
    {
        de.mud.telnet.TelnetProtocolHandler $r0;
        int $i0, $i1, $i3;
        byte[] $r1;
        byte $b2;
        java.io.PrintStream $r2;

        $r0 := @this: de.mud.telnet.TelnetProtocolHandler;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = $r0.<de.mud.telnet.TelnetProtocolHandler: byte[] receivedDX>;

        $b2 = $r1[31];

        if $b2 == -3 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("not allowed to send NAWS? (DONT NAWS)");

        return;

     label1:
        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(-1);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(-6);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(31);

        $i3 = $i0 >> 8;

        $b2 = (byte) $i3;

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>($b2);

        $i3 = $i0 & 255;

        $b2 = (byte) $i3;

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>($b2);

        $i3 = $i1 >> 8;

        $b2 = (byte) $i3;

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>($b2);

        $i3 = $i1 & 255;

        $b2 = (byte) $i3;

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>($b2);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(-1);

        specialinvoke $r0.<de.mud.telnet.TelnetProtocolHandler: void write(byte)>(-16);

        return;
    }

    protected abstract void write(byte[]) throws java.io.IOException;
}
