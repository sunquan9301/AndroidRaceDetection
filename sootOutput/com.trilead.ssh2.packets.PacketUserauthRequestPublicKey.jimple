public class com.trilead.ssh2.packets.PacketUserauthRequestPublicKey extends java.lang.Object
{
    byte[] payload;
    byte[] pk;
    java.lang.String pkAlgoName;
    java.lang.String serviceName;
    byte[] sig;
    java.lang.String userName;

    public void <init>(java.lang.String, java.lang.String, java.lang.String, byte[], byte[])
    {
        com.trilead.ssh2.packets.PacketUserauthRequestPublicKey $r0;
        java.lang.String $r1, $r2, $r3;
        byte[] $r4, $r5;

        $r0 := @this: com.trilead.ssh2.packets.PacketUserauthRequestPublicKey;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: byte[];

        $r5 := @parameter4: byte[];

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: java.lang.String serviceName> = $r1;

        $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: java.lang.String userName> = $r2;

        $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: java.lang.String pkAlgoName> = $r3;

        $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: byte[] pk> = $r4;

        $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: byte[] sig> = $r5;

        return;
    }

    public byte[] getPayload()
    {
        com.trilead.ssh2.packets.PacketUserauthRequestPublicKey $r0;
        com.trilead.ssh2.packets.TypesWriter $r1;
        byte[] $r2, $r4;
        java.lang.String $r3;
        int $i0;

        $r0 := @this: com.trilead.ssh2.packets.PacketUserauthRequestPublicKey;

        $r2 = $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: byte[] payload>;

        if $r2 != null goto label1;

        $r1 = new com.trilead.ssh2.packets.TypesWriter;

        specialinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void <init>()>();

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeByte(int)>(50);

        $r3 = $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: java.lang.String userName>;

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>($r3);

        $r3 = $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: java.lang.String serviceName>;

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>($r3);

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>("publickey");

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeBoolean(boolean)>(1);

        $r3 = $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: java.lang.String pkAlgoName>;

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>($r3);

        $r4 = $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: byte[] pk>;

        $r2 = $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: byte[] pk>;

        $i0 = lengthof $r2;

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeString(byte[],int,int)>($r4, 0, $i0);

        $r4 = $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: byte[] sig>;

        $r2 = $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: byte[] sig>;

        $i0 = lengthof $r2;

        virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: void writeString(byte[],int,int)>($r4, 0, $i0);

        $r2 = virtualinvoke $r1.<com.trilead.ssh2.packets.TypesWriter: byte[] getBytes()>();

        $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: byte[] payload> = $r2;

     label1:
        $r4 = $r0.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: byte[] payload>;

        return $r4;
    }
}
