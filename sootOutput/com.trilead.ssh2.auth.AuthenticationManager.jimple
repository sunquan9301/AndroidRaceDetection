public class com.trilead.ssh2.auth.AuthenticationManager extends java.lang.Object implements com.trilead.ssh2.transport.MessageHandler
{
    boolean authenticated;
    java.lang.String banner;
    boolean connectionClosed;
    boolean initDone;
    boolean isPartialSuccess;
    java.util.Vector packets;
    java.lang.String[] remainingMethods;
    com.trilead.ssh2.transport.TransportManager tm;

    public void <init>(com.trilead.ssh2.transport.TransportManager)
    {
        com.trilead.ssh2.auth.AuthenticationManager $r0;
        com.trilead.ssh2.transport.TransportManager $r1;
        java.util.Vector $r2;
        java.lang.String[] $r3;

        $r0 := @this: com.trilead.ssh2.auth.AuthenticationManager;

        $r1 := @parameter0: com.trilead.ssh2.transport.TransportManager;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.util.Vector packets> = $r2;

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean connectionClosed> = 0;

        $r3 = newarray (java.lang.String)[0];

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.lang.String[] remainingMethods> = $r3;

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean isPartialSuccess> = 0;

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean authenticated> = 0;

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean initDone> = 0;

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm> = $r1;

        return;
    }

    private boolean initialize(java.lang.String) throws java.io.IOException
    {
        com.trilead.ssh2.auth.AuthenticationManager $r0;
        java.lang.String $r1;
        com.trilead.ssh2.packets.PacketUserauthFailure $r2;
        com.trilead.ssh2.packets.PacketServiceRequest $r3;
        com.trilead.ssh2.packets.PacketUserauthRequestNone $r4;
        boolean $z0;
        byte[] $r5;
        com.trilead.ssh2.transport.TransportManager $r6;
        com.trilead.ssh2.packets.PacketServiceAccept $r7;
        int $i0;
        byte $b1;
        java.lang.String[] $r8;
        java.io.IOException $r9;
        java.lang.StringBuilder $r10;

        $r0 := @this: com.trilead.ssh2.auth.AuthenticationManager;

        $r1 := @parameter0: java.lang.String;

        $z0 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean initDone>;

        if $z0 != 0 goto label3;

        $r6 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        virtualinvoke $r6.<com.trilead.ssh2.transport.TransportManager: void registerMessageHandler(com.trilead.ssh2.transport.MessageHandler,int,int)>($r0, 0, 255);

        $r3 = new com.trilead.ssh2.packets.PacketServiceRequest;

        specialinvoke $r3.<com.trilead.ssh2.packets.PacketServiceRequest: void <init>(java.lang.String)>("ssh-userauth");

        $r6 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        $r5 = virtualinvoke $r3.<com.trilead.ssh2.packets.PacketServiceRequest: byte[] getPayload()>();

        virtualinvoke $r6.<com.trilead.ssh2.transport.TransportManager: void sendMessage(byte[])>($r5);

        $r4 = new com.trilead.ssh2.packets.PacketUserauthRequestNone;

        specialinvoke $r4.<com.trilead.ssh2.packets.PacketUserauthRequestNone: void <init>(java.lang.String,java.lang.String)>("ssh-connection", $r1);

        $r6 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        $r5 = virtualinvoke $r4.<com.trilead.ssh2.packets.PacketUserauthRequestNone: byte[] getPayload()>();

        virtualinvoke $r6.<com.trilead.ssh2.transport.TransportManager: void sendMessage(byte[])>($r5);

        $r5 = virtualinvoke $r0.<com.trilead.ssh2.auth.AuthenticationManager: byte[] getNextMessage()>();

        $r7 = new com.trilead.ssh2.packets.PacketServiceAccept;

        $i0 = lengthof $r5;

        specialinvoke $r7.<com.trilead.ssh2.packets.PacketServiceAccept: void <init>(byte[],int,int)>($r5, 0, $i0);

        $r5 = virtualinvoke $r0.<com.trilead.ssh2.auth.AuthenticationManager: byte[] getNextMessage()>();

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean initDone> = 1;

        $b1 = $r5[0];

        if $b1 != 52 goto label1;

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean authenticated> = 1;

        $r6 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        virtualinvoke $r6.<com.trilead.ssh2.transport.TransportManager: void removeMessageHandler(com.trilead.ssh2.transport.MessageHandler,int,int)>($r0, 0, 255);

        return 1;

     label1:
        $b1 = $r5[0];

        if $b1 != 51 goto label2;

        $r2 = new com.trilead.ssh2.packets.PacketUserauthFailure;

        $i0 = lengthof $r5;

        specialinvoke $r2.<com.trilead.ssh2.packets.PacketUserauthFailure: void <init>(byte[],int,int)>($r5, 0, $i0);

        $r8 = virtualinvoke $r2.<com.trilead.ssh2.packets.PacketUserauthFailure: java.lang.String[] getAuthThatCanContinue()>();

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.lang.String[] remainingMethods> = $r8;

        $z0 = virtualinvoke $r2.<com.trilead.ssh2.packets.PacketUserauthFailure: boolean isPartialSuccess()>();

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean isPartialSuccess> = $z0;

        return 0;

     label2:
        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected SSH message (type ");

        $b1 = $r5[0];

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r9;

     label3:
        $z0 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean authenticated>;

        return $z0;
    }

    public boolean authenticateInteractive(java.lang.String, java.lang.String[], com.trilead.ssh2.InteractiveCallback) throws java.io.IOException
    {
        com.trilead.ssh2.auth.AuthenticationManager $r0;
        java.lang.String $r1, $r13;
        java.lang.String[] $r2;
        com.trilead.ssh2.InteractiveCallback $r3;
        java.io.IOException $r4, $r10;
        com.trilead.ssh2.packets.PacketUserauthFailure $r5;
        com.trilead.ssh2.packets.PacketUserauthInfoRequest $r6;
        com.trilead.ssh2.packets.PacketUserauthInfoResponse $r7;
        com.trilead.ssh2.packets.PacketUserauthRequestInteractive $r8;
        boolean $z0;
        com.trilead.ssh2.transport.TransportManager $r9;
        java.lang.Throwable $r11;
        byte[] $r12;
        byte $b0;
        int $i1;
        boolean[] $r14;
        java.lang.Exception $r15;
        java.lang.StringBuilder $r16;

        $r0 := @this: com.trilead.ssh2.auth.AuthenticationManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: com.trilead.ssh2.InteractiveCallback;

     label01:
        specialinvoke $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean initialize(java.lang.String)>($r1);

        $z0 = virtualinvoke $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean methodPossible(java.lang.String)>("keyboard-interactive");

     label02:
        if $z0 != 0 goto label05;

     label03:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Authentication method keyboard-interactive not supported by the server at this stage.");

        throw $r4;

     label04:
        $r4 := @caughtexception;

        $r9 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        virtualinvoke $r9.<com.trilead.ssh2.transport.TransportManager: void close(java.lang.Throwable,boolean)>($r4, 0);

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Keyboard-interactive authentication failed.");

        $r11 = virtualinvoke $r10.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r4);

        $r10 = (java.io.IOException) $r11;

        throw $r10;

     label05:
        if $r2 != null goto label06;

        $r2 = newarray (java.lang.String)[0];

     label06:
        $r8 = new com.trilead.ssh2.packets.PacketUserauthRequestInteractive;

     label07:
        specialinvoke $r8.<com.trilead.ssh2.packets.PacketUserauthRequestInteractive: void <init>(java.lang.String,java.lang.String,java.lang.String[])>("ssh-connection", $r1, $r2);

        $r9 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        $r12 = virtualinvoke $r8.<com.trilead.ssh2.packets.PacketUserauthRequestInteractive: byte[] getPayload()>();

        virtualinvoke $r9.<com.trilead.ssh2.transport.TransportManager: void sendMessage(byte[])>($r12);

     label08:
        $r12 = virtualinvoke $r0.<com.trilead.ssh2.auth.AuthenticationManager: byte[] getNextMessage()>();

     label09:
        $b0 = $r12[0];

        if $b0 != 52 goto label12;

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean authenticated> = 1;

     label10:
        $r9 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        virtualinvoke $r9.<com.trilead.ssh2.transport.TransportManager: void removeMessageHandler(com.trilead.ssh2.transport.MessageHandler,int,int)>($r0, 0, 255);

     label11:
        return 1;

     label12:
        $b0 = $r12[0];

        if $b0 != 51 goto label15;

        $r5 = new com.trilead.ssh2.packets.PacketUserauthFailure;

     label13:
        $i1 = lengthof $r12;

        specialinvoke $r5.<com.trilead.ssh2.packets.PacketUserauthFailure: void <init>(byte[],int,int)>($r12, 0, $i1);

        $r2 = virtualinvoke $r5.<com.trilead.ssh2.packets.PacketUserauthFailure: java.lang.String[] getAuthThatCanContinue()>();

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.lang.String[] remainingMethods> = $r2;

        $z0 = virtualinvoke $r5.<com.trilead.ssh2.packets.PacketUserauthFailure: boolean isPartialSuccess()>();

     label14:
        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean isPartialSuccess> = $z0;

        return 0;

     label15:
        $b0 = $r12[0];

        if $b0 != 60 goto label25;

        $r6 = new com.trilead.ssh2.packets.PacketUserauthInfoRequest;

     label16:
        $i1 = lengthof $r12;

        specialinvoke $r6.<com.trilead.ssh2.packets.PacketUserauthInfoRequest: void <init>(byte[],int,int)>($r12, 0, $i1);

     label17:
        $r1 = virtualinvoke $r6.<com.trilead.ssh2.packets.PacketUserauthInfoRequest: java.lang.String getName()>();

        $r13 = virtualinvoke $r6.<com.trilead.ssh2.packets.PacketUserauthInfoRequest: java.lang.String getInstruction()>();

        $i1 = virtualinvoke $r6.<com.trilead.ssh2.packets.PacketUserauthInfoRequest: int getNumPrompts()>();

        $r2 = virtualinvoke $r6.<com.trilead.ssh2.packets.PacketUserauthInfoRequest: java.lang.String[] getPrompt()>();

        $r14 = virtualinvoke $r6.<com.trilead.ssh2.packets.PacketUserauthInfoRequest: boolean[] getEcho()>();

        $r2 = interfaceinvoke $r3.<com.trilead.ssh2.InteractiveCallback: java.lang.String[] replyToChallenge(java.lang.String,java.lang.String,int,java.lang.String[],boolean[])>($r1, $r13, $i1, $r2, $r14);

     label18:
        if $r2 != null goto label24;

        $r10 = new java.io.IOException;

     label19:
        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Your callback may not return NULL!");

        throw $r10;

     label20:
        $r15 := @caughtexception;

     label21:
        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Exception in callback.");

        $r11 = virtualinvoke $r10.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r15);

     label22:
        $r10 = (java.io.IOException) $r11;

     label23:
        throw $r10;

     label24:
        $r7 = new com.trilead.ssh2.packets.PacketUserauthInfoResponse;

        specialinvoke $r7.<com.trilead.ssh2.packets.PacketUserauthInfoResponse: void <init>(java.lang.String[])>($r2);

        $r9 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        $r12 = virtualinvoke $r7.<com.trilead.ssh2.packets.PacketUserauthInfoResponse: byte[] getPayload()>();

        virtualinvoke $r9.<com.trilead.ssh2.transport.TransportManager: void sendMessage(byte[])>($r12);

        goto label08;

     label25:
        $r10 = new java.io.IOException;

     label26:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected SSH message (type ");

        $b0 = $r12[0];

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b0);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r10;

     label27:
        nop;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.io.IOException from label03 to label04 with label04;
        catch java.io.IOException from label07 to label09 with label04;
        catch java.io.IOException from label10 to label11 with label04;
        catch java.io.IOException from label13 to label14 with label04;
        catch java.io.IOException from label16 to label17 with label04;
        catch java.lang.Exception from label17 to label18 with label20;
        catch java.io.IOException from label19 to label20 with label04;
        catch java.io.IOException from label21 to label22 with label04;
        catch java.io.IOException from label23 to label25 with label04;
        catch java.io.IOException from label26 to label27 with label04;
    }

    public boolean authenticateNone(java.lang.String) throws java.io.IOException
    {
        com.trilead.ssh2.auth.AuthenticationManager $r0;
        java.lang.String $r1;
        java.io.IOException $r2, $r5;
        boolean $z0;
        java.lang.Throwable $r3;
        com.trilead.ssh2.transport.TransportManager $r4;

        $r0 := @this: com.trilead.ssh2.auth.AuthenticationManager;

        $r1 := @parameter0: java.lang.String;

     label1:
        specialinvoke $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean initialize(java.lang.String)>($r1);

     label2:
        $z0 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean authenticated>;

        return $z0;

     label3:
        $r2 := @caughtexception;

        $r4 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        virtualinvoke $r4.<com.trilead.ssh2.transport.TransportManager: void close(java.lang.Throwable,boolean)>($r2, 0);

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("None authentication failed.");

        $r3 = virtualinvoke $r5.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        $r5 = (java.io.IOException) $r3;

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean authenticatePassword(java.lang.String, java.lang.String) throws java.io.IOException
    {
        com.trilead.ssh2.auth.AuthenticationManager $r0;
        java.lang.String $r1, $r2;
        java.io.IOException $r3, $r7;
        com.trilead.ssh2.packets.PacketUserauthFailure $r4;
        com.trilead.ssh2.packets.PacketUserauthRequestPassword $r5;
        boolean $z0;
        com.trilead.ssh2.transport.TransportManager $r6;
        java.lang.Throwable $r8;
        byte[] $r9;
        byte $b0;
        int $i1;
        java.lang.String[] $r10;
        java.lang.StringBuilder $r11;

        $r0 := @this: com.trilead.ssh2.auth.AuthenticationManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

     label01:
        specialinvoke $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean initialize(java.lang.String)>($r1);

        $z0 = virtualinvoke $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean methodPossible(java.lang.String)>("password");

     label02:
        if $z0 != 0 goto label05;

     label03:
        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Authentication method password not supported by the server at this stage.");

        throw $r3;

     label04:
        $r3 := @caughtexception;

        $r6 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        virtualinvoke $r6.<com.trilead.ssh2.transport.TransportManager: void close(java.lang.Throwable,boolean)>($r3, 0);

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Password authentication failed.");

        $r8 = virtualinvoke $r7.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r3);

        $r7 = (java.io.IOException) $r8;

        throw $r7;

     label05:
        $r5 = new com.trilead.ssh2.packets.PacketUserauthRequestPassword;

     label06:
        specialinvoke $r5.<com.trilead.ssh2.packets.PacketUserauthRequestPassword: void <init>(java.lang.String,java.lang.String,java.lang.String)>("ssh-connection", $r1, $r2);

        $r6 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        $r9 = virtualinvoke $r5.<com.trilead.ssh2.packets.PacketUserauthRequestPassword: byte[] getPayload()>();

        virtualinvoke $r6.<com.trilead.ssh2.transport.TransportManager: void sendMessage(byte[])>($r9);

        $r9 = virtualinvoke $r0.<com.trilead.ssh2.auth.AuthenticationManager: byte[] getNextMessage()>();

     label07:
        $b0 = $r9[0];

        if $b0 != 52 goto label10;

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean authenticated> = 1;

     label08:
        $r6 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        virtualinvoke $r6.<com.trilead.ssh2.transport.TransportManager: void removeMessageHandler(com.trilead.ssh2.transport.MessageHandler,int,int)>($r0, 0, 255);

     label09:
        return 1;

     label10:
        $b0 = $r9[0];

        if $b0 != 51 goto label13;

        $r4 = new com.trilead.ssh2.packets.PacketUserauthFailure;

     label11:
        $i1 = lengthof $r9;

        specialinvoke $r4.<com.trilead.ssh2.packets.PacketUserauthFailure: void <init>(byte[],int,int)>($r9, 0, $i1);

        $r10 = virtualinvoke $r4.<com.trilead.ssh2.packets.PacketUserauthFailure: java.lang.String[] getAuthThatCanContinue()>();

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.lang.String[] remainingMethods> = $r10;

        $z0 = virtualinvoke $r4.<com.trilead.ssh2.packets.PacketUserauthFailure: boolean isPartialSuccess()>();

     label12:
        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean isPartialSuccess> = $z0;

        return 0;

     label13:
        $r7 = new java.io.IOException;

     label14:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected SSH message (type ");

        $b0 = $r9[0];

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b0);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r2);

        throw $r7;

     label15:
        nop;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.io.IOException from label03 to label04 with label04;
        catch java.io.IOException from label06 to label07 with label04;
        catch java.io.IOException from label08 to label09 with label04;
        catch java.io.IOException from label11 to label12 with label04;
        catch java.io.IOException from label14 to label15 with label04;
    }

    public boolean authenticatePublicKey(java.lang.String, java.security.KeyPair, java.security.SecureRandom) throws java.io.IOException
    {
        com.trilead.ssh2.auth.AuthenticationManager $r0;
        java.lang.String $r1, $r22;
        java.security.KeyPair $r2;
        java.security.SecureRandom $r3;
        com.trilead.ssh2.packets.PacketUserauthRequestPublicKey $r4;
        java.io.IOException $r5, $r10;
        com.trilead.ssh2.packets.PacketUserauthFailure $r6;
        com.trilead.ssh2.packets.TypesWriter $r7;
        java.security.PrivateKey $r8;
        boolean $z0;
        com.trilead.ssh2.transport.TransportManager $r9;
        java.lang.Throwable $r11;
        java.security.interfaces.DSAPrivateKey $r12;
        java.security.PublicKey $r13;
        java.security.interfaces.DSAPublicKey $r14;
        byte[] $r15, $r16;
        int $i0;
        byte $b1;
        java.security.interfaces.RSAPrivateKey $r17;
        java.security.interfaces.RSAPublicKey $r18;
        java.security.interfaces.ECPrivateKey $r19;
        java.lang.StringBuilder $r20;
        java.security.spec.ECParameterSpec $r21;
        java.security.interfaces.ECPublicKey $r23;
        java.lang.String[] $r24;

        $r0 := @this: com.trilead.ssh2.auth.AuthenticationManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.KeyPair;

        $r3 := @parameter2: java.security.SecureRandom;

        $r8 = virtualinvoke $r2.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

     label01:
        specialinvoke $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean initialize(java.lang.String)>($r1);

        $z0 = virtualinvoke $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean methodPossible(java.lang.String)>("publickey");

     label02:
        if $z0 != 0 goto label05;

     label03:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Authentication method publickey not supported by the server at this stage.");

        throw $r5;

     label04:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.io.IOException: void printStackTrace()>();

        $r9 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        virtualinvoke $r9.<com.trilead.ssh2.transport.TransportManager: void close(java.lang.Throwable,boolean)>($r5, 0);

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Publickey authentication failed.");

        $r11 = virtualinvoke $r10.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r5);

        $r10 = (java.io.IOException) $r11;

        throw $r10;

     label05:
        $z0 = $r8 instanceof java.security.interfaces.DSAPrivateKey;

        if $z0 == 0 goto label11;

        $r12 = (java.security.interfaces.DSAPrivateKey) $r8;

     label06:
        $r13 = virtualinvoke $r2.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r14 = (java.security.interfaces.DSAPublicKey) $r13;

        $r15 = staticinvoke <com.trilead.ssh2.signature.DSASHA1Verify: byte[] encodeSSHDSAPublicKey(java.security.interfaces.DSAPublicKey)>($r14);

        $r7 = new com.trilead.ssh2.packets.TypesWriter;

        specialinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void <init>()>();

        $r9 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        $r16 = virtualinvoke $r9.<com.trilead.ssh2.transport.TransportManager: byte[] getSessionIdentifier()>();

        $i0 = lengthof $r16;

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(byte[],int,int)>($r16, 0, $i0);

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeByte(int)>(50);

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>($r1);

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>("ssh-connection");

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>("publickey");

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeBoolean(boolean)>(1);

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>("ssh-dss");

        $i0 = lengthof $r15;

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(byte[],int,int)>($r15, 0, $i0);

        $r16 = virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: byte[] getBytes()>();

        $r16 = staticinvoke <com.trilead.ssh2.signature.DSASHA1Verify: byte[] generateSignature(byte[],java.security.interfaces.DSAPrivateKey,java.security.SecureRandom)>($r16, $r12, $r3);

        $r16 = staticinvoke <com.trilead.ssh2.signature.DSASHA1Verify: byte[] encodeSSHDSASignature(byte[])>($r16);

        $r4 = new com.trilead.ssh2.packets.PacketUserauthRequestPublicKey;

        specialinvoke $r4.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: void <init>(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>("ssh-connection", $r1, "ssh-dss", $r15, $r16);

        $r9 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        $r16 = virtualinvoke $r4.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: byte[] getPayload()>();

        virtualinvoke $r9.<com.trilead.ssh2.transport.TransportManager: void sendMessage(byte[])>($r16);

     label07:
        $r16 = virtualinvoke $r0.<com.trilead.ssh2.auth.AuthenticationManager: byte[] getNextMessage()>();

     label08:
        $b1 = $r16[0];

        if $b1 != 52 goto label16;

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean authenticated> = 1;

     label09:
        $r9 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        virtualinvoke $r9.<com.trilead.ssh2.transport.TransportManager: void removeMessageHandler(com.trilead.ssh2.transport.MessageHandler,int,int)>($r0, 0, 255);

     label10:
        return 1;

     label11:
        $z0 = $r8 instanceof java.security.interfaces.RSAPrivateKey;

        if $z0 == 0 goto label13;

     label12:
        $r17 = (java.security.interfaces.RSAPrivateKey) $r8;

        $r13 = virtualinvoke $r2.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r18 = (java.security.interfaces.RSAPublicKey) $r13;

        $r16 = staticinvoke <com.trilead.ssh2.signature.RSASHA1Verify: byte[] encodeSSHRSAPublicKey(java.security.interfaces.RSAPublicKey)>($r18);

        $r7 = new com.trilead.ssh2.packets.TypesWriter;

        specialinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void <init>()>();

        $r9 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        $r15 = virtualinvoke $r9.<com.trilead.ssh2.transport.TransportManager: byte[] getSessionIdentifier()>();

        $i0 = lengthof $r15;

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(byte[],int,int)>($r15, 0, $i0);

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeByte(int)>(50);

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>($r1);

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>("ssh-connection");

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>("publickey");

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeBoolean(boolean)>(1);

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>("ssh-rsa");

        $i0 = lengthof $r16;

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(byte[],int,int)>($r16, 0, $i0);

        $r15 = virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: byte[] getBytes()>();

        $r15 = staticinvoke <com.trilead.ssh2.signature.RSASHA1Verify: byte[] generateSignature(byte[],java.security.interfaces.RSAPrivateKey)>($r15, $r17);

        $r15 = staticinvoke <com.trilead.ssh2.signature.RSASHA1Verify: byte[] encodeSSHRSASignature(byte[])>($r15);

        $r4 = new com.trilead.ssh2.packets.PacketUserauthRequestPublicKey;

        specialinvoke $r4.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: void <init>(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>("ssh-connection", $r1, "ssh-rsa", $r16, $r15);

        $r9 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        $r16 = virtualinvoke $r4.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: byte[] getPayload()>();

        virtualinvoke $r9.<com.trilead.ssh2.transport.TransportManager: void sendMessage(byte[])>($r16);

        goto label07;

     label13:
        $z0 = $r8 instanceof java.security.interfaces.ECPrivateKey;

        if $z0 == 0 goto label15;

        $r19 = (java.security.interfaces.ECPrivateKey) $r8;

     label14:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ecdsa-sha2-");

        $r21 = interfaceinvoke $r19.<java.security.interfaces.ECPrivateKey: java.security.spec.ECParameterSpec getParams()>();

        $r22 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: java.lang.String getCurveName(java.security.spec.ECParameterSpec)>($r21);

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r2.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r23 = (java.security.interfaces.ECPublicKey) $r13;

        $r16 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: byte[] encodeSSHECDSAPublicKey(java.security.interfaces.ECPublicKey)>($r23);

        $r7 = new com.trilead.ssh2.packets.TypesWriter;

        specialinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void <init>()>();

        $r9 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        $r15 = virtualinvoke $r9.<com.trilead.ssh2.transport.TransportManager: byte[] getSessionIdentifier()>();

        $i0 = lengthof $r15;

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(byte[],int,int)>($r15, 0, $i0);

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeByte(int)>(50);

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>($r1);

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>("ssh-connection");

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>("publickey");

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeBoolean(boolean)>(1);

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(java.lang.String)>($r22);

        $i0 = lengthof $r16;

        virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: void writeString(byte[],int,int)>($r16, 0, $i0);

        $r15 = virtualinvoke $r7.<com.trilead.ssh2.packets.TypesWriter: byte[] getBytes()>();

        $r15 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: byte[] generateSignature(byte[],java.security.interfaces.ECPrivateKey)>($r15, $r19);

        $r21 = interfaceinvoke $r19.<java.security.interfaces.ECPrivateKey: java.security.spec.ECParameterSpec getParams()>();

        $r15 = staticinvoke <com.trilead.ssh2.signature.ECDSASHA2Verify: byte[] encodeSSHECDSASignature(byte[],java.security.spec.ECParameterSpec)>($r15, $r21);

        $r4 = new com.trilead.ssh2.packets.PacketUserauthRequestPublicKey;

        specialinvoke $r4.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: void <init>(java.lang.String,java.lang.String,java.lang.String,byte[],byte[])>("ssh-connection", $r1, $r22, $r16, $r15);

        $r9 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        $r16 = virtualinvoke $r4.<com.trilead.ssh2.packets.PacketUserauthRequestPublicKey: byte[] getPayload()>();

        virtualinvoke $r9.<com.trilead.ssh2.transport.TransportManager: void sendMessage(byte[])>($r16);

        goto label07;

     label15:
        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Unknown private key type returned by the PEM decoder.");

        throw $r10;

     label16:
        $b1 = $r16[0];

        if $b1 != 51 goto label19;

        $r6 = new com.trilead.ssh2.packets.PacketUserauthFailure;

     label17:
        $i0 = lengthof $r16;

        specialinvoke $r6.<com.trilead.ssh2.packets.PacketUserauthFailure: void <init>(byte[],int,int)>($r16, 0, $i0);

        $r24 = virtualinvoke $r6.<com.trilead.ssh2.packets.PacketUserauthFailure: java.lang.String[] getAuthThatCanContinue()>();

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.lang.String[] remainingMethods> = $r24;

        $z0 = virtualinvoke $r6.<com.trilead.ssh2.packets.PacketUserauthFailure: boolean isPartialSuccess()>();

     label18:
        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean isPartialSuccess> = $z0;

        return 0;

     label19:
        $r10 = new java.io.IOException;

     label20:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected SSH message (type ");

        $b1 = $r16[0];

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b1);

        $r20 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r22);

        throw $r10;

     label21:
        nop;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.io.IOException from label03 to label04 with label04;
        catch java.io.IOException from label06 to label08 with label04;
        catch java.io.IOException from label09 to label10 with label04;
        catch java.io.IOException from label12 to label13 with label04;
        catch java.io.IOException from label14 to label16 with label04;
        catch java.io.IOException from label17 to label18 with label04;
        catch java.io.IOException from label20 to label21 with label04;
    }

    byte[] deQueue() throws java.io.IOException
    {
        com.trilead.ssh2.auth.AuthenticationManager $r0;
        java.util.Vector $r1, $r2;
        int $i0;
        boolean $z0;
        java.io.IOException $r3;
        com.trilead.ssh2.transport.TransportManager $r4;
        java.lang.Throwable $r5;
        java.lang.InterruptedException $r6;
        java.lang.Object $r7;
        byte[] $r8;

        $r0 := @this: com.trilead.ssh2.auth.AuthenticationManager;

        $r2 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.util.Vector packets>;

        entermonitor $r2;

     label1:
        $r1 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.util.Vector packets>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 != 0 goto label8;

        $z0 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean connectionClosed>;

        if $z0 == 0 goto label4;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("The connection is closed.");

        $r4 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: com.trilead.ssh2.transport.TransportManager tm>;

        $r5 = virtualinvoke $r4.<com.trilead.ssh2.transport.TransportManager: java.lang.Throwable getReasonClosedCause()>();

        $r5 = virtualinvoke $r3.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r5);

        $r3 = (java.io.IOException) $r5;

        throw $r3;

     label2:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label3:
        throw $r5;

     label4:
        $r1 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.util.Vector packets>;

     label5:
        virtualinvoke $r1.<java.lang.Object: void wait()>();

     label6:
        goto label1;

     label7:
        $r6 := @caughtexception;

        goto label1;

     label8:
        $r1 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.util.Vector packets>;

        $r7 = virtualinvoke $r1.<java.util.Vector: java.lang.Object firstElement()>();

        $r8 = (byte[]) $r7;

        $r8 = (byte[]) $r8;

        $r1 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.util.Vector packets>;

        virtualinvoke $r1.<java.util.Vector: void removeElementAt(int)>(0);

        exitmonitor $r2;

     label9:
        return $r8;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.InterruptedException from label5 to label6 with label7;
        catch java.lang.Throwable from label4 to label6 with label2;
        catch java.lang.Throwable from label8 to label9 with label2;
    }

    byte[] getNextMessage() throws java.io.IOException
    {
        com.trilead.ssh2.auth.AuthenticationManager $r0;
        com.trilead.ssh2.packets.PacketUserauthBanner $r1;
        byte $b0;
        byte[] $r2;
        int $i1;
        java.lang.String $r3;

        $r0 := @this: com.trilead.ssh2.auth.AuthenticationManager;

     label1:
        $r2 = virtualinvoke $r0.<com.trilead.ssh2.auth.AuthenticationManager: byte[] deQueue()>();

        $b0 = $r2[0];

        if $b0 == 53 goto label2;

        return $r2;

     label2:
        $r1 = new com.trilead.ssh2.packets.PacketUserauthBanner;

        $i1 = lengthof $r2;

        specialinvoke $r1.<com.trilead.ssh2.packets.PacketUserauthBanner: void <init>(byte[],int,int)>($r2, 0, $i1);

        $r3 = virtualinvoke $r1.<com.trilead.ssh2.packets.PacketUserauthBanner: java.lang.String getBanner()>();

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.lang.String banner> = $r3;

        goto label1;
    }

    public java.lang.String[] getRemainingMethods(java.lang.String) throws java.io.IOException
    {
        com.trilead.ssh2.auth.AuthenticationManager $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;

        $r0 := @this: com.trilead.ssh2.auth.AuthenticationManager;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean initialize(java.lang.String)>($r1);

        $r2 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.lang.String[] remainingMethods>;

        return $r2;
    }

    public void handleMessage(byte[], int) throws java.io.IOException
    {
        com.trilead.ssh2.auth.AuthenticationManager $r0;
        byte[] $r1, $r2;
        int $i0;
        java.util.Vector $r3, $r4;
        java.io.IOException $r5;
        java.lang.Throwable $r6;

        $r0 := @this: com.trilead.ssh2.auth.AuthenticationManager;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r3 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.util.Vector packets>;

        entermonitor $r3;

        if $r1 != null goto label5;

     label1:
        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean connectionClosed> = 1;

     label2:
        $r4 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.util.Vector packets>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

        $r4 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.util.Vector packets>;

        $i0 = virtualinvoke $r4.<java.util.Vector: int size()>();

        if $i0 <= 5 goto label6;

        $r0.<com.trilead.ssh2.auth.AuthenticationManager: boolean connectionClosed> = 1;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Error, peer is flooding us with authentication packets.");

        throw $r5;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r6;

     label5:
        $r2 = newarray (byte)[$i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        $r4 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.util.Vector packets>;

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>($r2);

        goto label2;

     label6:
        exitmonitor $r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label3;
        catch java.lang.Throwable from label5 to label7 with label3;
    }

    boolean methodPossible(java.lang.String)
    {
        com.trilead.ssh2.auth.AuthenticationManager $r0;
        java.lang.String $r1, $r3;
        int $i0, $i1;
        java.lang.String[] $r2;

        $r0 := @this: com.trilead.ssh2.auth.AuthenticationManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.lang.String[] remainingMethods>;

        if $r2 != null goto label1;

        return 0;

     label1:
        $i0 = 0;

     label2:
        $r2 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.lang.String[] remainingMethods>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label4;

        $r2 = $r0.<com.trilead.ssh2.auth.AuthenticationManager: java.lang.String[] remainingMethods>;

        $r3 = $r2[$i0];

        $i1 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r1);

        if $i1 != 0 goto label3;

        return 1;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return 0;
    }
}
