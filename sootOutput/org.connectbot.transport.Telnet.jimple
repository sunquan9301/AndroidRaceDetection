public class org.connectbot.transport.Telnet extends org.connectbot.transport.AbsTransport
{
    static final java.util.regex.Pattern hostmask;
    private boolean connected;
    private de.mud.telnet.TelnetProtocolHandler handler;
    private int height;
    private java.io.InputStream is;
    private java.io.OutputStream os;
    private java.net.Socket socket;
    private int width;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("^([0-9a-z.-]+)(:(\\d+))?$", 2);

        <org.connectbot.transport.Telnet: java.util.regex.Pattern hostmask> = $r0;

        return;
    }

    public void <init>()
    {
        org.connectbot.transport.Telnet $r0;
        org.connectbot.transport.Telnet$1 $r1;

        $r0 := @this: org.connectbot.transport.Telnet;

        specialinvoke $r0.<org.connectbot.transport.AbsTransport: void <init>()>();

        $r0.<org.connectbot.transport.Telnet: boolean connected> = 0;

        $r1 = new org.connectbot.transport.Telnet$1;

        specialinvoke $r1.<org.connectbot.transport.Telnet$1: void <init>(org.connectbot.transport.Telnet)>($r0);

        $r0.<org.connectbot.transport.Telnet: de.mud.telnet.TelnetProtocolHandler handler> = $r1;

        return;
    }

    static int access$000(org.connectbot.transport.Telnet)
    {
        org.connectbot.transport.Telnet $r0;
        int $i0;

        $r0 := @parameter0: org.connectbot.transport.Telnet;

        $i0 = $r0.<org.connectbot.transport.Telnet: int width>;

        return $i0;
    }

    static int access$100(org.connectbot.transport.Telnet)
    {
        org.connectbot.transport.Telnet $r0;
        int $i0;

        $r0 := @parameter0: org.connectbot.transport.Telnet;

        $i0 = $r0.<org.connectbot.transport.Telnet: int height>;

        return $i0;
    }

    static java.io.OutputStream access$200(org.connectbot.transport.Telnet)
    {
        org.connectbot.transport.Telnet $r0;
        java.io.OutputStream $r1;

        $r0 := @parameter0: org.connectbot.transport.Telnet;

        $r1 = $r0.<org.connectbot.transport.Telnet: java.io.OutputStream os>;

        return $r1;
    }

    public static java.lang.String getFormatHint(android.content.Context)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;

        $r0 := @parameter0: android.content.Context;

        $r2 = newarray (java.lang.Object)[2];

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.String getString(int)>(2131165268);

        $r2[0] = $r1;

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.String getString(int)>(2131165269);

        $r2[1] = $r1;

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", $r2);

        return $r1;
    }

    public static java.lang.String getProtocolName()
    {
        return "telnet";
    }

    public static android.net.Uri getUri(java.lang.String)
    {
        java.lang.String $r0, $r5;
        int $i0, $i1;
        java.lang.StringBuilder $r1, $r4;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;
        android.net.Uri $r6;
        java.lang.NumberFormatException $r7;

        $r0 := @parameter0: java.lang.String;

        $r2 = <org.connectbot.transport.Telnet: java.util.regex.Pattern hostmask>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("telnet");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("://");

        $r5 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $i0 = 23;

        if $r5 == null goto label5;

     label2:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

     label3:
        $i0 = $i1;

        if $i1 < 1 goto label4;

        if $i1 <= 65535 goto label5;

     label4:
        $i0 = 23;

     label5:
        if $i0 == 23 goto label6;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

     label6:
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/#");

        $r5 = staticinvoke <android.net.Uri: java.lang.String encode(java.lang.String)>($r0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r5);

        return $r6;

     label7:
        $r7 := @caughtexception;

        goto label5;

        catch java.lang.NumberFormatException from label2 to label3 with label7;
    }

    private static void tryAllAddresses(java.net.Socket, java.lang.String, int) throws java.io.IOException
    {
        java.net.Socket $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2;
        java.net.InetAddress $r2;
        java.net.InetSocketAddress $r3;
        java.net.InetAddress[] $r4;
        java.net.SocketTimeoutException $r5;

        $r0 := @parameter0: java.net.Socket;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1);

        $i2 = lengthof $r4;

        $i1 = 0;

     label1:
        if $i1 >= $i2 goto label5;

        $r2 = $r4[$i1];

        $r3 = new java.net.InetSocketAddress;

     label2:
        specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);

        virtualinvoke $r0.<java.net.Socket: void connect(java.net.SocketAddress)>($r3);

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        $i1 = $i1 + 1;

        goto label1;

     label5:
        $r5 = new java.net.SocketTimeoutException;

        specialinvoke $r5.<java.net.SocketTimeoutException: void <init>(java.lang.String)>("Could not connect; socket timed out");

        throw $r5;

        catch java.net.SocketTimeoutException from label2 to label3 with label4;
    }

    public void close()
    {
        org.connectbot.transport.Telnet $r0;
        java.io.IOException $r1;
        java.net.Socket $r2;

        $r0 := @this: org.connectbot.transport.Telnet;

        $r0.<org.connectbot.transport.Telnet: boolean connected> = 0;

        $r2 = $r0.<org.connectbot.transport.Telnet: java.net.Socket socket>;

        if $r2 == null goto label4;

        $r2 = $r0.<org.connectbot.transport.Telnet: java.net.Socket socket>;

     label1:
        virtualinvoke $r2.<java.net.Socket: void close()>();

     label2:
        $r0.<org.connectbot.transport.Telnet: java.net.Socket socket> = null;

        return;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.Telnet", "Error closing telnet socket.", $r1);

        return;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void connect()
    {
        org.connectbot.transport.Telnet $r0;
        java.net.UnknownHostException $r1;
        java.net.Socket $r2;
        org.connectbot.bean.HostBean $r3;
        java.lang.String $r4;
        int $i0;
        java.io.InputStream $r5;
        java.io.OutputStream $r6;
        org.connectbot.service.TerminalBridge $r7;
        java.io.IOException $r8;

        $r0 := @this: org.connectbot.transport.Telnet;

        $r2 = new java.net.Socket;

     label01:
        specialinvoke $r2.<java.net.Socket: void <init>()>();

     label02:
        $r0.<org.connectbot.transport.Telnet: java.net.Socket socket> = $r2;

        $r2 = $r0.<org.connectbot.transport.Telnet: java.net.Socket socket>;

     label03:
        $r3 = $r0.<org.connectbot.transport.Telnet: org.connectbot.bean.HostBean host>;

        $r4 = virtualinvoke $r3.<org.connectbot.bean.HostBean: java.lang.String getHostname()>();

        $r3 = $r0.<org.connectbot.transport.Telnet: org.connectbot.bean.HostBean host>;

        $i0 = virtualinvoke $r3.<org.connectbot.bean.HostBean: int getPort()>();

        staticinvoke <org.connectbot.transport.Telnet: void tryAllAddresses(java.net.Socket,java.lang.String,int)>($r2, $r4, $i0);

     label04:
        $r0.<org.connectbot.transport.Telnet: boolean connected> = 1;

     label05:
        $r2 = $r0.<org.connectbot.transport.Telnet: java.net.Socket socket>;

        $r5 = virtualinvoke $r2.<java.net.Socket: java.io.InputStream getInputStream()>();

     label06:
        $r0.<org.connectbot.transport.Telnet: java.io.InputStream is> = $r5;

     label07:
        $r2 = $r0.<org.connectbot.transport.Telnet: java.net.Socket socket>;

        $r6 = virtualinvoke $r2.<java.net.Socket: java.io.OutputStream getOutputStream()>();

     label08:
        $r0.<org.connectbot.transport.Telnet: java.io.OutputStream os> = $r6;

     label09:
        $r7 = $r0.<org.connectbot.transport.Telnet: org.connectbot.service.TerminalBridge bridge>;

        virtualinvoke $r7.<org.connectbot.service.TerminalBridge: void onConnected()>();

     label10:
        return;

     label11:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.Telnet", "IO Exception connecting to host", $r1);

        return;

     label12:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.Telnet", "IO Exception connecting to host", $r8);

        return;

        catch java.net.UnknownHostException from label01 to label02 with label11;
        catch java.net.UnknownHostException from label03 to label04 with label11;
        catch java.net.UnknownHostException from label05 to label06 with label11;
        catch java.net.UnknownHostException from label07 to label08 with label11;
        catch java.net.UnknownHostException from label09 to label10 with label11;
        catch java.io.IOException from label01 to label02 with label12;
        catch java.io.IOException from label03 to label04 with label12;
        catch java.io.IOException from label05 to label06 with label12;
        catch java.io.IOException from label07 to label08 with label12;
        catch java.io.IOException from label09 to label10 with label12;
    }

    public org.connectbot.bean.HostBean createHost(android.net.Uri)
    {
        org.connectbot.transport.Telnet $r0;
        android.net.Uri $r1;
        org.connectbot.bean.HostBean $r2;
        int $i0, $i1;
        java.lang.String $r3, $r4;

        $r0 := @this: org.connectbot.transport.Telnet;

        $r1 := @parameter0: android.net.Uri;

        $r2 = new org.connectbot.bean.HostBean;

        specialinvoke $r2.<org.connectbot.bean.HostBean: void <init>()>();

        virtualinvoke $r2.<org.connectbot.bean.HostBean: void setProtocol(java.lang.String)>("telnet");

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getHost()>();

        virtualinvoke $r2.<org.connectbot.bean.HostBean: void setHostname(java.lang.String)>($r3);

        $i1 = virtualinvoke $r1.<android.net.Uri: int getPort()>();

        $i0 = $i1;

        if $i1 < 0 goto label1;

        if $i1 <= 65535 goto label2;

     label1:
        $i0 = 23;

     label2:
        virtualinvoke $r2.<org.connectbot.bean.HostBean: void setPort(int)>($i0);

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getFragment()>();

        if $r3 == null goto label3;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 != 0 goto label4;

     label3:
        $r3 = virtualinvoke $r2.<org.connectbot.bean.HostBean: java.lang.String getUsername()>();

        $r4 = virtualinvoke $r2.<org.connectbot.bean.HostBean: java.lang.String getHostname()>();

        $i1 = virtualinvoke $r2.<org.connectbot.bean.HostBean: int getPort()>();

        $r4 = virtualinvoke $r0.<org.connectbot.transport.Telnet: java.lang.String getDefaultNickname(java.lang.String,java.lang.String,int)>($r3, $r4, $i1);

        virtualinvoke $r2.<org.connectbot.bean.HostBean: void setNickname(java.lang.String)>($r4);

        return $r2;

     label4:
        $r4 = virtualinvoke $r1.<android.net.Uri: java.lang.String getFragment()>();

        virtualinvoke $r2.<org.connectbot.bean.HostBean: void setNickname(java.lang.String)>($r4);

        return $r2;
    }

    public void flush() throws java.io.IOException
    {
        org.connectbot.transport.Telnet $r0;
        java.io.OutputStream $r1;

        $r0 := @this: org.connectbot.transport.Telnet;

        $r1 = $r0.<org.connectbot.transport.Telnet: java.io.OutputStream os>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    public java.lang.String getDefaultNickname(java.lang.String, java.lang.String, int)
    {
        org.connectbot.transport.Telnet $r0;
        java.lang.String $r1, $r2;
        int $i0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;

        $r0 := @this: org.connectbot.transport.Telnet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        if $i0 != 23 goto label1;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r2;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s", $r3);

        return $r2;

     label1:
        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = $r2;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[1] = $r4;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%d", $r3);

        return $r2;
    }

    public void getSelectionArgs(android.net.Uri, java.util.Map)
    {
        org.connectbot.transport.Telnet $r0;
        android.net.Uri $r1;
        java.util.Map $r2;
        int $i0, $i1;
        java.lang.String $r3;

        $r0 := @this: org.connectbot.transport.Telnet;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: java.util.Map;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("protocol", "telnet");

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getFragment()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("nickname", $r3);

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getHost()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostname", $r3);

        $i1 = virtualinvoke $r1.<android.net.Uri: int getPort()>();

        $i0 = $i1;

        if $i1 < 0 goto label1;

        if $i1 <= 65535 goto label2;

     label1:
        $i0 = 23;

     label2:
        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("port", $r3);

        return;
    }

    public boolean isConnected()
    {
        org.connectbot.transport.Telnet $r0;
        boolean $z0;

        $r0 := @this: org.connectbot.transport.Telnet;

        $z0 = $r0.<org.connectbot.transport.Telnet: boolean connected>;

        return $z0;
    }

    public boolean isSessionOpen()
    {
        org.connectbot.transport.Telnet $r0;
        boolean $z0;

        $r0 := @this: org.connectbot.transport.Telnet;

        $z0 = $r0.<org.connectbot.transport.Telnet: boolean connected>;

        return $z0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.connectbot.transport.Telnet $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        de.mud.telnet.TelnetProtocolHandler $r2;
        java.io.InputStream $r3;
        org.connectbot.service.TerminalBridge $r4;
        java.io.IOException $r5;

        $r0 := @this: org.connectbot.transport.Telnet;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

     label1:
        $r2 = $r0.<org.connectbot.transport.Telnet: de.mud.telnet.TelnetProtocolHandler handler>;

        $i3 = virtualinvoke $r2.<de.mud.telnet.TelnetProtocolHandler: int negotiate(byte[],int)>($r1, $i0);

        $i2 = $i3;

        if $i3 <= 0 goto label2;

        return $i3;

     label2:
        if $i3 == 0 goto label1;

     label3:
        if $i2 > 0 goto label7;

     label4:
        $r2 = $r0.<org.connectbot.transport.Telnet: de.mud.telnet.TelnetProtocolHandler handler>;

        $i3 = virtualinvoke $r2.<de.mud.telnet.TelnetProtocolHandler: int negotiate(byte[],int)>($r1, $i0);

        if $i3 <= 0 goto label5;

        return $i3;

     label5:
        if $i3 == 0 goto label4;

        $r3 = $r0.<org.connectbot.transport.Telnet: java.io.InputStream is>;

        $i3 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r1, $i0, $i1);

        if $i3 >= 0 goto label6;

        $r4 = $r0.<org.connectbot.transport.Telnet: org.connectbot.service.TerminalBridge bridge>;

        virtualinvoke $r4.<org.connectbot.service.TerminalBridge: void dispatchDisconnect(boolean)>(0);

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Remote end closed connection.");

        throw $r5;

     label6:
        $r2 = $r0.<org.connectbot.transport.Telnet: de.mud.telnet.TelnetProtocolHandler handler>;

        virtualinvoke $r2.<de.mud.telnet.TelnetProtocolHandler: void inputfeed(byte[],int,int)>($r1, $i0, $i3);

        $r2 = $r0.<org.connectbot.transport.Telnet: de.mud.telnet.TelnetProtocolHandler handler>;

        $i2 = virtualinvoke $r2.<de.mud.telnet.TelnetProtocolHandler: int negotiate(byte[],int)>($r1, $i0);

        goto label3;

     label7:
        return $i2;
    }

    public void setDimensions(int, int, int, int)
    {
        org.connectbot.transport.Telnet $r0;
        int $i0, $i1, $i2, $i3;
        java.io.IOException $r1;
        de.mud.telnet.TelnetProtocolHandler $r2;

        $r0 := @this: org.connectbot.transport.Telnet;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r2 = $r0.<org.connectbot.transport.Telnet: de.mud.telnet.TelnetProtocolHandler handler>;

     label1:
        virtualinvoke $r2.<de.mud.telnet.TelnetProtocolHandler: void setWindowSize(int,int)>($i0, $i1);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CB.Telnet", "Couldn\'t resize remote terminal", $r1);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean usesNetwork()
    {
        org.connectbot.transport.Telnet $r0;

        $r0 := @this: org.connectbot.transport.Telnet;

        return 1;
    }

    public void write(int) throws java.io.IOException
    {
        org.connectbot.transport.Telnet $r0;
        int $i0;
        java.net.SocketException $r1;
        java.io.OutputStream $r2;
        org.connectbot.service.TerminalBridge $r3;

        $r0 := @this: org.connectbot.transport.Telnet;

        $i0 := @parameter0: int;

        $r2 = $r0.<org.connectbot.transport.Telnet: java.io.OutputStream os>;

        if $r2 == null goto label4;

        $r2 = $r0.<org.connectbot.transport.Telnet: java.io.OutputStream os>;

     label1:
        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i0);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r3 = $r0.<org.connectbot.transport.Telnet: org.connectbot.service.TerminalBridge bridge>;

        virtualinvoke $r3.<org.connectbot.service.TerminalBridge: void dispatchDisconnect(boolean)>(0);

        return;

     label4:
        return;

        catch java.net.SocketException from label1 to label2 with label3;
    }

    public void write(byte[]) throws java.io.IOException
    {
        org.connectbot.transport.Telnet $r0;
        byte[] $r1;
        java.net.SocketException $r2;
        java.io.OutputStream $r3;
        org.connectbot.service.TerminalBridge $r4;

        $r0 := @this: org.connectbot.transport.Telnet;

        $r1 := @parameter0: byte[];

        $r3 = $r0.<org.connectbot.transport.Telnet: java.io.OutputStream os>;

        if $r3 == null goto label4;

        $r3 = $r0.<org.connectbot.transport.Telnet: java.io.OutputStream os>;

     label1:
        virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r4 = $r0.<org.connectbot.transport.Telnet: org.connectbot.service.TerminalBridge bridge>;

        virtualinvoke $r4.<org.connectbot.service.TerminalBridge: void dispatchDisconnect(boolean)>(0);

        return;

     label4:
        return;

        catch java.net.SocketException from label1 to label2 with label3;
    }
}
