public class com.trilead.ssh2.transport.TransportConnection extends java.lang.Object
{
    private static final com.trilead.ssh2.log.Logger log;
    boolean can_recv_compress;
    boolean can_send_compress;
    com.trilead.ssh2.crypto.cipher.CipherInputStream cis;
    com.trilead.ssh2.crypto.cipher.CipherOutputStream cos;
    com.trilead.ssh2.compression.ICompressor recv_comp;
    byte[] recv_comp_buffer;
    com.trilead.ssh2.crypto.digest.MAC recv_mac;
    byte[] recv_mac_buffer;
    byte[] recv_mac_buffer_cmp;
    final byte[] recv_packet_header_buffer;
    boolean recv_packet_header_present;
    int recv_padd_blocksize;
    final byte[] recv_padding_buffer;
    int recv_seq_number;
    final java.security.SecureRandom rnd;
    com.trilead.ssh2.compression.ICompressor send_comp;
    byte[] send_comp_buffer;
    com.trilead.ssh2.crypto.digest.MAC send_mac;
    byte[] send_mac_buffer;
    final byte[] send_packet_header_buffer;
    int send_padd_blocksize;
    final byte[] send_padding_buffer;
    int send_seq_number;
    boolean useRandomPadding;

    static void <clinit>()
    {
        com.trilead.ssh2.log.Logger $r0;

        $r0 = staticinvoke <com.trilead.ssh2.log.Logger: com.trilead.ssh2.log.Logger getLogger(java.lang.Class)>(class "com/trilead/ssh2/transport/TransportConnection");

        <com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.log.Logger log> = $r0;

        return;
    }

    public void <init>(java.io.InputStream, java.io.OutputStream, java.security.SecureRandom)
    {
        com.trilead.ssh2.transport.TransportConnection $r0;
        java.io.InputStream $r1;
        java.io.OutputStream $r2;
        java.security.SecureRandom $r3;
        byte[] $r4;
        com.trilead.ssh2.crypto.cipher.CipherInputStream $r5;
        com.trilead.ssh2.crypto.cipher.NullCipher $r6;
        com.trilead.ssh2.crypto.cipher.CipherOutputStream $r7;

        $r0 := @this: com.trilead.ssh2.transport.TransportConnection;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.io.OutputStream;

        $r3 := @parameter2: java.security.SecureRandom;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.trilead.ssh2.transport.TransportConnection: int send_seq_number> = 0;

        $r0.<com.trilead.ssh2.transport.TransportConnection: int recv_seq_number> = 0;

        $r0.<com.trilead.ssh2.transport.TransportConnection: boolean useRandomPadding> = 0;

        $r0.<com.trilead.ssh2.transport.TransportConnection: int send_padd_blocksize> = 8;

        $r0.<com.trilead.ssh2.transport.TransportConnection: int recv_padd_blocksize> = 8;

        $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.compression.ICompressor recv_comp> = null;

        $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.compression.ICompressor send_comp> = null;

        $r0.<com.trilead.ssh2.transport.TransportConnection: boolean can_recv_compress> = 0;

        $r0.<com.trilead.ssh2.transport.TransportConnection: boolean can_send_compress> = 0;

        $r4 = newarray (byte)[256];

        $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_padding_buffer> = $r4;

        $r4 = newarray (byte)[5];

        $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_packet_header_buffer> = $r4;

        $r4 = newarray (byte)[256];

        $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_padding_buffer> = $r4;

        $r4 = newarray (byte)[5];

        $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_packet_header_buffer> = $r4;

        $r0.<com.trilead.ssh2.transport.TransportConnection: boolean recv_packet_header_present> = 0;

        $r5 = new com.trilead.ssh2.crypto.cipher.CipherInputStream;

        $r6 = new com.trilead.ssh2.crypto.cipher.NullCipher;

        specialinvoke $r6.<com.trilead.ssh2.crypto.cipher.NullCipher: void <init>()>();

        specialinvoke $r5.<com.trilead.ssh2.crypto.cipher.CipherInputStream: void <init>(com.trilead.ssh2.crypto.cipher.BlockCipher,java.io.InputStream)>($r6, $r1);

        $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.cipher.CipherInputStream cis> = $r5;

        $r7 = new com.trilead.ssh2.crypto.cipher.CipherOutputStream;

        $r6 = new com.trilead.ssh2.crypto.cipher.NullCipher;

        specialinvoke $r6.<com.trilead.ssh2.crypto.cipher.NullCipher: void <init>()>();

        specialinvoke $r7.<com.trilead.ssh2.crypto.cipher.CipherOutputStream: void <init>(com.trilead.ssh2.crypto.cipher.BlockCipher,java.io.OutputStream)>($r6, $r2);

        $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.cipher.CipherOutputStream cos> = $r7;

        $r0.<com.trilead.ssh2.transport.TransportConnection: java.security.SecureRandom rnd> = $r3;

        return;
    }

    public void changeRecvCipher(com.trilead.ssh2.crypto.cipher.BlockCipher, com.trilead.ssh2.crypto.digest.MAC)
    {
        com.trilead.ssh2.transport.TransportConnection $r0;
        com.trilead.ssh2.crypto.cipher.BlockCipher $r1;
        com.trilead.ssh2.crypto.digest.MAC $r2;
        com.trilead.ssh2.crypto.cipher.CipherInputStream $r3;
        byte[] $r4, $r5;
        int $i0;

        $r0 := @this: com.trilead.ssh2.transport.TransportConnection;

        $r1 := @parameter0: com.trilead.ssh2.crypto.cipher.BlockCipher;

        $r2 := @parameter1: com.trilead.ssh2.crypto.digest.MAC;

        $r4 = null;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.cipher.CipherInputStream cis>;

        virtualinvoke $r3.<com.trilead.ssh2.crypto.cipher.CipherInputStream: void changeCipher(com.trilead.ssh2.crypto.cipher.BlockCipher)>($r1);

        $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.digest.MAC recv_mac> = $r2;

        if $r2 == null goto label3;

        $i0 = virtualinvoke $r2.<com.trilead.ssh2.crypto.digest.MAC: int size()>();

        $r5 = newarray (byte)[$i0];

     label1:
        $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_mac_buffer> = $r5;

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.<com.trilead.ssh2.crypto.digest.MAC: int size()>();

        $r4 = newarray (byte)[$i0];

     label2:
        $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_mac_buffer_cmp> = $r4;

        $i0 = interfaceinvoke $r1.<com.trilead.ssh2.crypto.cipher.BlockCipher: int getBlockSize()>();

        $r0.<com.trilead.ssh2.transport.TransportConnection: int recv_padd_blocksize> = $i0;

        $i0 = $r0.<com.trilead.ssh2.transport.TransportConnection: int recv_padd_blocksize>;

        if $i0 >= 8 goto label4;

        $r0.<com.trilead.ssh2.transport.TransportConnection: int recv_padd_blocksize> = 8;

        return;

     label3:
        $r5 = null;

        goto label1;

     label4:
        return;
    }

    public void changeRecvCompression(com.trilead.ssh2.compression.ICompressor)
    {
        com.trilead.ssh2.transport.TransportConnection $r0;
        com.trilead.ssh2.compression.ICompressor $r1;
        int $i0;
        byte[] $r2;
        boolean $z0, $z1;

        $r0 := @this: com.trilead.ssh2.transport.TransportConnection;

        $r1 := @parameter0: com.trilead.ssh2.compression.ICompressor;

        $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.compression.ICompressor recv_comp> = $r1;

        if $r1 == null goto label1;

        $i0 = interfaceinvoke $r1.<com.trilead.ssh2.compression.ICompressor: int getBufferSize()>();

        $r2 = newarray (byte)[$i0];

        $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_comp_buffer> = $r2;

        $z0 = $r0.<com.trilead.ssh2.transport.TransportConnection: boolean can_recv_compress>;

        $r1 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.compression.ICompressor recv_comp>;

        $z1 = interfaceinvoke $r1.<com.trilead.ssh2.compression.ICompressor: boolean canCompressPreauth()>();

        $z1 = $z0 | $z1;

        $r0.<com.trilead.ssh2.transport.TransportConnection: boolean can_recv_compress> = $z1;

        return;

     label1:
        return;
    }

    public void changeSendCipher(com.trilead.ssh2.crypto.cipher.BlockCipher, com.trilead.ssh2.crypto.digest.MAC)
    {
        com.trilead.ssh2.transport.TransportConnection $r0;
        com.trilead.ssh2.crypto.cipher.BlockCipher $r1;
        com.trilead.ssh2.crypto.digest.MAC $r2;
        boolean $z0;
        int $i0;
        com.trilead.ssh2.crypto.cipher.CipherOutputStream $r3;
        byte[] $r4;

        $r0 := @this: com.trilead.ssh2.transport.TransportConnection;

        $r1 := @parameter0: com.trilead.ssh2.crypto.cipher.BlockCipher;

        $r2 := @parameter1: com.trilead.ssh2.crypto.digest.MAC;

        $z0 = $r1 instanceof com.trilead.ssh2.crypto.cipher.NullCipher;

        if $z0 != 0 goto label1;

        $r0.<com.trilead.ssh2.transport.TransportConnection: boolean useRandomPadding> = 1;

     label1:
        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.cipher.CipherOutputStream cos>;

        virtualinvoke $r3.<com.trilead.ssh2.crypto.cipher.CipherOutputStream: void changeCipher(com.trilead.ssh2.crypto.cipher.BlockCipher)>($r1);

        $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.digest.MAC send_mac> = $r2;

        if $r2 == null goto label3;

        $i0 = virtualinvoke $r2.<com.trilead.ssh2.crypto.digest.MAC: int size()>();

        $r4 = newarray (byte)[$i0];

     label2:
        $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_mac_buffer> = $r4;

        $i0 = interfaceinvoke $r1.<com.trilead.ssh2.crypto.cipher.BlockCipher: int getBlockSize()>();

        $r0.<com.trilead.ssh2.transport.TransportConnection: int send_padd_blocksize> = $i0;

        $i0 = $r0.<com.trilead.ssh2.transport.TransportConnection: int send_padd_blocksize>;

        if $i0 >= 8 goto label4;

        $r0.<com.trilead.ssh2.transport.TransportConnection: int send_padd_blocksize> = 8;

        return;

     label3:
        $r4 = null;

        goto label2;

     label4:
        return;
    }

    public void changeSendCompression(com.trilead.ssh2.compression.ICompressor)
    {
        com.trilead.ssh2.transport.TransportConnection $r0;
        com.trilead.ssh2.compression.ICompressor $r1;
        int $i0;
        byte[] $r2;
        boolean $z0, $z1;

        $r0 := @this: com.trilead.ssh2.transport.TransportConnection;

        $r1 := @parameter0: com.trilead.ssh2.compression.ICompressor;

        $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.compression.ICompressor send_comp> = $r1;

        if $r1 == null goto label1;

        $i0 = interfaceinvoke $r1.<com.trilead.ssh2.compression.ICompressor: int getBufferSize()>();

        $r2 = newarray (byte)[$i0];

        $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_comp_buffer> = $r2;

        $z0 = $r0.<com.trilead.ssh2.transport.TransportConnection: boolean can_send_compress>;

        $r1 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.compression.ICompressor send_comp>;

        $z1 = interfaceinvoke $r1.<com.trilead.ssh2.compression.ICompressor: boolean canCompressPreauth()>();

        $z1 = $z0 | $z1;

        $r0.<com.trilead.ssh2.transport.TransportConnection: boolean can_send_compress> = $z1;

        return;

     label1:
        return;
    }

    public int getPacketOverheadEstimate()
    {
        com.trilead.ssh2.transport.TransportConnection $r0;
        int $i0, $i1;
        byte[] $r1;

        $r0 := @this: com.trilead.ssh2.transport.TransportConnection;

        $i0 = $r0.<com.trilead.ssh2.transport.TransportConnection: int send_padd_blocksize>;

        $i0 = $i0 + -1;

        $i0 = $i0 + 9;

        $r1 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_mac_buffer>;

        $i1 = lengthof $r1;

        $i1 = $i0 + $i1;

        return $i1;
    }

    public int receiveMessage(byte[], int, int) throws java.io.IOException
    {
        com.trilead.ssh2.transport.TransportConnection $r0;
        byte[] $r1, $r3, $r9;
        int $i0, $i1, $i2, $i5;
        short $s3;
        int[] $r2;
        boolean $z0;
        java.lang.StringBuilder $r4;
        com.trilead.ssh2.crypto.cipher.CipherInputStream $r5;
        byte $b4, $b6;
        java.io.IOException $r6;
        java.lang.String $r7;
        com.trilead.ssh2.crypto.digest.MAC $r8;
        com.trilead.ssh2.log.Logger $r10;
        com.trilead.ssh2.compression.ICompressor $r11;

        $r0 := @this: com.trilead.ssh2.transport.TransportConnection;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = $r0.<com.trilead.ssh2.transport.TransportConnection: boolean recv_packet_header_present>;

        if $z0 != 0 goto label03;

        $r5 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.cipher.CipherInputStream cis>;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_packet_header_buffer>;

        virtualinvoke $r5.<com.trilead.ssh2.crypto.cipher.CipherInputStream: int read(byte[],int,int)>($r3, 0, 5);

     label01:
        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_packet_header_buffer>;

        $b4 = $r3[0];

        $s3 = $b4 & 255;

        $i2 = $s3 << 24;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_packet_header_buffer>;

        $b4 = $r3[1];

        $s3 = $b4 & 255;

        $i5 = $s3 << 16;

        $i5 = $i2 | $i5;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_packet_header_buffer>;

        $b4 = $r3[2];

        $s3 = $b4 & 255;

        $i2 = $s3 << 8;

        $i5 = $i5 | $i2;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_packet_header_buffer>;

        $b4 = $r3[3];

        $s3 = $b4 & 255;

        $i2 = $i5 | $s3;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_packet_header_buffer>;

        $b4 = $r3[4];

        $s3 = $b4 & 255;

        if $i2 > 35000 goto label02;

        if $i2 >= 12 goto label04;

     label02:
        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal packet size! (");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label03:
        $r0.<com.trilead.ssh2.transport.TransportConnection: boolean recv_packet_header_present> = 0;

        goto label01;

     label04:
        $i5 = $i2 - $s3;

        $i2 = $i5 + -1;

        if $i2 >= 0 goto label05;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal padding_length in packet from remote (");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label05:
        if $i2 < $i1 goto label06;

        $r6 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Receive buffer too small (");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", need ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label06:
        $r5 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.cipher.CipherInputStream cis>;

        virtualinvoke $r5.<com.trilead.ssh2.crypto.cipher.CipherInputStream: int read(byte[],int,int)>($r1, $i0, $i2);

        $r5 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.cipher.CipherInputStream cis>;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_padding_buffer>;

        virtualinvoke $r5.<com.trilead.ssh2.crypto.cipher.CipherInputStream: int read(byte[],int,int)>($r3, 0, $s3);

        $r8 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.digest.MAC recv_mac>;

        if $r8 == null goto label09;

        $r5 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.cipher.CipherInputStream cis>;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_mac_buffer>;

        $r9 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_mac_buffer>;

        $i5 = lengthof $r9;

        virtualinvoke $r5.<com.trilead.ssh2.crypto.cipher.CipherInputStream: int readPlain(byte[],int,int)>($r3, 0, $i5);

        $r8 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.digest.MAC recv_mac>;

        $i5 = $r0.<com.trilead.ssh2.transport.TransportConnection: int recv_seq_number>;

        virtualinvoke $r8.<com.trilead.ssh2.crypto.digest.MAC: void initMac(int)>($i5);

        $r8 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.digest.MAC recv_mac>;

        $r9 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_packet_header_buffer>;

        virtualinvoke $r8.<com.trilead.ssh2.crypto.digest.MAC: void update(byte[],int,int)>($r9, 0, 5);

        $r8 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.digest.MAC recv_mac>;

        virtualinvoke $r8.<com.trilead.ssh2.crypto.digest.MAC: void update(byte[],int,int)>($r1, $i0, $i2);

        $r8 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.digest.MAC recv_mac>;

        $r9 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_padding_buffer>;

        virtualinvoke $r8.<com.trilead.ssh2.crypto.digest.MAC: void update(byte[],int,int)>($r9, 0, $s3);

        $r8 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.digest.MAC recv_mac>;

        $r9 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_mac_buffer_cmp>;

        virtualinvoke $r8.<com.trilead.ssh2.crypto.digest.MAC: void getMac(byte[],int)>($r9, 0);

        $i1 = 0;

     label07:
        $r9 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_mac_buffer>;

        $i5 = lengthof $r9;

        if $i1 >= $i5 goto label09;

        $r9 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_mac_buffer>;

        $b4 = $r9[$i1];

        $r9 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] recv_mac_buffer_cmp>;

        $b6 = $r9[$i1];

        if $b4 == $b6 goto label08;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Remote sent corrupt MAC.");

        throw $r6;

     label08:
        $i1 = $i1 + 1;

        goto label07;

     label09:
        $i5 = $r0.<com.trilead.ssh2.transport.TransportConnection: int recv_seq_number>;

        $i5 = $i5 + 1;

        $r0.<com.trilead.ssh2.transport.TransportConnection: int recv_seq_number> = $i5;

        $r10 = <com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.log.Logger log>;

        $z0 = virtualinvoke $r10.<com.trilead.ssh2.log.Logger: boolean isEnabled()>();

        if $z0 == 0 goto label10;

        $r10 = <com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.log.Logger log>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received ");

        $b6 = $r1[$i0];

        $s3 = $b6 & 255;

        $r7 = staticinvoke <com.trilead.ssh2.packets.Packets: java.lang.String getMessageName(int)>($s3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes payload");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<com.trilead.ssh2.log.Logger: void log(int,java.lang.String)>(90, $r7);

     label10:
        $r11 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.compression.ICompressor recv_comp>;

        if $r11 == null goto label12;

        $z0 = $r0.<com.trilead.ssh2.transport.TransportConnection: boolean can_recv_compress>;

        if $z0 == 0 goto label13;

        $r2 = newarray (int)[1];

        $r2[0] = $i2;

        $r11 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.compression.ICompressor recv_comp>;

        $r9 = interfaceinvoke $r11.<com.trilead.ssh2.compression.ICompressor: byte[] uncompress(byte[],int,int[])>($r1, $i0, $r2);

        if $r9 != null goto label11;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Error while inflating remote data");

        throw $r6;

     label11:
        $i2 = $r2[0];

        return $i2;

     label12:
        return $i2;

     label13:
        return $i2;
    }

    public void sendMessage(byte[]) throws java.io.IOException
    {
        com.trilead.ssh2.transport.TransportConnection $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: com.trilead.ssh2.transport.TransportConnection;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        virtualinvoke $r0.<com.trilead.ssh2.transport.TransportConnection: void sendMessage(byte[],int,int,int)>($r1, 0, $i0, 0);

        return;
    }

    public void sendMessage(byte[], int, int, int) throws java.io.IOException
    {
        com.trilead.ssh2.transport.TransportConnection $r0;
        byte[] $r1, $r3, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8;
        com.trilead.ssh2.compression.ICompressor $r2;
        boolean $z0;
        java.security.SecureRandom $r4;
        byte $b7;
        com.trilead.ssh2.crypto.cipher.CipherOutputStream $r5;
        com.trilead.ssh2.crypto.digest.MAC $r6;
        com.trilead.ssh2.log.Logger $r8;
        java.lang.StringBuilder $r9;
        short $s9;
        java.lang.String $r10;

        $r0 := @this: com.trilead.ssh2.transport.TransportConnection;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        if $i2 >= 4 goto label07;

        $i2 = 4;

     label01:
        $r2 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.compression.ICompressor send_comp>;

        if $r2 == null goto label03;

        $z0 = $r0.<com.trilead.ssh2.transport.TransportConnection: boolean can_send_compress>;

        if $z0 == 0 goto label03;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_comp_buffer>;

        $i5 = lengthof $r3;

        $i4 = lengthof $r1;

        $i4 = $i4 + 1024;

        if $i5 >= $i4 goto label02;

        $i5 = lengthof $r1;

        $i5 = $i5 + 1024;

        $r3 = newarray (byte)[$i5];

        $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_comp_buffer> = $r3;

     label02:
        $r2 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.compression.ICompressor send_comp>;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_comp_buffer>;

        $i1 = interfaceinvoke $r2.<com.trilead.ssh2.compression.ICompressor: int compress(byte[],int,int,byte[])>($r1, $i0, $i1, $r3);

        $r1 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_comp_buffer>;

     label03:
        $i5 = $i1 + 5;

        $i3 = $i5 + $i2;

        $i5 = $r0.<com.trilead.ssh2.transport.TransportConnection: int send_padd_blocksize>;

        $i4 = $i3 % $i5;

        if $i4 == 0 goto label04;

        $i5 = $r0.<com.trilead.ssh2.transport.TransportConnection: int send_padd_blocksize>;

        $i5 = $i5 - $i4;

        $i3 = $i3 + $i5;

     label04:
        if $i3 >= 16 goto label05;

        $i3 = 16;

     label05:
        $i5 = $i1 + 5;

        $i4 = $i3 - $i5;

        $z0 = $r0.<com.trilead.ssh2.transport.TransportConnection: boolean useRandomPadding>;

        if $z0 == 0 goto label08;

        $i2 = 0;

     label06:
        if $i2 >= $i4 goto label10;

        $r4 = $r0.<com.trilead.ssh2.transport.TransportConnection: java.security.SecureRandom rnd>;

        $i6 = virtualinvoke $r4.<java.security.SecureRandom: int nextInt()>();

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_padding_buffer>;

        $b7 = (byte) $i6;

        $r3[$i2] = $b7;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_padding_buffer>;

        $i8 = $i2 + 1;

        $i5 = $i6 >> 8;

        $b7 = (byte) $i5;

        $r3[$i8] = $b7;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_padding_buffer>;

        $i8 = $i2 + 2;

        $i5 = $i6 >> 16;

        $b7 = (byte) $i5;

        $r3[$i8] = $b7;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_padding_buffer>;

        $i8 = $i2 + 3;

        $i6 = $i6 >> 24;

        $b7 = (byte) $i6;

        $r3[$i8] = $b7;

        $i2 = $i2 + 4;

        goto label06;

     label07:
        if $i2 <= 64 goto label01;

        $i2 = 64;

        goto label01;

     label08:
        $i8 = 0;

     label09:
        if $i8 >= $i4 goto label10;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_padding_buffer>;

        $r3[$i8] = 0;

        $i8 = $i8 + 1;

        goto label09;

     label10:
        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_packet_header_buffer>;

        $i8 = $i3 + -4;

        $i8 = $i8 >> 24;

        $b7 = (byte) $i8;

        $r3[0] = $b7;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_packet_header_buffer>;

        $i8 = $i3 + -4;

        $i8 = $i8 >> 16;

        $b7 = (byte) $i8;

        $r3[1] = $b7;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_packet_header_buffer>;

        $i8 = $i3 + -4;

        $i8 = $i8 >> 8;

        $b7 = (byte) $i8;

        $r3[2] = $b7;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_packet_header_buffer>;

        $i8 = $i3 + -4;

        $b7 = (byte) $i8;

        $r3[3] = $b7;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_packet_header_buffer>;

        $b7 = (byte) $i4;

        $r3[4] = $b7;

        $r5 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.cipher.CipherOutputStream cos>;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_packet_header_buffer>;

        virtualinvoke $r5.<com.trilead.ssh2.crypto.cipher.CipherOutputStream: void write(byte[],int,int)>($r3, 0, 5);

        $r5 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.cipher.CipherOutputStream cos>;

        virtualinvoke $r5.<com.trilead.ssh2.crypto.cipher.CipherOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        $r5 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.cipher.CipherOutputStream cos>;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_padding_buffer>;

        virtualinvoke $r5.<com.trilead.ssh2.crypto.cipher.CipherOutputStream: void write(byte[],int,int)>($r3, 0, $i4);

        $r6 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.digest.MAC send_mac>;

        if $r6 == null goto label11;

        $r6 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.digest.MAC send_mac>;

        $i8 = $r0.<com.trilead.ssh2.transport.TransportConnection: int send_seq_number>;

        virtualinvoke $r6.<com.trilead.ssh2.crypto.digest.MAC: void initMac(int)>($i8);

        $r6 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.digest.MAC send_mac>;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_packet_header_buffer>;

        virtualinvoke $r6.<com.trilead.ssh2.crypto.digest.MAC: void update(byte[],int,int)>($r3, 0, 5);

        $r6 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.digest.MAC send_mac>;

        virtualinvoke $r6.<com.trilead.ssh2.crypto.digest.MAC: void update(byte[],int,int)>($r1, $i0, $i1);

        $r6 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.digest.MAC send_mac>;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_padding_buffer>;

        virtualinvoke $r6.<com.trilead.ssh2.crypto.digest.MAC: void update(byte[],int,int)>($r3, 0, $i4);

        $r6 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.digest.MAC send_mac>;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_mac_buffer>;

        virtualinvoke $r6.<com.trilead.ssh2.crypto.digest.MAC: void getMac(byte[],int)>($r3, 0);

        $r5 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.cipher.CipherOutputStream cos>;

        $r3 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_mac_buffer>;

        $r7 = $r0.<com.trilead.ssh2.transport.TransportConnection: byte[] send_mac_buffer>;

        $i8 = lengthof $r7;

        virtualinvoke $r5.<com.trilead.ssh2.crypto.cipher.CipherOutputStream: void writePlain(byte[],int,int)>($r3, 0, $i8);

     label11:
        $r5 = $r0.<com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.crypto.cipher.CipherOutputStream cos>;

        virtualinvoke $r5.<com.trilead.ssh2.crypto.cipher.CipherOutputStream: void flush()>();

        $r8 = <com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.log.Logger log>;

        $z0 = virtualinvoke $r8.<com.trilead.ssh2.log.Logger: boolean isEnabled()>();

        if $z0 == 0 goto label12;

        $r8 = <com.trilead.ssh2.transport.TransportConnection: com.trilead.ssh2.log.Logger log>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sent ");

        $b7 = $r1[$i0];

        $s9 = $b7 & 255;

        $r10 = staticinvoke <com.trilead.ssh2.packets.Packets: java.lang.String getMessageName(int)>($s9);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes payload");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<com.trilead.ssh2.log.Logger: void log(int,java.lang.String)>(90, $r10);

     label12:
        $i8 = $r0.<com.trilead.ssh2.transport.TransportConnection: int send_seq_number>;

        $i8 = $i8 + 1;

        $r0.<com.trilead.ssh2.transport.TransportConnection: int send_seq_number> = $i8;

        return;
    }

    public void startCompression()
    {
        com.trilead.ssh2.transport.TransportConnection $r0;

        $r0 := @this: com.trilead.ssh2.transport.TransportConnection;

        $r0.<com.trilead.ssh2.transport.TransportConnection: boolean can_recv_compress> = 1;

        $r0.<com.trilead.ssh2.transport.TransportConnection: boolean can_send_compress> = 1;

        return;
    }
}
