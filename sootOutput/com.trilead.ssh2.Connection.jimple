public class com.trilead.ssh2.Connection extends java.lang.Object
{
    private com.trilead.ssh2.auth.AuthenticationManager am;
    private boolean authenticated;
    private com.trilead.ssh2.channel.ChannelManager cm;
    private boolean compression;
    private java.util.Vector connectionMonitors;
    private com.trilead.ssh2.crypto.CryptoWishList cryptoWishList;
    private com.trilead.ssh2.DHGexParameters dhgexpara;
    private java.security.SecureRandom generator;
    private final java.lang.String hostname;
    private final int port;
    private com.trilead.ssh2.ProxyData proxyData;
    private boolean tcpNoDelay;
    private com.trilead.ssh2.transport.TransportManager tm;

    public void <init>(java.lang.String, int)
    {
        com.trilead.ssh2.Connection $r0;
        java.lang.String $r1;
        int $i0;
        com.trilead.ssh2.crypto.CryptoWishList $r2;
        com.trilead.ssh2.DHGexParameters $r3;
        java.util.Vector $r4;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.trilead.ssh2.Connection: boolean authenticated> = 0;

        $r0.<com.trilead.ssh2.Connection: boolean compression> = 0;

        $r2 = new com.trilead.ssh2.crypto.CryptoWishList;

        specialinvoke $r2.<com.trilead.ssh2.crypto.CryptoWishList: void <init>()>();

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.crypto.CryptoWishList cryptoWishList> = $r2;

        $r3 = new com.trilead.ssh2.DHGexParameters;

        specialinvoke $r3.<com.trilead.ssh2.DHGexParameters: void <init>()>();

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.DHGexParameters dhgexpara> = $r3;

        $r0.<com.trilead.ssh2.Connection: boolean tcpNoDelay> = 0;

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.ProxyData proxyData> = null;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        $r0.<com.trilead.ssh2.Connection: java.util.Vector connectionMonitors> = $r4;

        $r0.<com.trilead.ssh2.Connection: java.lang.String hostname> = $r1;

        $r0.<com.trilead.ssh2.Connection: int port> = $i0;

        return;
    }

    static com.trilead.ssh2.transport.TransportManager access$000(com.trilead.ssh2.Connection)
    {
        com.trilead.ssh2.Connection $r0;
        com.trilead.ssh2.transport.TransportManager $r1;

        $r0 := @parameter0: com.trilead.ssh2.Connection;

        $r1 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        return $r1;
    }

    private void close(java.lang.Throwable, boolean)
    {
        com.trilead.ssh2.Connection $r0;
        java.lang.Throwable $r1;
        boolean $z0;
        com.trilead.ssh2.channel.ChannelManager $r2;
        com.trilead.ssh2.transport.TransportManager $r3;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: java.lang.Throwable;

        $z0 := @parameter1: boolean;

        $r2 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm>;

        if $r2 == null goto label1;

        $r2 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm>;

        virtualinvoke $r2.<com.trilead.ssh2.channel.ChannelManager: void closeAllChannels()>();

     label1:
        $r3 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $r3 == null goto label3;

        $r3 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $z0 != 0 goto label4;

        $z0 = 1;

     label2:
        virtualinvoke $r3.<com.trilead.ssh2.transport.TransportManager: void close(java.lang.Throwable,boolean)>($r1, $z0);

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm> = null;

     label3:
        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am> = null;

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm> = null;

        $r0.<com.trilead.ssh2.Connection: boolean authenticated> = 0;

        return;

     label4:
        $z0 = 0;

        goto label2;
    }

    private final java.security.SecureRandom getOrCreateSecureRND()
    {
        com.trilead.ssh2.Connection $r0;
        java.security.SecureRandom $r1;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 = $r0.<com.trilead.ssh2.Connection: java.security.SecureRandom generator>;

        if $r1 != null goto label1;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        $r0.<com.trilead.ssh2.Connection: java.security.SecureRandom generator> = $r1;

     label1:
        $r1 = $r0.<com.trilead.ssh2.Connection: java.security.SecureRandom generator>;

        return $r1;
    }

    public void addConnectionMonitor(com.trilead.ssh2.ConnectionMonitor)
    {
        com.trilead.ssh2.Connection $r0;
        com.trilead.ssh2.ConnectionMonitor $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Throwable $r3;
        java.util.Vector $r4;
        com.trilead.ssh2.transport.TransportManager $r5;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: com.trilead.ssh2.ConnectionMonitor;

        entermonitor $r0;

        if $r1 != null goto label3;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cmon argument is null");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

     label3:
        $r4 = $r0.<com.trilead.ssh2.Connection: java.util.Vector connectionMonitors>;

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $r5 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $r5 == null goto label4;

        $r5 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        $r4 = $r0.<com.trilead.ssh2.Connection: java.util.Vector connectionMonitors>;

        virtualinvoke $r5.<com.trilead.ssh2.transport.TransportManager: void setConnectionMonitors(java.util.Vector)>($r4);

     label4:
        exitmonitor $r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public boolean authenticateWithKeyboardInteractive(java.lang.String, com.trilead.ssh2.InteractiveCallback) throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        java.lang.String $r1;
        com.trilead.ssh2.InteractiveCallback $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.trilead.ssh2.InteractiveCallback;

        entermonitor $r0;

     label1:
        $z0 = virtualinvoke $r0.<com.trilead.ssh2.Connection: boolean authenticateWithKeyboardInteractive(java.lang.String,java.lang.String[],com.trilead.ssh2.InteractiveCallback)>($r1, null, $r2);

     label2:
        exitmonitor $r0;

        return $z0;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean authenticateWithKeyboardInteractive(java.lang.String, java.lang.String[], com.trilead.ssh2.InteractiveCallback) throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        com.trilead.ssh2.InteractiveCallback $r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        java.lang.Throwable $r5;
        com.trilead.ssh2.transport.TransportManager $r6;
        java.lang.IllegalStateException $r7;
        com.trilead.ssh2.auth.AuthenticationManager $r8;
        com.trilead.ssh2.channel.ChannelManager $r9;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: com.trilead.ssh2.InteractiveCallback;

        entermonitor $r0;

        if $r3 != null goto label3;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Callback may not ne NULL!");

        throw $r4;

     label2:
        $r5 := @caughtexception;

        exitmonitor $r0;

        throw $r5;

     label3:
        $r6 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $r6 != null goto label4;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is not established!");

        throw $r7;

     label4:
        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

        if $z0 == 0 goto label5;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is already authenticated!");

        throw $r7;

     label5:
        $r8 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am>;

        if $r8 != null goto label6;

        $r8 = new com.trilead.ssh2.auth.AuthenticationManager;

        $r6 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        specialinvoke $r8.<com.trilead.ssh2.auth.AuthenticationManager: void <init>(com.trilead.ssh2.transport.TransportManager)>($r6);

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am> = $r8;

     label6:
        $r9 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm>;

        if $r9 != null goto label7;

        $r9 = new com.trilead.ssh2.channel.ChannelManager;

        $r6 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        specialinvoke $r9.<com.trilead.ssh2.channel.ChannelManager: void <init>(com.trilead.ssh2.transport.TransportManager)>($r6);

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm> = $r9;

     label7:
        if $r1 != null goto label8;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("user argument is null");

        throw $r4;

     label8:
        $r8 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am>;

        $z0 = virtualinvoke $r8.<com.trilead.ssh2.auth.AuthenticationManager: boolean authenticateInteractive(java.lang.String,java.lang.String[],com.trilead.ssh2.InteractiveCallback)>($r1, $r2, $r3);

        $r0.<com.trilead.ssh2.Connection: boolean authenticated> = $z0;

        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

     label9:
        exitmonitor $r0;

        return $z0;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label9 with label2;
    }

    public boolean authenticateWithNone(java.lang.String) throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        java.lang.String $r1;
        com.trilead.ssh2.transport.TransportManager $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4;
        com.trilead.ssh2.auth.AuthenticationManager $r5;
        com.trilead.ssh2.channel.ChannelManager $r6;
        java.lang.IllegalArgumentException $r7;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

     label1:
        $r2 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $r2 != null goto label3;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is not established!");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r0;

        throw $r4;

     label3:
        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

        if $z0 == 0 goto label4;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is already authenticated!");

        throw $r3;

     label4:
        $r5 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am>;

        if $r5 != null goto label5;

        $r5 = new com.trilead.ssh2.auth.AuthenticationManager;

        $r2 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        specialinvoke $r5.<com.trilead.ssh2.auth.AuthenticationManager: void <init>(com.trilead.ssh2.transport.TransportManager)>($r2);

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am> = $r5;

     label5:
        $r6 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm>;

        if $r6 != null goto label6;

        $r6 = new com.trilead.ssh2.channel.ChannelManager;

        $r2 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        specialinvoke $r6.<com.trilead.ssh2.channel.ChannelManager: void <init>(com.trilead.ssh2.transport.TransportManager)>($r2);

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm> = $r6;

     label6:
        if $r1 != null goto label7;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("user argument is null");

        throw $r7;

     label7:
        $r5 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am>;

        $z0 = virtualinvoke $r5.<com.trilead.ssh2.auth.AuthenticationManager: boolean authenticateNone(java.lang.String)>($r1);

        $r0.<com.trilead.ssh2.Connection: boolean authenticated> = $z0;

        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

     label8:
        exitmonitor $r0;

        return $z0;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label8 with label2;
    }

    public boolean authenticateWithPassword(java.lang.String, java.lang.String) throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        java.lang.String $r1, $r2;
        com.trilead.ssh2.transport.TransportManager $r3;
        boolean $z0;
        java.lang.IllegalStateException $r4;
        java.lang.Throwable $r5;
        com.trilead.ssh2.auth.AuthenticationManager $r6;
        com.trilead.ssh2.channel.ChannelManager $r7;
        java.lang.IllegalArgumentException $r8;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        entermonitor $r0;

     label1:
        $r3 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $r3 != null goto label3;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is not established!");

        throw $r4;

     label2:
        $r5 := @caughtexception;

        exitmonitor $r0;

        throw $r5;

     label3:
        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

        if $z0 == 0 goto label4;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is already authenticated!");

        throw $r4;

     label4:
        $r6 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am>;

        if $r6 != null goto label5;

        $r6 = new com.trilead.ssh2.auth.AuthenticationManager;

        $r3 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        specialinvoke $r6.<com.trilead.ssh2.auth.AuthenticationManager: void <init>(com.trilead.ssh2.transport.TransportManager)>($r3);

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am> = $r6;

     label5:
        $r7 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm>;

        if $r7 != null goto label6;

        $r7 = new com.trilead.ssh2.channel.ChannelManager;

        $r3 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        specialinvoke $r7.<com.trilead.ssh2.channel.ChannelManager: void <init>(com.trilead.ssh2.transport.TransportManager)>($r3);

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm> = $r7;

     label6:
        if $r1 != null goto label7;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("user argument is null");

        throw $r8;

     label7:
        if $r2 != null goto label8;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password argument is null");

        throw $r8;

     label8:
        $r6 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am>;

        $z0 = virtualinvoke $r6.<com.trilead.ssh2.auth.AuthenticationManager: boolean authenticatePassword(java.lang.String,java.lang.String)>($r1, $r2);

        $r0.<com.trilead.ssh2.Connection: boolean authenticated> = $z0;

        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

     label9:
        exitmonitor $r0;

        return $z0;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label9 with label2;
    }

    public boolean authenticateWithPublicKey(java.lang.String, java.security.KeyPair) throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        java.lang.String $r1;
        java.security.KeyPair $r2;
        com.trilead.ssh2.transport.TransportManager $r3;
        java.security.SecureRandom $r4;
        java.lang.IllegalStateException $r5;
        java.lang.Throwable $r6;
        boolean $z0;
        com.trilead.ssh2.auth.AuthenticationManager $r7;
        com.trilead.ssh2.channel.ChannelManager $r8;
        java.lang.IllegalArgumentException $r9;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.KeyPair;

        entermonitor $r0;

     label1:
        $r3 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $r3 != null goto label3;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is not established!");

        throw $r5;

     label2:
        $r6 := @caughtexception;

        exitmonitor $r0;

        throw $r6;

     label3:
        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

        if $z0 == 0 goto label4;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is already authenticated!");

        throw $r5;

     label4:
        $r7 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am>;

        if $r7 != null goto label5;

        $r7 = new com.trilead.ssh2.auth.AuthenticationManager;

        $r3 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        specialinvoke $r7.<com.trilead.ssh2.auth.AuthenticationManager: void <init>(com.trilead.ssh2.transport.TransportManager)>($r3);

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am> = $r7;

     label5:
        $r8 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm>;

        if $r8 != null goto label6;

        $r8 = new com.trilead.ssh2.channel.ChannelManager;

        $r3 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        specialinvoke $r8.<com.trilead.ssh2.channel.ChannelManager: void <init>(com.trilead.ssh2.transport.TransportManager)>($r3);

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm> = $r8;

     label6:
        if $r1 != null goto label7;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("user argument is null");

        throw $r9;

     label7:
        if $r2 != null goto label8;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Key pair argument is null");

        throw $r9;

     label8:
        $r7 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am>;

        $r4 = specialinvoke $r0.<com.trilead.ssh2.Connection: java.security.SecureRandom getOrCreateSecureRND()>();

        $z0 = virtualinvoke $r7.<com.trilead.ssh2.auth.AuthenticationManager: boolean authenticatePublicKey(java.lang.String,java.security.KeyPair,java.security.SecureRandom)>($r1, $r2, $r4);

        $r0.<com.trilead.ssh2.Connection: boolean authenticated> = $z0;

        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

     label9:
        exitmonitor $r0;

        return $z0;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label9 with label2;
    }

    public void cancelRemotePortForwarding(int) throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        int $i0;
        com.trilead.ssh2.transport.TransportManager $r1;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r3;
        boolean $z0;
        com.trilead.ssh2.channel.ChannelManager $r4;

        $r0 := @this: com.trilead.ssh2.Connection;

        $i0 := @parameter0: int;

        entermonitor $r0;

     label1:
        $r1 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $r1 != null goto label3;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You need to establish a connection first.");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

     label3:
        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

        if $z0 != 0 goto label4;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The connection is not authenticated.");

        throw $r2;

     label4:
        $r4 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm>;

        virtualinvoke $r4.<com.trilead.ssh2.channel.ChannelManager: void requestCancelGlobalForward(int)>($i0);

     label5:
        exitmonitor $r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label5 with label2;
    }

    public void close()
    {
        com.trilead.ssh2.Connection $r0;
        java.lang.Throwable $r1;

        $r0 := @this: com.trilead.ssh2.Connection;

        entermonitor $r0;

     label1:
        $r1 = new java.lang.Throwable;

        specialinvoke $r1.<java.lang.Throwable: void <init>(java.lang.String)>("Closed due to user request.");

        specialinvoke $r0.<com.trilead.ssh2.Connection: void close(java.lang.Throwable,boolean)>($r1, 0);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public com.trilead.ssh2.ConnectionInfo connect(com.trilead.ssh2.ServerHostKeyVerifier) throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        com.trilead.ssh2.ServerHostKeyVerifier $r1;
        com.trilead.ssh2.ConnectionInfo $r2;
        java.lang.Throwable $r3;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: com.trilead.ssh2.ServerHostKeyVerifier;

        entermonitor $r0;

     label1:
        $r2 = virtualinvoke $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.ConnectionInfo connect(com.trilead.ssh2.ServerHostKeyVerifier,int,int)>($r1, 0, 0);

     label2:
        exitmonitor $r0;

        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public com.trilead.ssh2.ConnectionInfo connect(com.trilead.ssh2.ServerHostKeyVerifier, int, int) throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        com.trilead.ssh2.ServerHostKeyVerifier $r1;
        int $i0, $i1, $i3;
        com.trilead.ssh2.transport.TransportManager $r2;
        java.lang.StringBuilder $r3;
        com.trilead.ssh2.ProxyData $r4;
        java.io.IOException $r5, $r23;
        java.net.SocketTimeoutException $r6, $r8;
        com.trilead.ssh2.Connection$1TimeoutState $r7;
        com.trilead.ssh2.Connection$1 $r9;
        com.trilead.ssh2.util.TimeoutService$TimeoutToken $r10;
        long $l2, $l4;
        java.lang.String $r11;
        java.lang.Throwable $r12, $r20, $r21, $r22;
        java.lang.IllegalArgumentException $r13;
        java.util.Vector $r14;
        boolean $z0;
        com.trilead.ssh2.crypto.CryptoWishList $r15;
        java.lang.String[] $r16;
        com.trilead.ssh2.DHGexParameters $r17;
        java.security.SecureRandom $r18;
        com.trilead.ssh2.ConnectionInfo $r19;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: com.trilead.ssh2.ServerHostKeyVerifier;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        entermonitor $r0;

     label01:
        $r2 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $r2 == null goto label03;

        $r5 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection to ");

        $r11 = $r0.<com.trilead.ssh2.Connection: java.lang.String hostname>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already in connected state!");

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label02:
        $r12 := @caughtexception;

        exitmonitor $r0;

        throw $r12;

     label03:
        if $i0 >= 0 goto label05;

     label04:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connectTimeout must be non-negative!");

        throw $r13;

     label05:
        if $i1 >= 0 goto label06;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("kexTimeout must be non-negative!");

        throw $r13;

     label06:
        $r7 = new com.trilead.ssh2.Connection$1TimeoutState;

        specialinvoke $r7.<com.trilead.ssh2.Connection$1TimeoutState: void <init>(com.trilead.ssh2.Connection)>($r0);

        $r2 = new com.trilead.ssh2.transport.TransportManager;

        $r11 = $r0.<com.trilead.ssh2.Connection: java.lang.String hostname>;

        $i3 = $r0.<com.trilead.ssh2.Connection: int port>;

        specialinvoke $r2.<com.trilead.ssh2.transport.TransportManager: void <init>(java.lang.String,int)>($r11, $i3);

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm> = $r2;

        $r2 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        $r14 = $r0.<com.trilead.ssh2.Connection: java.util.Vector connectionMonitors>;

        virtualinvoke $r2.<com.trilead.ssh2.transport.TransportManager: void setConnectionMonitors(java.util.Vector)>($r14);

        $z0 = $r0.<com.trilead.ssh2.Connection: boolean compression>;

        if $z0 != 0 goto label07;

        $r15 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.crypto.CryptoWishList cryptoWishList>;

        $r16 = newarray (java.lang.String)[1];

        $r16[0] = "none";

        $r15.<com.trilead.ssh2.crypto.CryptoWishList: java.lang.String[] c2s_comp_algos> = $r16;

        $r15 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.crypto.CryptoWishList cryptoWishList>;

        $r16 = newarray (java.lang.String)[1];

        $r16[0] = "none";

        $r15.<com.trilead.ssh2.crypto.CryptoWishList: java.lang.String[] s2c_comp_algos> = $r16;

     label07:
        $r2 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        entermonitor $r2;

     label08:
        exitmonitor $r2;

     label09:
        $r10 = null;

        if $i1 <= 0 goto label14;

     label10:
        $r9 = new com.trilead.ssh2.Connection$1;

     label11:
        specialinvoke $r9.<com.trilead.ssh2.Connection$1: void <init>(com.trilead.ssh2.Connection,com.trilead.ssh2.Connection$1TimeoutState)>($r0, $r7);

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label12:
        $l4 = (long) $i1;

     label13:
        $l2 = $l2 + $l4;

        $r10 = staticinvoke <com.trilead.ssh2.util.TimeoutService: com.trilead.ssh2.util.TimeoutService$TimeoutToken addTimeoutHandler(long,java.lang.Runnable)>($l2, $r9);

     label14:
        $r2 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        $r15 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.crypto.CryptoWishList cryptoWishList>;

        $r17 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.DHGexParameters dhgexpara>;

     label15:
        $r18 = specialinvoke $r0.<com.trilead.ssh2.Connection: java.security.SecureRandom getOrCreateSecureRND()>();

        $r4 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.ProxyData proxyData>;

        virtualinvoke $r2.<com.trilead.ssh2.transport.TransportManager: void initialize(com.trilead.ssh2.crypto.CryptoWishList,com.trilead.ssh2.ServerHostKeyVerifier,com.trilead.ssh2.DHGexParameters,int,java.security.SecureRandom,com.trilead.ssh2.ProxyData)>($r15, $r1, $r17, $i0, $r18, $r4);

     label16:
        $r2 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        $z0 = $r0.<com.trilead.ssh2.Connection: boolean tcpNoDelay>;

     label17:
        virtualinvoke $r2.<com.trilead.ssh2.transport.TransportManager: void setTcpNoDelay(boolean)>($z0);

        $r2 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        $r19 = virtualinvoke $r2.<com.trilead.ssh2.transport.TransportManager: com.trilead.ssh2.ConnectionInfo getConnectionInfo(int)>(1);

        if $r10 == null goto label38;

        staticinvoke <com.trilead.ssh2.util.TimeoutService: void cancelTimeoutHandler(com.trilead.ssh2.util.TimeoutService$TimeoutToken)>($r10);

     label18:
        entermonitor $r7;

     label19:
        $z0 = $r7.<com.trilead.ssh2.Connection$1TimeoutState: boolean timeoutSocketClosed>;

        if $z0 == 0 goto label37;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("This exception will be replaced by the one below =)");

        throw $r5;

     label20:
        $r20 := @caughtexception;

        exitmonitor $r7;

     label21:
        throw $r20;

     label22:
        $r8 := @caughtexception;

     label23:
        throw $r8;

     label24:
        $r21 := @caughtexception;

     label25:
        exitmonitor $r2;

     label26:
        throw $r21;

     label27:
        $r6 := @caughtexception;

     label28:
        $r8 = new java.net.SocketTimeoutException;

     label29:
        specialinvoke $r8.<java.net.SocketTimeoutException: void <init>(java.lang.String)>("The connect() operation on the socket timed out.");

        $r22 = virtualinvoke $r8.<java.net.SocketTimeoutException: java.lang.Throwable initCause(java.lang.Throwable)>($r6);

     label30:
        $r6 = (java.net.SocketTimeoutException) $r22;

     label31:
        throw $r6;

     label32:
        $r5 := @caughtexception;

     label33:
        $r22 = new java.lang.Throwable;

        specialinvoke $r22.<java.lang.Throwable: void <init>(java.lang.String)>("There was a problem during connect.");

        specialinvoke $r0.<com.trilead.ssh2.Connection: void close(java.lang.Throwable,boolean)>($r22, 0);

        entermonitor $r7;

     label34:
        $z0 = $r7.<com.trilead.ssh2.Connection$1TimeoutState: boolean timeoutSocketClosed>;

        if $z0 == 0 goto label39;

        $r6 = new java.net.SocketTimeoutException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The kexTimeout (");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms) expired.");

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.net.SocketTimeoutException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label35:
        $r22 := @caughtexception;

        exitmonitor $r7;

     label36:
        throw $r22;

     label37:
        $r7.<com.trilead.ssh2.Connection$1TimeoutState: boolean isCancelled> = 1;

        exitmonitor $r7;

     label38:
        exitmonitor $r0;

        return $r19;

     label39:
        exitmonitor $r7;

     label40:
        $z0 = $r5 instanceof com.trilead.ssh2.HTTPProxyException;

        if $z0 == 0 goto label41;

        throw $r5;

     label41:
        $r23 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There was a problem while connecting to ");

        $r11 = $r0.<com.trilead.ssh2.Connection: java.lang.String hostname>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i3 = $r0.<com.trilead.ssh2.Connection: int port>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r11);

        $r22 = virtualinvoke $r23.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r5);

        $r23 = (java.io.IOException) $r22;

        throw $r23;

     label42:
        nop;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label04 to label08 with label02;
        catch java.lang.Throwable from label08 to label09 with label24;
        catch java.net.SocketTimeoutException from label11 to label12 with label22;
        catch java.net.SocketTimeoutException from label13 to label14 with label22;
        catch java.io.IOException from label11 to label12 with label32;
        catch java.io.IOException from label13 to label14 with label32;
        catch java.lang.Throwable from label10 to label14 with label02;
        catch java.net.SocketTimeoutException from label15 to label16 with label27;
        catch java.io.IOException from label15 to label16 with label32;
        catch java.lang.Throwable from label14 to label16 with label02;
        catch java.net.SocketTimeoutException from label17 to label18 with label22;
        catch java.io.IOException from label17 to label18 with label32;
        catch java.lang.Throwable from label16 to label19 with label02;
        catch java.lang.Throwable from label19 to label21 with label20;
        catch java.net.SocketTimeoutException from label21 to label22 with label22;
        catch java.io.IOException from label21 to label22 with label32;
        catch java.lang.Throwable from label21 to label22 with label02;
        catch java.lang.Throwable from label23 to label24 with label02;
        catch java.lang.Throwable from label25 to label26 with label24;
        catch java.lang.Throwable from label26 to label27 with label02;
        catch java.net.SocketTimeoutException from label29 to label30 with label22;
        catch java.net.SocketTimeoutException from label31 to label32 with label22;
        catch java.io.IOException from label29 to label30 with label32;
        catch java.lang.Throwable from label28 to label32 with label02;
        catch java.lang.Throwable from label33 to label34 with label02;
        catch java.lang.Throwable from label34 to label36 with label35;
        catch java.lang.Throwable from label36 to label37 with label02;
        catch java.lang.Throwable from label37 to label38 with label20;
        catch java.lang.Throwable from label39 to label40 with label35;
        catch java.lang.Throwable from label40 to label42 with label02;
    }

    public com.trilead.ssh2.DynamicPortForwarder createDynamicPortForwarder(java.net.InetSocketAddress) throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        java.net.InetSocketAddress $r1;
        com.trilead.ssh2.transport.TransportManager $r2;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4;
        boolean $z0;
        com.trilead.ssh2.DynamicPortForwarder $r5;
        com.trilead.ssh2.channel.ChannelManager $r6;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: java.net.InetSocketAddress;

        entermonitor $r0;

     label1:
        $r2 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $r2 != null goto label3;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot forward ports, you need to establish a connection first.");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r0;

        throw $r4;

     label3:
        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

        if $z0 != 0 goto label4;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot forward ports, connection is not authenticated.");

        throw $r3;

     label4:
        $r5 = new com.trilead.ssh2.DynamicPortForwarder;

        $r6 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm>;

        specialinvoke $r5.<com.trilead.ssh2.DynamicPortForwarder: void <init>(com.trilead.ssh2.channel.ChannelManager,java.net.InetSocketAddress)>($r6, $r1);

     label5:
        exitmonitor $r0;

        return $r5;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label5 with label2;
    }

    public com.trilead.ssh2.LocalPortForwarder createLocalPortForwarder(java.net.InetSocketAddress, java.lang.String, int) throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        java.net.InetSocketAddress $r1;
        java.lang.String $r2;
        int $i0;
        com.trilead.ssh2.transport.TransportManager $r3;
        java.lang.IllegalStateException $r4;
        java.lang.Throwable $r5;
        boolean $z0;
        com.trilead.ssh2.LocalPortForwarder $r6;
        com.trilead.ssh2.channel.ChannelManager $r7;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: java.net.InetSocketAddress;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        entermonitor $r0;

     label1:
        $r3 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $r3 != null goto label3;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot forward ports, you need to establish a connection first.");

        throw $r4;

     label2:
        $r5 := @caughtexception;

        exitmonitor $r0;

        throw $r5;

     label3:
        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

        if $z0 != 0 goto label4;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot forward ports, connection is not authenticated.");

        throw $r4;

     label4:
        $r6 = new com.trilead.ssh2.LocalPortForwarder;

        $r7 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm>;

        specialinvoke $r6.<com.trilead.ssh2.LocalPortForwarder: void <init>(com.trilead.ssh2.channel.ChannelManager,java.net.InetSocketAddress,java.lang.String,int)>($r7, $r1, $r2, $i0);

     label5:
        exitmonitor $r0;

        return $r6;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label5 with label2;
    }

    public java.lang.String[] getRemainingAuthMethods(java.lang.String) throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String[] $r3;
        java.lang.Throwable $r4;
        com.trilead.ssh2.transport.TransportManager $r5;
        java.lang.IllegalStateException $r6;
        boolean $z0;
        com.trilead.ssh2.auth.AuthenticationManager $r7;
        com.trilead.ssh2.channel.ChannelManager $r8;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

        if $r1 != null goto label3;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("user argument may not be NULL!");

        throw $r2;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r0;

        throw $r4;

     label3:
        $r5 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $r5 != null goto label4;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is not established!");

        throw $r6;

     label4:
        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

        if $z0 == 0 goto label5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection is already authenticated!");

        throw $r6;

     label5:
        $r7 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am>;

        if $r7 != null goto label6;

        $r7 = new com.trilead.ssh2.auth.AuthenticationManager;

        $r5 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        specialinvoke $r7.<com.trilead.ssh2.auth.AuthenticationManager: void <init>(com.trilead.ssh2.transport.TransportManager)>($r5);

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am> = $r7;

     label6:
        $r8 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm>;

        if $r8 != null goto label7;

        $r8 = new com.trilead.ssh2.channel.ChannelManager;

        $r5 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        specialinvoke $r8.<com.trilead.ssh2.channel.ChannelManager: void <init>(com.trilead.ssh2.transport.TransportManager)>($r5);

        $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm> = $r8;

     label7:
        $r7 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.auth.AuthenticationManager am>;

        $r3 = virtualinvoke $r7.<com.trilead.ssh2.auth.AuthenticationManager: java.lang.String[] getRemainingMethods(java.lang.String)>($r1);

     label8:
        exitmonitor $r0;

        return $r3;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label8 with label2;
    }

    public boolean isAuthMethodAvailable(java.lang.String, java.lang.String) throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.String[] $r4;
        java.lang.Throwable $r5;
        boolean $z0;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        entermonitor $r0;

        if $r2 != null goto label3;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("method argument may not be NULL!");

        throw $r3;

     label2:
        $r5 := @caughtexception;

        exitmonitor $r0;

        throw $r5;

     label3:
        $r4 = virtualinvoke $r0.<com.trilead.ssh2.Connection: java.lang.String[] getRemainingAuthMethods(java.lang.String)>($r1);

        $i0 = 0;

     label4:
        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label8;

        $r1 = $r4[$i0];

        $i1 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r2);

     label5:
        if $i1 != 0 goto label7;

        $z0 = 1;

     label6:
        exitmonitor $r0;

        return $z0;

     label7:
        $i0 = $i0 + 1;

        goto label4;

     label8:
        $z0 = 0;

        goto label6;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label5 with label2;
    }

    public boolean isAuthenticationComplete()
    {
        com.trilead.ssh2.Connection $r0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: com.trilead.ssh2.Connection;

        entermonitor $r0;

     label1:
        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

     label2:
        exitmonitor $r0;

        return $z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public com.trilead.ssh2.Session openSession() throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        com.trilead.ssh2.transport.TransportManager $r1;
        java.security.SecureRandom $r2;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4;
        boolean $z0;
        com.trilead.ssh2.Session $r5;
        com.trilead.ssh2.channel.ChannelManager $r6;

        $r0 := @this: com.trilead.ssh2.Connection;

        entermonitor $r0;

     label1:
        $r1 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $r1 != null goto label3;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot open session, you need to establish a connection first.");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r0;

        throw $r4;

     label3:
        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

        if $z0 != 0 goto label4;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot open session, connection is not authenticated.");

        throw $r3;

     label4:
        $r5 = new com.trilead.ssh2.Session;

        $r6 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm>;

        $r2 = specialinvoke $r0.<com.trilead.ssh2.Connection: java.security.SecureRandom getOrCreateSecureRND()>();

        specialinvoke $r5.<com.trilead.ssh2.Session: void <init>(com.trilead.ssh2.channel.ChannelManager,java.security.SecureRandom)>($r6, $r2);

     label5:
        exitmonitor $r0;

        return $r5;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label5 with label2;
    }

    public void requestRemotePortForwarding(java.lang.String, int, java.lang.String, int) throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        com.trilead.ssh2.transport.TransportManager $r3;
        java.lang.IllegalStateException $r4;
        java.lang.Throwable $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        com.trilead.ssh2.channel.ChannelManager $r7;

        $r0 := @this: com.trilead.ssh2.Connection;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $i1 := @parameter3: int;

        entermonitor $r0;

     label1:
        $r3 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $r3 != null goto label3;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You need to establish a connection first.");

        throw $r4;

     label2:
        $r5 := @caughtexception;

        exitmonitor $r0;

        throw $r5;

     label3:
        $z0 = $r0.<com.trilead.ssh2.Connection: boolean authenticated>;

        if $z0 != 0 goto label4;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The connection is not authenticated.");

        throw $r4;

     label4:
        if $r1 == null goto label5;

        if $r2 == null goto label5;

        if $i0 <= 0 goto label5;

        if $i1 > 0 goto label6;

     label5:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label6:
        $r7 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.channel.ChannelManager cm>;

        virtualinvoke $r7.<com.trilead.ssh2.channel.ChannelManager: int requestGlobalForward(java.lang.String,int,java.lang.String,int)>($r1, $i0, $r2, $i1);

     label7:
        exitmonitor $r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label7 with label2;
    }

    public void setCompression(boolean) throws java.io.IOException
    {
        com.trilead.ssh2.Connection $r0;
        boolean $z0;
        com.trilead.ssh2.transport.TransportManager $r1;
        java.lang.StringBuilder $r2;
        java.io.IOException $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        $r0 := @this: com.trilead.ssh2.Connection;

        $z0 := @parameter0: boolean;

        entermonitor $r0;

     label1:
        $r1 = $r0.<com.trilead.ssh2.Connection: com.trilead.ssh2.transport.TransportManager tm>;

        if $r1 == null goto label3;

        $r3 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection to ");

        $r4 = $r0.<com.trilead.ssh2.Connection: java.lang.String hostname>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already in connected state!");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label2:
        $r5 := @caughtexception;

        exitmonitor $r0;

        throw $r5;

     label3:
        $r0.<com.trilead.ssh2.Connection: boolean compression> = $z0;

     label4:
        exitmonitor $r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
}
